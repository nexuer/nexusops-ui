/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
import * as $protobuf from "protobufjs/minimal";

// Common aliases
const $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
const $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

export const api = $root.api = (() => {

    /**
     * Namespace api.
     * @exports api
     * @namespace
     */
    const api = {};

    api.core = (function() {

        /**
         * Namespace core.
         * @memberof api
         * @namespace
         */
        const core = {};

        core.v1 = (function() {

            /**
             * Namespace v1.
             * @memberof api.core
             * @namespace
             */
            const v1 = {};

            v1.Service = (function() {

                /**
                 * Constructs a new Service service.
                 * @memberof api.core.v1
                 * @classdesc Represents a Service
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Service(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }

                (Service.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Service;

                /**
                 * Creates new Service service using the specified rpc implementation.
                 * @function create
                 * @memberof api.core.v1.Service
                 * @static
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 * @returns {Service} RPC service. Useful where requests and/or responses are streamed.
                 */
                Service.create = function create(rpcImpl, requestDelimited, responseDelimited) {
                    return new this(rpcImpl, requestDelimited, responseDelimited);
                };

                /**
                 * Callback as used by {@link api.core.v1.Service#gRtc}.
                 * @memberof api.core.v1.Service
                 * @typedef GRtcCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {api.core.v1.schema.Message} [response] Message
                 */

                /**
                 * Calls GRtc.
                 * @function gRtc
                 * @memberof api.core.v1.Service
                 * @instance
                 * @param {api.core.v1.schema.IMessage} request Message message or plain object
                 * @param {api.core.v1.Service.GRtcCallback} callback Node-style callback called with the error, if any, and Message
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Service.prototype.gRtc = function gRtc(request, callback) {
                    return this.rpcCall(gRtc, $root.api.core.v1.schema.Message, $root.api.core.v1.schema.Message, request, callback);
                }, "name", { value: "GRtc" });

                /**
                 * Calls GRtc.
                 * @function gRtc
                 * @memberof api.core.v1.Service
                 * @instance
                 * @param {api.core.v1.schema.IMessage} request Message message or plain object
                 * @returns {Promise<api.core.v1.schema.Message>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link api.core.v1.Service#metadata}.
                 * @memberof api.core.v1.Service
                 * @typedef MetadataCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {api.core.v1.schema.Metadata} [response] Metadata
                 */

                /**
                 * Calls Metadata.
                 * @function metadata
                 * @memberof api.core.v1.Service
                 * @instance
                 * @param {google.protobuf.IEmpty} request Empty message or plain object
                 * @param {api.core.v1.Service.MetadataCallback} callback Node-style callback called with the error, if any, and Metadata
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Service.prototype.metadata = function metadata(request, callback) {
                    return this.rpcCall(metadata, $root.google.protobuf.Empty, $root.api.core.v1.schema.Metadata, request, callback);
                }, "name", { value: "Metadata" });

                /**
                 * Calls Metadata.
                 * @function metadata
                 * @memberof api.core.v1.Service
                 * @instance
                 * @param {google.protobuf.IEmpty} request Empty message or plain object
                 * @returns {Promise<api.core.v1.schema.Metadata>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link api.core.v1.Service#getNode}.
                 * @memberof api.core.v1.Service
                 * @typedef GetNodeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {api.node.v1.schema.Node} [response] Node
                 */

                /**
                 * Calls GetNode.
                 * @function getNode
                 * @memberof api.core.v1.Service
                 * @instance
                 * @param {api.core.v1.schema.IGetNodeRequest} request GetNodeRequest message or plain object
                 * @param {api.core.v1.Service.GetNodeCallback} callback Node-style callback called with the error, if any, and Node
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Service.prototype.getNode = function getNode(request, callback) {
                    return this.rpcCall(getNode, $root.api.core.v1.schema.GetNodeRequest, $root.api.node.v1.schema.Node, request, callback);
                }, "name", { value: "GetNode" });

                /**
                 * Calls GetNode.
                 * @function getNode
                 * @memberof api.core.v1.Service
                 * @instance
                 * @param {api.core.v1.schema.IGetNodeRequest} request GetNodeRequest message or plain object
                 * @returns {Promise<api.node.v1.schema.Node>} Promise
                 * @variation 2
                 */

                /**
                 * Callback as used by {@link api.core.v1.Service#createNode}.
                 * @memberof api.core.v1.Service
                 * @typedef CreateNodeCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {api.node.v1.schema.Node} [response] Node
                 */

                /**
                 * Calls CreateNode.
                 * @function createNode
                 * @memberof api.core.v1.Service
                 * @instance
                 * @param {api.core.v1.schema.ICreateNodeRequest} request CreateNodeRequest message or plain object
                 * @param {api.core.v1.Service.CreateNodeCallback} callback Node-style callback called with the error, if any, and Node
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Service.prototype.createNode = function createNode(request, callback) {
                    return this.rpcCall(createNode, $root.api.core.v1.schema.CreateNodeRequest, $root.api.node.v1.schema.Node, request, callback);
                }, "name", { value: "CreateNode" });

                /**
                 * Calls CreateNode.
                 * @function createNode
                 * @memberof api.core.v1.Service
                 * @instance
                 * @param {api.core.v1.schema.ICreateNodeRequest} request CreateNodeRequest message or plain object
                 * @returns {Promise<api.node.v1.schema.Node>} Promise
                 * @variation 2
                 */

                return Service;
            })();

            v1.schema = (function() {

                /**
                 * Namespace schema.
                 * @memberof api.core.v1
                 * @namespace
                 */
                const schema = {};

                schema.Message = (function() {

                    /**
                     * Properties of a Message.
                     * @memberof api.core.v1.schema
                     * @interface IMessage
                     * @property {api.core.v1.schema.Message.Subject|null} [subject] Message subject
                     * @property {api.core.v1.schema.Message.Format|null} [format] Message format
                     * @property {Uint8Array|null} [data] Message data
                     */

                    /**
                     * Constructs a new Message.
                     * @memberof api.core.v1.schema
                     * @classdesc Represents a Message.
                     * @implements IMessage
                     * @constructor
                     * @param {api.core.v1.schema.IMessage=} [properties] Properties to set
                     */
                    function Message(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Message subject.
                     * @member {api.core.v1.schema.Message.Subject} subject
                     * @memberof api.core.v1.schema.Message
                     * @instance
                     */
                    Message.prototype.subject = 0;

                    /**
                     * Message format.
                     * @member {api.core.v1.schema.Message.Format} format
                     * @memberof api.core.v1.schema.Message
                     * @instance
                     */
                    Message.prototype.format = 0;

                    /**
                     * Message data.
                     * @member {Uint8Array} data
                     * @memberof api.core.v1.schema.Message
                     * @instance
                     */
                    Message.prototype.data = $util.newBuffer([]);

                    /**
                     * Creates a new Message instance using the specified properties.
                     * @function create
                     * @memberof api.core.v1.schema.Message
                     * @static
                     * @param {api.core.v1.schema.IMessage=} [properties] Properties to set
                     * @returns {api.core.v1.schema.Message} Message instance
                     */
                    Message.create = function create(properties) {
                        return new Message(properties);
                    };

                    /**
                     * Encodes the specified Message message. Does not implicitly {@link api.core.v1.schema.Message.verify|verify} messages.
                     * @function encode
                     * @memberof api.core.v1.schema.Message
                     * @static
                     * @param {api.core.v1.schema.IMessage} message Message message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Message.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.subject != null && Object.hasOwnProperty.call(message, "subject"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.subject);
                        if (message.format != null && Object.hasOwnProperty.call(message, "format"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.format);
                        if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
                        return writer;
                    };

                    /**
                     * Encodes the specified Message message, length delimited. Does not implicitly {@link api.core.v1.schema.Message.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof api.core.v1.schema.Message
                     * @static
                     * @param {api.core.v1.schema.IMessage} message Message message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Message.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Message message from the specified reader or buffer.
                     * @function decode
                     * @memberof api.core.v1.schema.Message
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {api.core.v1.schema.Message} Message
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Message.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.api.core.v1.schema.Message();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.subject = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.format = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.data = reader.bytes();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Message message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof api.core.v1.schema.Message
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {api.core.v1.schema.Message} Message
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Message.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Message message.
                     * @function verify
                     * @memberof api.core.v1.schema.Message
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Message.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.subject != null && message.hasOwnProperty("subject"))
                            switch (message.subject) {
                            default:
                                return "subject: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.format != null && message.hasOwnProperty("format"))
                            switch (message.format) {
                            default:
                                return "format: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        if (message.data != null && message.hasOwnProperty("data"))
                            if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                return "data: buffer expected";
                        return null;
                    };

                    /**
                     * Creates a Message message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof api.core.v1.schema.Message
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {api.core.v1.schema.Message} Message
                     */
                    Message.fromObject = function fromObject(object) {
                        if (object instanceof $root.api.core.v1.schema.Message)
                            return object;
                        let message = new $root.api.core.v1.schema.Message();
                        switch (object.subject) {
                        default:
                            if (typeof object.subject === "number") {
                                message.subject = object.subject;
                                break;
                            }
                            break;
                        case "UNKNOWN_SUBJECT":
                        case 0:
                            message.subject = 0;
                            break;
                        case "NODE":
                        case 1:
                            message.subject = 1;
                            break;
                        case "SERVER":
                        case 2:
                            message.subject = 2;
                            break;
                        }
                        switch (object.format) {
                        default:
                            if (typeof object.format === "number") {
                                message.format = object.format;
                                break;
                            }
                            break;
                        case "UNKNOWN_FORMAT":
                        case 0:
                            message.format = 0;
                            break;
                        case "PLAINTEXT":
                        case 1:
                            message.format = 1;
                            break;
                        case "GZIP":
                        case 2:
                            message.format = 2;
                            break;
                        }
                        if (object.data != null)
                            if (typeof object.data === "string")
                                $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                            else if (object.data.length >= 0)
                                message.data = object.data;
                        return message;
                    };

                    /**
                     * Creates a plain object from a Message message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof api.core.v1.schema.Message
                     * @static
                     * @param {api.core.v1.schema.Message} message Message
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Message.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.subject = options.enums === String ? "UNKNOWN_SUBJECT" : 0;
                            object.format = options.enums === String ? "UNKNOWN_FORMAT" : 0;
                            if (options.bytes === String)
                                object.data = "";
                            else {
                                object.data = [];
                                if (options.bytes !== Array)
                                    object.data = $util.newBuffer(object.data);
                            }
                        }
                        if (message.subject != null && message.hasOwnProperty("subject"))
                            object.subject = options.enums === String ? $root.api.core.v1.schema.Message.Subject[message.subject] === undefined ? message.subject : $root.api.core.v1.schema.Message.Subject[message.subject] : message.subject;
                        if (message.format != null && message.hasOwnProperty("format"))
                            object.format = options.enums === String ? $root.api.core.v1.schema.Message.Format[message.format] === undefined ? message.format : $root.api.core.v1.schema.Message.Format[message.format] : message.format;
                        if (message.data != null && message.hasOwnProperty("data"))
                            object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                        return object;
                    };

                    /**
                     * Converts this Message to JSON.
                     * @function toJSON
                     * @memberof api.core.v1.schema.Message
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Message.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for Message
                     * @function getTypeUrl
                     * @memberof api.core.v1.schema.Message
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Message.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/api.core.v1.schema.Message";
                    };

                    /**
                     * Subject enum.
                     * @name api.core.v1.schema.Message.Subject
                     * @enum {number}
                     * @property {number} UNKNOWN_SUBJECT=0 UNKNOWN_SUBJECT value
                     * @property {number} NODE=1 NODE value
                     * @property {number} SERVER=2 SERVER value
                     */
                    Message.Subject = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN_SUBJECT"] = 0;
                        values[valuesById[1] = "NODE"] = 1;
                        values[valuesById[2] = "SERVER"] = 2;
                        return values;
                    })();

                    /**
                     * Format enum.
                     * @name api.core.v1.schema.Message.Format
                     * @enum {number}
                     * @property {number} UNKNOWN_FORMAT=0 UNKNOWN_FORMAT value
                     * @property {number} PLAINTEXT=1 PLAINTEXT value
                     * @property {number} GZIP=2 GZIP value
                     */
                    Message.Format = (function() {
                        const valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "UNKNOWN_FORMAT"] = 0;
                        values[valuesById[1] = "PLAINTEXT"] = 1;
                        values[valuesById[2] = "GZIP"] = 2;
                        return values;
                    })();

                    return Message;
                })();

                schema.Metadata = (function() {

                    /**
                     * Properties of a Metadata.
                     * @memberof api.core.v1.schema
                     * @interface IMetadata
                     * @property {string|null} [version] Metadata version
                     * @property {string|null} [revision] Metadata revision
                     * @property {api.core.v1.schema.Metadata.IGs|null} [gs] Metadata gs
                     */

                    /**
                     * Constructs a new Metadata.
                     * @memberof api.core.v1.schema
                     * @classdesc Represents a Metadata.
                     * @implements IMetadata
                     * @constructor
                     * @param {api.core.v1.schema.IMetadata=} [properties] Properties to set
                     */
                    function Metadata(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Metadata version.
                     * @member {string} version
                     * @memberof api.core.v1.schema.Metadata
                     * @instance
                     */
                    Metadata.prototype.version = "";

                    /**
                     * Metadata revision.
                     * @member {string} revision
                     * @memberof api.core.v1.schema.Metadata
                     * @instance
                     */
                    Metadata.prototype.revision = "";

                    /**
                     * Metadata gs.
                     * @member {api.core.v1.schema.Metadata.IGs|null|undefined} gs
                     * @memberof api.core.v1.schema.Metadata
                     * @instance
                     */
                    Metadata.prototype.gs = null;

                    /**
                     * Creates a new Metadata instance using the specified properties.
                     * @function create
                     * @memberof api.core.v1.schema.Metadata
                     * @static
                     * @param {api.core.v1.schema.IMetadata=} [properties] Properties to set
                     * @returns {api.core.v1.schema.Metadata} Metadata instance
                     */
                    Metadata.create = function create(properties) {
                        return new Metadata(properties);
                    };

                    /**
                     * Encodes the specified Metadata message. Does not implicitly {@link api.core.v1.schema.Metadata.verify|verify} messages.
                     * @function encode
                     * @memberof api.core.v1.schema.Metadata
                     * @static
                     * @param {api.core.v1.schema.IMetadata} message Metadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Metadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.version);
                        if (message.revision != null && Object.hasOwnProperty.call(message, "revision"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.revision);
                        if (message.gs != null && Object.hasOwnProperty.call(message, "gs"))
                            $root.api.core.v1.schema.Metadata.Gs.encode(message.gs, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Metadata message, length delimited. Does not implicitly {@link api.core.v1.schema.Metadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof api.core.v1.schema.Metadata
                     * @static
                     * @param {api.core.v1.schema.IMetadata} message Metadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Metadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Metadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof api.core.v1.schema.Metadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {api.core.v1.schema.Metadata} Metadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Metadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.api.core.v1.schema.Metadata();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.version = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.revision = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.gs = $root.api.core.v1.schema.Metadata.Gs.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Metadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof api.core.v1.schema.Metadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {api.core.v1.schema.Metadata} Metadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Metadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Metadata message.
                     * @function verify
                     * @memberof api.core.v1.schema.Metadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Metadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isString(message.version))
                                return "version: string expected";
                        if (message.revision != null && message.hasOwnProperty("revision"))
                            if (!$util.isString(message.revision))
                                return "revision: string expected";
                        if (message.gs != null && message.hasOwnProperty("gs")) {
                            let error = $root.api.core.v1.schema.Metadata.Gs.verify(message.gs);
                            if (error)
                                return "gs." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof api.core.v1.schema.Metadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {api.core.v1.schema.Metadata} Metadata
                     */
                    Metadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.api.core.v1.schema.Metadata)
                            return object;
                        let message = new $root.api.core.v1.schema.Metadata();
                        if (object.version != null)
                            message.version = String(object.version);
                        if (object.revision != null)
                            message.revision = String(object.revision);
                        if (object.gs != null) {
                            if (typeof object.gs !== "object")
                                throw TypeError(".api.core.v1.schema.Metadata.gs: object expected");
                            message.gs = $root.api.core.v1.schema.Metadata.Gs.fromObject(object.gs);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Metadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof api.core.v1.schema.Metadata
                     * @static
                     * @param {api.core.v1.schema.Metadata} message Metadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Metadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.version = "";
                            object.revision = "";
                            object.gs = null;
                        }
                        if (message.version != null && message.hasOwnProperty("version"))
                            object.version = message.version;
                        if (message.revision != null && message.hasOwnProperty("revision"))
                            object.revision = message.revision;
                        if (message.gs != null && message.hasOwnProperty("gs"))
                            object.gs = $root.api.core.v1.schema.Metadata.Gs.toObject(message.gs, options);
                        return object;
                    };

                    /**
                     * Converts this Metadata to JSON.
                     * @function toJSON
                     * @memberof api.core.v1.schema.Metadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Metadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for Metadata
                     * @function getTypeUrl
                     * @memberof api.core.v1.schema.Metadata
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Metadata.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/api.core.v1.schema.Metadata";
                    };

                    Metadata.Gs = (function() {

                        /**
                         * Properties of a Gs.
                         * @memberof api.core.v1.schema.Metadata
                         * @interface IGs
                         * @property {boolean|null} [enabled] Gs enabled
                         * @property {string|null} [externalUrl] Gs externalUrl
                         */

                        /**
                         * Constructs a new Gs.
                         * @memberof api.core.v1.schema.Metadata
                         * @classdesc Represents a Gs.
                         * @implements IGs
                         * @constructor
                         * @param {api.core.v1.schema.Metadata.IGs=} [properties] Properties to set
                         */
                        function Gs(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Gs enabled.
                         * @member {boolean} enabled
                         * @memberof api.core.v1.schema.Metadata.Gs
                         * @instance
                         */
                        Gs.prototype.enabled = false;

                        /**
                         * Gs externalUrl.
                         * @member {string} externalUrl
                         * @memberof api.core.v1.schema.Metadata.Gs
                         * @instance
                         */
                        Gs.prototype.externalUrl = "";

                        /**
                         * Creates a new Gs instance using the specified properties.
                         * @function create
                         * @memberof api.core.v1.schema.Metadata.Gs
                         * @static
                         * @param {api.core.v1.schema.Metadata.IGs=} [properties] Properties to set
                         * @returns {api.core.v1.schema.Metadata.Gs} Gs instance
                         */
                        Gs.create = function create(properties) {
                            return new Gs(properties);
                        };

                        /**
                         * Encodes the specified Gs message. Does not implicitly {@link api.core.v1.schema.Metadata.Gs.verify|verify} messages.
                         * @function encode
                         * @memberof api.core.v1.schema.Metadata.Gs
                         * @static
                         * @param {api.core.v1.schema.Metadata.IGs} message Gs message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Gs.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.enabled != null && Object.hasOwnProperty.call(message, "enabled"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.enabled);
                            if (message.externalUrl != null && Object.hasOwnProperty.call(message, "externalUrl"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.externalUrl);
                            return writer;
                        };

                        /**
                         * Encodes the specified Gs message, length delimited. Does not implicitly {@link api.core.v1.schema.Metadata.Gs.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof api.core.v1.schema.Metadata.Gs
                         * @static
                         * @param {api.core.v1.schema.Metadata.IGs} message Gs message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Gs.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Gs message from the specified reader or buffer.
                         * @function decode
                         * @memberof api.core.v1.schema.Metadata.Gs
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {api.core.v1.schema.Metadata.Gs} Gs
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Gs.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.api.core.v1.schema.Metadata.Gs();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.enabled = reader.bool();
                                        break;
                                    }
                                case 2: {
                                        message.externalUrl = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Gs message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof api.core.v1.schema.Metadata.Gs
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {api.core.v1.schema.Metadata.Gs} Gs
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Gs.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Gs message.
                         * @function verify
                         * @memberof api.core.v1.schema.Metadata.Gs
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Gs.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.enabled != null && message.hasOwnProperty("enabled"))
                                if (typeof message.enabled !== "boolean")
                                    return "enabled: boolean expected";
                            if (message.externalUrl != null && message.hasOwnProperty("externalUrl"))
                                if (!$util.isString(message.externalUrl))
                                    return "externalUrl: string expected";
                            return null;
                        };

                        /**
                         * Creates a Gs message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof api.core.v1.schema.Metadata.Gs
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {api.core.v1.schema.Metadata.Gs} Gs
                         */
                        Gs.fromObject = function fromObject(object) {
                            if (object instanceof $root.api.core.v1.schema.Metadata.Gs)
                                return object;
                            let message = new $root.api.core.v1.schema.Metadata.Gs();
                            if (object.enabled != null)
                                message.enabled = Boolean(object.enabled);
                            if (object.externalUrl != null)
                                message.externalUrl = String(object.externalUrl);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Gs message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof api.core.v1.schema.Metadata.Gs
                         * @static
                         * @param {api.core.v1.schema.Metadata.Gs} message Gs
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Gs.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults) {
                                object.enabled = false;
                                object.externalUrl = "";
                            }
                            if (message.enabled != null && message.hasOwnProperty("enabled"))
                                object.enabled = message.enabled;
                            if (message.externalUrl != null && message.hasOwnProperty("externalUrl"))
                                object.externalUrl = message.externalUrl;
                            return object;
                        };

                        /**
                         * Converts this Gs to JSON.
                         * @function toJSON
                         * @memberof api.core.v1.schema.Metadata.Gs
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Gs.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for Gs
                         * @function getTypeUrl
                         * @memberof api.core.v1.schema.Metadata.Gs
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Gs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/api.core.v1.schema.Metadata.Gs";
                        };

                        return Gs;
                    })();

                    return Metadata;
                })();

                schema.CreateNodeRequest = (function() {

                    /**
                     * Properties of a CreateNodeRequest.
                     * @memberof api.core.v1.schema
                     * @interface ICreateNodeRequest
                     * @property {string|null} [hostname] CreateNodeRequest hostname
                     * @property {Array.<string>|null} [intranetIp] CreateNodeRequest intranetIp
                     * @property {string|null} [internetIp] CreateNodeRequest internetIp
                     * @property {string|null} [internetIpv6] CreateNodeRequest internetIpv6
                     */

                    /**
                     * Constructs a new CreateNodeRequest.
                     * @memberof api.core.v1.schema
                     * @classdesc Represents a CreateNodeRequest.
                     * @implements ICreateNodeRequest
                     * @constructor
                     * @param {api.core.v1.schema.ICreateNodeRequest=} [properties] Properties to set
                     */
                    function CreateNodeRequest(properties) {
                        this.intranetIp = [];
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * CreateNodeRequest hostname.
                     * @member {string} hostname
                     * @memberof api.core.v1.schema.CreateNodeRequest
                     * @instance
                     */
                    CreateNodeRequest.prototype.hostname = "";

                    /**
                     * CreateNodeRequest intranetIp.
                     * @member {Array.<string>} intranetIp
                     * @memberof api.core.v1.schema.CreateNodeRequest
                     * @instance
                     */
                    CreateNodeRequest.prototype.intranetIp = $util.emptyArray;

                    /**
                     * CreateNodeRequest internetIp.
                     * @member {string} internetIp
                     * @memberof api.core.v1.schema.CreateNodeRequest
                     * @instance
                     */
                    CreateNodeRequest.prototype.internetIp = "";

                    /**
                     * CreateNodeRequest internetIpv6.
                     * @member {string} internetIpv6
                     * @memberof api.core.v1.schema.CreateNodeRequest
                     * @instance
                     */
                    CreateNodeRequest.prototype.internetIpv6 = "";

                    /**
                     * Creates a new CreateNodeRequest instance using the specified properties.
                     * @function create
                     * @memberof api.core.v1.schema.CreateNodeRequest
                     * @static
                     * @param {api.core.v1.schema.ICreateNodeRequest=} [properties] Properties to set
                     * @returns {api.core.v1.schema.CreateNodeRequest} CreateNodeRequest instance
                     */
                    CreateNodeRequest.create = function create(properties) {
                        return new CreateNodeRequest(properties);
                    };

                    /**
                     * Encodes the specified CreateNodeRequest message. Does not implicitly {@link api.core.v1.schema.CreateNodeRequest.verify|verify} messages.
                     * @function encode
                     * @memberof api.core.v1.schema.CreateNodeRequest
                     * @static
                     * @param {api.core.v1.schema.ICreateNodeRequest} message CreateNodeRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateNodeRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.hostname != null && Object.hasOwnProperty.call(message, "hostname"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.hostname);
                        if (message.intranetIp != null && message.intranetIp.length)
                            for (let i = 0; i < message.intranetIp.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.intranetIp[i]);
                        if (message.internetIp != null && Object.hasOwnProperty.call(message, "internetIp"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.internetIp);
                        if (message.internetIpv6 != null && Object.hasOwnProperty.call(message, "internetIpv6"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.internetIpv6);
                        return writer;
                    };

                    /**
                     * Encodes the specified CreateNodeRequest message, length delimited. Does not implicitly {@link api.core.v1.schema.CreateNodeRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof api.core.v1.schema.CreateNodeRequest
                     * @static
                     * @param {api.core.v1.schema.ICreateNodeRequest} message CreateNodeRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CreateNodeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a CreateNodeRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof api.core.v1.schema.CreateNodeRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {api.core.v1.schema.CreateNodeRequest} CreateNodeRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateNodeRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.api.core.v1.schema.CreateNodeRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.hostname = reader.string();
                                    break;
                                }
                            case 2: {
                                    if (!(message.intranetIp && message.intranetIp.length))
                                        message.intranetIp = [];
                                    message.intranetIp.push(reader.string());
                                    break;
                                }
                            case 3: {
                                    message.internetIp = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.internetIpv6 = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a CreateNodeRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof api.core.v1.schema.CreateNodeRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {api.core.v1.schema.CreateNodeRequest} CreateNodeRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CreateNodeRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a CreateNodeRequest message.
                     * @function verify
                     * @memberof api.core.v1.schema.CreateNodeRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CreateNodeRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.hostname != null && message.hasOwnProperty("hostname"))
                            if (!$util.isString(message.hostname))
                                return "hostname: string expected";
                        if (message.intranetIp != null && message.hasOwnProperty("intranetIp")) {
                            if (!Array.isArray(message.intranetIp))
                                return "intranetIp: array expected";
                            for (let i = 0; i < message.intranetIp.length; ++i)
                                if (!$util.isString(message.intranetIp[i]))
                                    return "intranetIp: string[] expected";
                        }
                        if (message.internetIp != null && message.hasOwnProperty("internetIp"))
                            if (!$util.isString(message.internetIp))
                                return "internetIp: string expected";
                        if (message.internetIpv6 != null && message.hasOwnProperty("internetIpv6"))
                            if (!$util.isString(message.internetIpv6))
                                return "internetIpv6: string expected";
                        return null;
                    };

                    /**
                     * Creates a CreateNodeRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof api.core.v1.schema.CreateNodeRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {api.core.v1.schema.CreateNodeRequest} CreateNodeRequest
                     */
                    CreateNodeRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.api.core.v1.schema.CreateNodeRequest)
                            return object;
                        let message = new $root.api.core.v1.schema.CreateNodeRequest();
                        if (object.hostname != null)
                            message.hostname = String(object.hostname);
                        if (object.intranetIp) {
                            if (!Array.isArray(object.intranetIp))
                                throw TypeError(".api.core.v1.schema.CreateNodeRequest.intranetIp: array expected");
                            message.intranetIp = [];
                            for (let i = 0; i < object.intranetIp.length; ++i)
                                message.intranetIp[i] = String(object.intranetIp[i]);
                        }
                        if (object.internetIp != null)
                            message.internetIp = String(object.internetIp);
                        if (object.internetIpv6 != null)
                            message.internetIpv6 = String(object.internetIpv6);
                        return message;
                    };

                    /**
                     * Creates a plain object from a CreateNodeRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof api.core.v1.schema.CreateNodeRequest
                     * @static
                     * @param {api.core.v1.schema.CreateNodeRequest} message CreateNodeRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CreateNodeRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.arrays || options.defaults)
                            object.intranetIp = [];
                        if (options.defaults) {
                            object.hostname = "";
                            object.internetIp = "";
                            object.internetIpv6 = "";
                        }
                        if (message.hostname != null && message.hasOwnProperty("hostname"))
                            object.hostname = message.hostname;
                        if (message.intranetIp && message.intranetIp.length) {
                            object.intranetIp = [];
                            for (let j = 0; j < message.intranetIp.length; ++j)
                                object.intranetIp[j] = message.intranetIp[j];
                        }
                        if (message.internetIp != null && message.hasOwnProperty("internetIp"))
                            object.internetIp = message.internetIp;
                        if (message.internetIpv6 != null && message.hasOwnProperty("internetIpv6"))
                            object.internetIpv6 = message.internetIpv6;
                        return object;
                    };

                    /**
                     * Converts this CreateNodeRequest to JSON.
                     * @function toJSON
                     * @memberof api.core.v1.schema.CreateNodeRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CreateNodeRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for CreateNodeRequest
                     * @function getTypeUrl
                     * @memberof api.core.v1.schema.CreateNodeRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    CreateNodeRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/api.core.v1.schema.CreateNodeRequest";
                    };

                    return CreateNodeRequest;
                })();

                schema.GetNodeRequest = (function() {

                    /**
                     * Properties of a GetNodeRequest.
                     * @memberof api.core.v1.schema
                     * @interface IGetNodeRequest
                     * @property {string|null} [id] GetNodeRequest id
                     */

                    /**
                     * Constructs a new GetNodeRequest.
                     * @memberof api.core.v1.schema
                     * @classdesc Represents a GetNodeRequest.
                     * @implements IGetNodeRequest
                     * @constructor
                     * @param {api.core.v1.schema.IGetNodeRequest=} [properties] Properties to set
                     */
                    function GetNodeRequest(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * GetNodeRequest id.
                     * @member {string} id
                     * @memberof api.core.v1.schema.GetNodeRequest
                     * @instance
                     */
                    GetNodeRequest.prototype.id = "";

                    /**
                     * Creates a new GetNodeRequest instance using the specified properties.
                     * @function create
                     * @memberof api.core.v1.schema.GetNodeRequest
                     * @static
                     * @param {api.core.v1.schema.IGetNodeRequest=} [properties] Properties to set
                     * @returns {api.core.v1.schema.GetNodeRequest} GetNodeRequest instance
                     */
                    GetNodeRequest.create = function create(properties) {
                        return new GetNodeRequest(properties);
                    };

                    /**
                     * Encodes the specified GetNodeRequest message. Does not implicitly {@link api.core.v1.schema.GetNodeRequest.verify|verify} messages.
                     * @function encode
                     * @memberof api.core.v1.schema.GetNodeRequest
                     * @static
                     * @param {api.core.v1.schema.IGetNodeRequest} message GetNodeRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetNodeRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        return writer;
                    };

                    /**
                     * Encodes the specified GetNodeRequest message, length delimited. Does not implicitly {@link api.core.v1.schema.GetNodeRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof api.core.v1.schema.GetNodeRequest
                     * @static
                     * @param {api.core.v1.schema.IGetNodeRequest} message GetNodeRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetNodeRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a GetNodeRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof api.core.v1.schema.GetNodeRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {api.core.v1.schema.GetNodeRequest} GetNodeRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetNodeRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.api.core.v1.schema.GetNodeRequest();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.id = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a GetNodeRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof api.core.v1.schema.GetNodeRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {api.core.v1.schema.GetNodeRequest} GetNodeRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetNodeRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a GetNodeRequest message.
                     * @function verify
                     * @memberof api.core.v1.schema.GetNodeRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetNodeRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        return null;
                    };

                    /**
                     * Creates a GetNodeRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof api.core.v1.schema.GetNodeRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {api.core.v1.schema.GetNodeRequest} GetNodeRequest
                     */
                    GetNodeRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.api.core.v1.schema.GetNodeRequest)
                            return object;
                        let message = new $root.api.core.v1.schema.GetNodeRequest();
                        if (object.id != null)
                            message.id = String(object.id);
                        return message;
                    };

                    /**
                     * Creates a plain object from a GetNodeRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof api.core.v1.schema.GetNodeRequest
                     * @static
                     * @param {api.core.v1.schema.GetNodeRequest} message GetNodeRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetNodeRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults)
                            object.id = "";
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        return object;
                    };

                    /**
                     * Converts this GetNodeRequest to JSON.
                     * @function toJSON
                     * @memberof api.core.v1.schema.GetNodeRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetNodeRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for GetNodeRequest
                     * @function getTypeUrl
                     * @memberof api.core.v1.schema.GetNodeRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GetNodeRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/api.core.v1.schema.GetNodeRequest";
                    };

                    return GetNodeRequest;
                })();

                return schema;
            })();

            return v1;
        })();

        return core;
    })();

    api.node = (function() {

        /**
         * Namespace node.
         * @memberof api
         * @namespace
         */
        const node = {};

        node.v1 = (function() {

            /**
             * Namespace v1.
             * @memberof api.node
             * @namespace
             */
            const v1 = {};

            v1.schema = (function() {

                /**
                 * Namespace schema.
                 * @memberof api.node.v1
                 * @namespace
                 */
                const schema = {};

                schema.Node = (function() {

                    /**
                     * Properties of a Node.
                     * @memberof api.node.v1.schema
                     * @interface INode
                     * @property {string|null} [id] Node id
                     * @property {string|null} [name] Node name
                     * @property {string|null} [hostname] Node hostname
                     * @property {string|null} [createdAt] Node createdAt
                     * @property {api.node.v1.schema.Node.ISecret|null} [secret] Node secret
                     */

                    /**
                     * Constructs a new Node.
                     * @memberof api.node.v1.schema
                     * @classdesc Represents a Node.
                     * @implements INode
                     * @constructor
                     * @param {api.node.v1.schema.INode=} [properties] Properties to set
                     */
                    function Node(properties) {
                        if (properties)
                            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }

                    /**
                     * Node id.
                     * @member {string} id
                     * @memberof api.node.v1.schema.Node
                     * @instance
                     */
                    Node.prototype.id = "";

                    /**
                     * Node name.
                     * @member {string} name
                     * @memberof api.node.v1.schema.Node
                     * @instance
                     */
                    Node.prototype.name = "";

                    /**
                     * Node hostname.
                     * @member {string} hostname
                     * @memberof api.node.v1.schema.Node
                     * @instance
                     */
                    Node.prototype.hostname = "";

                    /**
                     * Node createdAt.
                     * @member {string} createdAt
                     * @memberof api.node.v1.schema.Node
                     * @instance
                     */
                    Node.prototype.createdAt = "";

                    /**
                     * Node secret.
                     * @member {api.node.v1.schema.Node.ISecret|null|undefined} secret
                     * @memberof api.node.v1.schema.Node
                     * @instance
                     */
                    Node.prototype.secret = null;

                    /**
                     * Creates a new Node instance using the specified properties.
                     * @function create
                     * @memberof api.node.v1.schema.Node
                     * @static
                     * @param {api.node.v1.schema.INode=} [properties] Properties to set
                     * @returns {api.node.v1.schema.Node} Node instance
                     */
                    Node.create = function create(properties) {
                        return new Node(properties);
                    };

                    /**
                     * Encodes the specified Node message. Does not implicitly {@link api.node.v1.schema.Node.verify|verify} messages.
                     * @function encode
                     * @memberof api.node.v1.schema.Node
                     * @static
                     * @param {api.node.v1.schema.INode} message Node message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Node.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);
                        if (message.hostname != null && Object.hasOwnProperty.call(message, "hostname"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.hostname);
                        if (message.createdAt != null && Object.hasOwnProperty.call(message, "createdAt"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.createdAt);
                        if (message.secret != null && Object.hasOwnProperty.call(message, "secret"))
                            $root.api.node.v1.schema.Node.Secret.encode(message.secret, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                        return writer;
                    };

                    /**
                     * Encodes the specified Node message, length delimited. Does not implicitly {@link api.node.v1.schema.Node.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof api.node.v1.schema.Node
                     * @static
                     * @param {api.node.v1.schema.INode} message Node message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Node.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };

                    /**
                     * Decodes a Node message from the specified reader or buffer.
                     * @function decode
                     * @memberof api.node.v1.schema.Node
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {api.node.v1.schema.Node} Node
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Node.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.api.node.v1.schema.Node();
                        while (reader.pos < end) {
                            let tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.id = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.name = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.hostname = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.createdAt = reader.string();
                                    break;
                                }
                            case 10: {
                                    message.secret = $root.api.node.v1.schema.Node.Secret.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };

                    /**
                     * Decodes a Node message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof api.node.v1.schema.Node
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {api.node.v1.schema.Node} Node
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Node.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };

                    /**
                     * Verifies a Node message.
                     * @function verify
                     * @memberof api.node.v1.schema.Node
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Node.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isString(message.id))
                                return "id: string expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.hostname != null && message.hasOwnProperty("hostname"))
                            if (!$util.isString(message.hostname))
                                return "hostname: string expected";
                        if (message.createdAt != null && message.hasOwnProperty("createdAt"))
                            if (!$util.isString(message.createdAt))
                                return "createdAt: string expected";
                        if (message.secret != null && message.hasOwnProperty("secret")) {
                            let error = $root.api.node.v1.schema.Node.Secret.verify(message.secret);
                            if (error)
                                return "secret." + error;
                        }
                        return null;
                    };

                    /**
                     * Creates a Node message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof api.node.v1.schema.Node
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {api.node.v1.schema.Node} Node
                     */
                    Node.fromObject = function fromObject(object) {
                        if (object instanceof $root.api.node.v1.schema.Node)
                            return object;
                        let message = new $root.api.node.v1.schema.Node();
                        if (object.id != null)
                            message.id = String(object.id);
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.hostname != null)
                            message.hostname = String(object.hostname);
                        if (object.createdAt != null)
                            message.createdAt = String(object.createdAt);
                        if (object.secret != null) {
                            if (typeof object.secret !== "object")
                                throw TypeError(".api.node.v1.schema.Node.secret: object expected");
                            message.secret = $root.api.node.v1.schema.Node.Secret.fromObject(object.secret);
                        }
                        return message;
                    };

                    /**
                     * Creates a plain object from a Node message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof api.node.v1.schema.Node
                     * @static
                     * @param {api.node.v1.schema.Node} message Node
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Node.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        let object = {};
                        if (options.defaults) {
                            object.id = "";
                            object.name = "";
                            object.hostname = "";
                            object.createdAt = "";
                            object.secret = null;
                        }
                        if (message.id != null && message.hasOwnProperty("id"))
                            object.id = message.id;
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.hostname != null && message.hasOwnProperty("hostname"))
                            object.hostname = message.hostname;
                        if (message.createdAt != null && message.hasOwnProperty("createdAt"))
                            object.createdAt = message.createdAt;
                        if (message.secret != null && message.hasOwnProperty("secret"))
                            object.secret = $root.api.node.v1.schema.Node.Secret.toObject(message.secret, options);
                        return object;
                    };

                    /**
                     * Converts this Node to JSON.
                     * @function toJSON
                     * @memberof api.node.v1.schema.Node
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Node.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };

                    /**
                     * Gets the default type url for Node
                     * @function getTypeUrl
                     * @memberof api.node.v1.schema.Node
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Node.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/api.node.v1.schema.Node";
                    };

                    Node.Secret = (function() {

                        /**
                         * Properties of a Secret.
                         * @memberof api.node.v1.schema.Node
                         * @interface ISecret
                         * @property {string|null} [accessToken] Secret accessToken
                         */

                        /**
                         * Constructs a new Secret.
                         * @memberof api.node.v1.schema.Node
                         * @classdesc Represents a Secret.
                         * @implements ISecret
                         * @constructor
                         * @param {api.node.v1.schema.Node.ISecret=} [properties] Properties to set
                         */
                        function Secret(properties) {
                            if (properties)
                                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }

                        /**
                         * Secret accessToken.
                         * @member {string} accessToken
                         * @memberof api.node.v1.schema.Node.Secret
                         * @instance
                         */
                        Secret.prototype.accessToken = "";

                        /**
                         * Creates a new Secret instance using the specified properties.
                         * @function create
                         * @memberof api.node.v1.schema.Node.Secret
                         * @static
                         * @param {api.node.v1.schema.Node.ISecret=} [properties] Properties to set
                         * @returns {api.node.v1.schema.Node.Secret} Secret instance
                         */
                        Secret.create = function create(properties) {
                            return new Secret(properties);
                        };

                        /**
                         * Encodes the specified Secret message. Does not implicitly {@link api.node.v1.schema.Node.Secret.verify|verify} messages.
                         * @function encode
                         * @memberof api.node.v1.schema.Node.Secret
                         * @static
                         * @param {api.node.v1.schema.Node.ISecret} message Secret message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Secret.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.accessToken != null && Object.hasOwnProperty.call(message, "accessToken"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.accessToken);
                            return writer;
                        };

                        /**
                         * Encodes the specified Secret message, length delimited. Does not implicitly {@link api.node.v1.schema.Node.Secret.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof api.node.v1.schema.Node.Secret
                         * @static
                         * @param {api.node.v1.schema.Node.ISecret} message Secret message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Secret.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };

                        /**
                         * Decodes a Secret message from the specified reader or buffer.
                         * @function decode
                         * @memberof api.node.v1.schema.Node.Secret
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {api.node.v1.schema.Node.Secret} Secret
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Secret.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.api.node.v1.schema.Node.Secret();
                            while (reader.pos < end) {
                                let tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1: {
                                        message.accessToken = reader.string();
                                        break;
                                    }
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };

                        /**
                         * Decodes a Secret message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof api.node.v1.schema.Node.Secret
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {api.node.v1.schema.Node.Secret} Secret
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Secret.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };

                        /**
                         * Verifies a Secret message.
                         * @function verify
                         * @memberof api.node.v1.schema.Node.Secret
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Secret.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.accessToken != null && message.hasOwnProperty("accessToken"))
                                if (!$util.isString(message.accessToken))
                                    return "accessToken: string expected";
                            return null;
                        };

                        /**
                         * Creates a Secret message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof api.node.v1.schema.Node.Secret
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {api.node.v1.schema.Node.Secret} Secret
                         */
                        Secret.fromObject = function fromObject(object) {
                            if (object instanceof $root.api.node.v1.schema.Node.Secret)
                                return object;
                            let message = new $root.api.node.v1.schema.Node.Secret();
                            if (object.accessToken != null)
                                message.accessToken = String(object.accessToken);
                            return message;
                        };

                        /**
                         * Creates a plain object from a Secret message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof api.node.v1.schema.Node.Secret
                         * @static
                         * @param {api.node.v1.schema.Node.Secret} message Secret
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Secret.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            let object = {};
                            if (options.defaults)
                                object.accessToken = "";
                            if (message.accessToken != null && message.hasOwnProperty("accessToken"))
                                object.accessToken = message.accessToken;
                            return object;
                        };

                        /**
                         * Converts this Secret to JSON.
                         * @function toJSON
                         * @memberof api.node.v1.schema.Node.Secret
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Secret.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };

                        /**
                         * Gets the default type url for Secret
                         * @function getTypeUrl
                         * @memberof api.node.v1.schema.Node.Secret
                         * @static
                         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                         * @returns {string} The default type url
                         */
                        Secret.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                            if (typeUrlPrefix === undefined) {
                                typeUrlPrefix = "type.googleapis.com";
                            }
                            return typeUrlPrefix + "/api.node.v1.schema.Node.Secret";
                        };

                        return Secret;
                    })();

                    return Node;
                })();

                return schema;
            })();

            return v1;
        })();

        return node;
    })();

    return api;
})();

export const buf = $root.buf = (() => {

    /**
     * Namespace buf.
     * @exports buf
     * @namespace
     */
    const buf = {};

    buf.validate = (function() {

        /**
         * Namespace validate.
         * @memberof buf
         * @namespace
         */
        const validate = {};

        validate.MessageConstraints = (function() {

            /**
             * Properties of a MessageConstraints.
             * @memberof buf.validate
             * @interface IMessageConstraints
             * @property {boolean|null} [disabled] MessageConstraints disabled
             * @property {Array.<buf.validate.IConstraint>|null} [cel] MessageConstraints cel
             */

            /**
             * Constructs a new MessageConstraints.
             * @memberof buf.validate
             * @classdesc Represents a MessageConstraints.
             * @implements IMessageConstraints
             * @constructor
             * @param {buf.validate.IMessageConstraints=} [properties] Properties to set
             */
            function MessageConstraints(properties) {
                this.cel = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MessageConstraints disabled.
             * @member {boolean|null|undefined} disabled
             * @memberof buf.validate.MessageConstraints
             * @instance
             */
            MessageConstraints.prototype.disabled = null;

            /**
             * MessageConstraints cel.
             * @member {Array.<buf.validate.IConstraint>} cel
             * @memberof buf.validate.MessageConstraints
             * @instance
             */
            MessageConstraints.prototype.cel = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * MessageConstraints _disabled.
             * @member {"disabled"|undefined} _disabled
             * @memberof buf.validate.MessageConstraints
             * @instance
             */
            Object.defineProperty(MessageConstraints.prototype, "_disabled", {
                get: $util.oneOfGetter($oneOfFields = ["disabled"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new MessageConstraints instance using the specified properties.
             * @function create
             * @memberof buf.validate.MessageConstraints
             * @static
             * @param {buf.validate.IMessageConstraints=} [properties] Properties to set
             * @returns {buf.validate.MessageConstraints} MessageConstraints instance
             */
            MessageConstraints.create = function create(properties) {
                return new MessageConstraints(properties);
            };

            /**
             * Encodes the specified MessageConstraints message. Does not implicitly {@link buf.validate.MessageConstraints.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.MessageConstraints
             * @static
             * @param {buf.validate.IMessageConstraints} message MessageConstraints message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageConstraints.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.disabled != null && Object.hasOwnProperty.call(message, "disabled"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.disabled);
                if (message.cel != null && message.cel.length)
                    for (let i = 0; i < message.cel.length; ++i)
                        $root.buf.validate.Constraint.encode(message.cel[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MessageConstraints message, length delimited. Does not implicitly {@link buf.validate.MessageConstraints.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.MessageConstraints
             * @static
             * @param {buf.validate.IMessageConstraints} message MessageConstraints message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageConstraints.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MessageConstraints message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.MessageConstraints
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.MessageConstraints} MessageConstraints
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageConstraints.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.MessageConstraints();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.disabled = reader.bool();
                            break;
                        }
                    case 3: {
                            if (!(message.cel && message.cel.length))
                                message.cel = [];
                            message.cel.push($root.buf.validate.Constraint.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MessageConstraints message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.MessageConstraints
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.MessageConstraints} MessageConstraints
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageConstraints.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MessageConstraints message.
             * @function verify
             * @memberof buf.validate.MessageConstraints
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageConstraints.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.disabled != null && message.hasOwnProperty("disabled")) {
                    properties._disabled = 1;
                    if (typeof message.disabled !== "boolean")
                        return "disabled: boolean expected";
                }
                if (message.cel != null && message.hasOwnProperty("cel")) {
                    if (!Array.isArray(message.cel))
                        return "cel: array expected";
                    for (let i = 0; i < message.cel.length; ++i) {
                        let error = $root.buf.validate.Constraint.verify(message.cel[i]);
                        if (error)
                            return "cel." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a MessageConstraints message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.MessageConstraints
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.MessageConstraints} MessageConstraints
             */
            MessageConstraints.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.MessageConstraints)
                    return object;
                let message = new $root.buf.validate.MessageConstraints();
                if (object.disabled != null)
                    message.disabled = Boolean(object.disabled);
                if (object.cel) {
                    if (!Array.isArray(object.cel))
                        throw TypeError(".buf.validate.MessageConstraints.cel: array expected");
                    message.cel = [];
                    for (let i = 0; i < object.cel.length; ++i) {
                        if (typeof object.cel[i] !== "object")
                            throw TypeError(".buf.validate.MessageConstraints.cel: object expected");
                        message.cel[i] = $root.buf.validate.Constraint.fromObject(object.cel[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a MessageConstraints message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.MessageConstraints
             * @static
             * @param {buf.validate.MessageConstraints} message MessageConstraints
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageConstraints.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.cel = [];
                if (message.disabled != null && message.hasOwnProperty("disabled")) {
                    object.disabled = message.disabled;
                    if (options.oneofs)
                        object._disabled = "disabled";
                }
                if (message.cel && message.cel.length) {
                    object.cel = [];
                    for (let j = 0; j < message.cel.length; ++j)
                        object.cel[j] = $root.buf.validate.Constraint.toObject(message.cel[j], options);
                }
                return object;
            };

            /**
             * Converts this MessageConstraints to JSON.
             * @function toJSON
             * @memberof buf.validate.MessageConstraints
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageConstraints.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for MessageConstraints
             * @function getTypeUrl
             * @memberof buf.validate.MessageConstraints
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            MessageConstraints.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.MessageConstraints";
            };

            return MessageConstraints;
        })();

        validate.OneofConstraints = (function() {

            /**
             * Properties of an OneofConstraints.
             * @memberof buf.validate
             * @interface IOneofConstraints
             * @property {boolean|null} [required] OneofConstraints required
             */

            /**
             * Constructs a new OneofConstraints.
             * @memberof buf.validate
             * @classdesc Represents an OneofConstraints.
             * @implements IOneofConstraints
             * @constructor
             * @param {buf.validate.IOneofConstraints=} [properties] Properties to set
             */
            function OneofConstraints(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofConstraints required.
             * @member {boolean|null|undefined} required
             * @memberof buf.validate.OneofConstraints
             * @instance
             */
            OneofConstraints.prototype.required = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * OneofConstraints _required.
             * @member {"required"|undefined} _required
             * @memberof buf.validate.OneofConstraints
             * @instance
             */
            Object.defineProperty(OneofConstraints.prototype, "_required", {
                get: $util.oneOfGetter($oneOfFields = ["required"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new OneofConstraints instance using the specified properties.
             * @function create
             * @memberof buf.validate.OneofConstraints
             * @static
             * @param {buf.validate.IOneofConstraints=} [properties] Properties to set
             * @returns {buf.validate.OneofConstraints} OneofConstraints instance
             */
            OneofConstraints.create = function create(properties) {
                return new OneofConstraints(properties);
            };

            /**
             * Encodes the specified OneofConstraints message. Does not implicitly {@link buf.validate.OneofConstraints.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.OneofConstraints
             * @static
             * @param {buf.validate.IOneofConstraints} message OneofConstraints message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofConstraints.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.required != null && Object.hasOwnProperty.call(message, "required"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.required);
                return writer;
            };

            /**
             * Encodes the specified OneofConstraints message, length delimited. Does not implicitly {@link buf.validate.OneofConstraints.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.OneofConstraints
             * @static
             * @param {buf.validate.IOneofConstraints} message OneofConstraints message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofConstraints.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofConstraints message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.OneofConstraints
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.OneofConstraints} OneofConstraints
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofConstraints.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.OneofConstraints();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.required = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofConstraints message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.OneofConstraints
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.OneofConstraints} OneofConstraints
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofConstraints.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofConstraints message.
             * @function verify
             * @memberof buf.validate.OneofConstraints
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofConstraints.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.required != null && message.hasOwnProperty("required")) {
                    properties._required = 1;
                    if (typeof message.required !== "boolean")
                        return "required: boolean expected";
                }
                return null;
            };

            /**
             * Creates an OneofConstraints message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.OneofConstraints
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.OneofConstraints} OneofConstraints
             */
            OneofConstraints.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.OneofConstraints)
                    return object;
                let message = new $root.buf.validate.OneofConstraints();
                if (object.required != null)
                    message.required = Boolean(object.required);
                return message;
            };

            /**
             * Creates a plain object from an OneofConstraints message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.OneofConstraints
             * @static
             * @param {buf.validate.OneofConstraints} message OneofConstraints
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofConstraints.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.required != null && message.hasOwnProperty("required")) {
                    object.required = message.required;
                    if (options.oneofs)
                        object._required = "required";
                }
                return object;
            };

            /**
             * Converts this OneofConstraints to JSON.
             * @function toJSON
             * @memberof buf.validate.OneofConstraints
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofConstraints.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for OneofConstraints
             * @function getTypeUrl
             * @memberof buf.validate.OneofConstraints
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            OneofConstraints.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.OneofConstraints";
            };

            return OneofConstraints;
        })();

        validate.FieldConstraints = (function() {

            /**
             * Properties of a FieldConstraints.
             * @memberof buf.validate
             * @interface IFieldConstraints
             * @property {Array.<buf.validate.IConstraint>|null} [cel] FieldConstraints cel
             * @property {boolean|null} [required] FieldConstraints required
             * @property {buf.validate.Ignore|null} [ignore] FieldConstraints ignore
             * @property {buf.validate.IFloatRules|null} [float] FieldConstraints float
             * @property {buf.validate.IDoubleRules|null} [double] FieldConstraints double
             * @property {buf.validate.IInt32Rules|null} [int32] FieldConstraints int32
             * @property {buf.validate.IInt64Rules|null} [int64] FieldConstraints int64
             * @property {buf.validate.IUInt32Rules|null} [uint32] FieldConstraints uint32
             * @property {buf.validate.IUInt64Rules|null} [uint64] FieldConstraints uint64
             * @property {buf.validate.ISInt32Rules|null} [sint32] FieldConstraints sint32
             * @property {buf.validate.ISInt64Rules|null} [sint64] FieldConstraints sint64
             * @property {buf.validate.IFixed32Rules|null} [fixed32] FieldConstraints fixed32
             * @property {buf.validate.IFixed64Rules|null} [fixed64] FieldConstraints fixed64
             * @property {buf.validate.ISFixed32Rules|null} [sfixed32] FieldConstraints sfixed32
             * @property {buf.validate.ISFixed64Rules|null} [sfixed64] FieldConstraints sfixed64
             * @property {buf.validate.IBoolRules|null} [bool] FieldConstraints bool
             * @property {buf.validate.IStringRules|null} [string] FieldConstraints string
             * @property {buf.validate.IBytesRules|null} [bytes] FieldConstraints bytes
             * @property {buf.validate.IEnumRules|null} ["enum"] FieldConstraints enum
             * @property {buf.validate.IRepeatedRules|null} [repeated] FieldConstraints repeated
             * @property {buf.validate.IMapRules|null} [map] FieldConstraints map
             * @property {buf.validate.IAnyRules|null} [any] FieldConstraints any
             * @property {buf.validate.IDurationRules|null} [duration] FieldConstraints duration
             * @property {buf.validate.ITimestampRules|null} [timestamp] FieldConstraints timestamp
             * @property {boolean|null} [skipped] FieldConstraints skipped
             * @property {boolean|null} [ignoreEmpty] FieldConstraints ignoreEmpty
             */

            /**
             * Constructs a new FieldConstraints.
             * @memberof buf.validate
             * @classdesc Represents a FieldConstraints.
             * @implements IFieldConstraints
             * @constructor
             * @param {buf.validate.IFieldConstraints=} [properties] Properties to set
             */
            function FieldConstraints(properties) {
                this.cel = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldConstraints cel.
             * @member {Array.<buf.validate.IConstraint>} cel
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.cel = $util.emptyArray;

            /**
             * FieldConstraints required.
             * @member {boolean} required
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.required = false;

            /**
             * FieldConstraints ignore.
             * @member {buf.validate.Ignore} ignore
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.ignore = 0;

            /**
             * FieldConstraints float.
             * @member {buf.validate.IFloatRules|null|undefined} float
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.float = null;

            /**
             * FieldConstraints double.
             * @member {buf.validate.IDoubleRules|null|undefined} double
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.double = null;

            /**
             * FieldConstraints int32.
             * @member {buf.validate.IInt32Rules|null|undefined} int32
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.int32 = null;

            /**
             * FieldConstraints int64.
             * @member {buf.validate.IInt64Rules|null|undefined} int64
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.int64 = null;

            /**
             * FieldConstraints uint32.
             * @member {buf.validate.IUInt32Rules|null|undefined} uint32
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.uint32 = null;

            /**
             * FieldConstraints uint64.
             * @member {buf.validate.IUInt64Rules|null|undefined} uint64
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.uint64 = null;

            /**
             * FieldConstraints sint32.
             * @member {buf.validate.ISInt32Rules|null|undefined} sint32
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.sint32 = null;

            /**
             * FieldConstraints sint64.
             * @member {buf.validate.ISInt64Rules|null|undefined} sint64
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.sint64 = null;

            /**
             * FieldConstraints fixed32.
             * @member {buf.validate.IFixed32Rules|null|undefined} fixed32
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.fixed32 = null;

            /**
             * FieldConstraints fixed64.
             * @member {buf.validate.IFixed64Rules|null|undefined} fixed64
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.fixed64 = null;

            /**
             * FieldConstraints sfixed32.
             * @member {buf.validate.ISFixed32Rules|null|undefined} sfixed32
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.sfixed32 = null;

            /**
             * FieldConstraints sfixed64.
             * @member {buf.validate.ISFixed64Rules|null|undefined} sfixed64
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.sfixed64 = null;

            /**
             * FieldConstraints bool.
             * @member {buf.validate.IBoolRules|null|undefined} bool
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.bool = null;

            /**
             * FieldConstraints string.
             * @member {buf.validate.IStringRules|null|undefined} string
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.string = null;

            /**
             * FieldConstraints bytes.
             * @member {buf.validate.IBytesRules|null|undefined} bytes
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.bytes = null;

            /**
             * FieldConstraints enum.
             * @member {buf.validate.IEnumRules|null|undefined} enum
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype["enum"] = null;

            /**
             * FieldConstraints repeated.
             * @member {buf.validate.IRepeatedRules|null|undefined} repeated
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.repeated = null;

            /**
             * FieldConstraints map.
             * @member {buf.validate.IMapRules|null|undefined} map
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.map = null;

            /**
             * FieldConstraints any.
             * @member {buf.validate.IAnyRules|null|undefined} any
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.any = null;

            /**
             * FieldConstraints duration.
             * @member {buf.validate.IDurationRules|null|undefined} duration
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.duration = null;

            /**
             * FieldConstraints timestamp.
             * @member {buf.validate.ITimestampRules|null|undefined} timestamp
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.timestamp = null;

            /**
             * FieldConstraints skipped.
             * @member {boolean} skipped
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.skipped = false;

            /**
             * FieldConstraints ignoreEmpty.
             * @member {boolean} ignoreEmpty
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            FieldConstraints.prototype.ignoreEmpty = false;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * FieldConstraints type.
             * @member {"float"|"double"|"int32"|"int64"|"uint32"|"uint64"|"sint32"|"sint64"|"fixed32"|"fixed64"|"sfixed32"|"sfixed64"|"bool"|"string"|"bytes"|"enum"|"repeated"|"map"|"any"|"duration"|"timestamp"|undefined} type
             * @memberof buf.validate.FieldConstraints
             * @instance
             */
            Object.defineProperty(FieldConstraints.prototype, "type", {
                get: $util.oneOfGetter($oneOfFields = ["float", "double", "int32", "int64", "uint32", "uint64", "sint32", "sint64", "fixed32", "fixed64", "sfixed32", "sfixed64", "bool", "string", "bytes", "enum", "repeated", "map", "any", "duration", "timestamp"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new FieldConstraints instance using the specified properties.
             * @function create
             * @memberof buf.validate.FieldConstraints
             * @static
             * @param {buf.validate.IFieldConstraints=} [properties] Properties to set
             * @returns {buf.validate.FieldConstraints} FieldConstraints instance
             */
            FieldConstraints.create = function create(properties) {
                return new FieldConstraints(properties);
            };

            /**
             * Encodes the specified FieldConstraints message. Does not implicitly {@link buf.validate.FieldConstraints.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.FieldConstraints
             * @static
             * @param {buf.validate.IFieldConstraints} message FieldConstraints message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldConstraints.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.float != null && Object.hasOwnProperty.call(message, "float"))
                    $root.buf.validate.FloatRules.encode(message.float, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.double != null && Object.hasOwnProperty.call(message, "double"))
                    $root.buf.validate.DoubleRules.encode(message.double, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.int32 != null && Object.hasOwnProperty.call(message, "int32"))
                    $root.buf.validate.Int32Rules.encode(message.int32, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.int64 != null && Object.hasOwnProperty.call(message, "int64"))
                    $root.buf.validate.Int64Rules.encode(message.int64, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.uint32 != null && Object.hasOwnProperty.call(message, "uint32"))
                    $root.buf.validate.UInt32Rules.encode(message.uint32, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.uint64 != null && Object.hasOwnProperty.call(message, "uint64"))
                    $root.buf.validate.UInt64Rules.encode(message.uint64, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.sint32 != null && Object.hasOwnProperty.call(message, "sint32"))
                    $root.buf.validate.SInt32Rules.encode(message.sint32, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.sint64 != null && Object.hasOwnProperty.call(message, "sint64"))
                    $root.buf.validate.SInt64Rules.encode(message.sint64, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.fixed32 != null && Object.hasOwnProperty.call(message, "fixed32"))
                    $root.buf.validate.Fixed32Rules.encode(message.fixed32, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.fixed64 != null && Object.hasOwnProperty.call(message, "fixed64"))
                    $root.buf.validate.Fixed64Rules.encode(message.fixed64, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                if (message.sfixed32 != null && Object.hasOwnProperty.call(message, "sfixed32"))
                    $root.buf.validate.SFixed32Rules.encode(message.sfixed32, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.sfixed64 != null && Object.hasOwnProperty.call(message, "sfixed64"))
                    $root.buf.validate.SFixed64Rules.encode(message.sfixed64, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                if (message.bool != null && Object.hasOwnProperty.call(message, "bool"))
                    $root.buf.validate.BoolRules.encode(message.bool, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                if (message.string != null && Object.hasOwnProperty.call(message, "string"))
                    $root.buf.validate.StringRules.encode(message.string, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                if (message.bytes != null && Object.hasOwnProperty.call(message, "bytes"))
                    $root.buf.validate.BytesRules.encode(message.bytes, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                if (message["enum"] != null && Object.hasOwnProperty.call(message, "enum"))
                    $root.buf.validate.EnumRules.encode(message["enum"], writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                if (message.repeated != null && Object.hasOwnProperty.call(message, "repeated"))
                    $root.buf.validate.RepeatedRules.encode(message.repeated, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();
                if (message.map != null && Object.hasOwnProperty.call(message, "map"))
                    $root.buf.validate.MapRules.encode(message.map, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();
                if (message.any != null && Object.hasOwnProperty.call(message, "any"))
                    $root.buf.validate.AnyRules.encode(message.any, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
                if (message.duration != null && Object.hasOwnProperty.call(message, "duration"))
                    $root.buf.validate.DurationRules.encode(message.duration, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();
                if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                    $root.buf.validate.TimestampRules.encode(message.timestamp, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
                if (message.cel != null && message.cel.length)
                    for (let i = 0; i < message.cel.length; ++i)
                        $root.buf.validate.Constraint.encode(message.cel[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();
                if (message.skipped != null && Object.hasOwnProperty.call(message, "skipped"))
                    writer.uint32(/* id 24, wireType 0 =*/192).bool(message.skipped);
                if (message.required != null && Object.hasOwnProperty.call(message, "required"))
                    writer.uint32(/* id 25, wireType 0 =*/200).bool(message.required);
                if (message.ignoreEmpty != null && Object.hasOwnProperty.call(message, "ignoreEmpty"))
                    writer.uint32(/* id 26, wireType 0 =*/208).bool(message.ignoreEmpty);
                if (message.ignore != null && Object.hasOwnProperty.call(message, "ignore"))
                    writer.uint32(/* id 27, wireType 0 =*/216).int32(message.ignore);
                return writer;
            };

            /**
             * Encodes the specified FieldConstraints message, length delimited. Does not implicitly {@link buf.validate.FieldConstraints.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.FieldConstraints
             * @static
             * @param {buf.validate.IFieldConstraints} message FieldConstraints message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldConstraints.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldConstraints message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.FieldConstraints
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.FieldConstraints} FieldConstraints
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldConstraints.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.FieldConstraints();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 23: {
                            if (!(message.cel && message.cel.length))
                                message.cel = [];
                            message.cel.push($root.buf.validate.Constraint.decode(reader, reader.uint32()));
                            break;
                        }
                    case 25: {
                            message.required = reader.bool();
                            break;
                        }
                    case 27: {
                            message.ignore = reader.int32();
                            break;
                        }
                    case 1: {
                            message.float = $root.buf.validate.FloatRules.decode(reader, reader.uint32());
                            break;
                        }
                    case 2: {
                            message.double = $root.buf.validate.DoubleRules.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.int32 = $root.buf.validate.Int32Rules.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.int64 = $root.buf.validate.Int64Rules.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.uint32 = $root.buf.validate.UInt32Rules.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.uint64 = $root.buf.validate.UInt64Rules.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            message.sint32 = $root.buf.validate.SInt32Rules.decode(reader, reader.uint32());
                            break;
                        }
                    case 8: {
                            message.sint64 = $root.buf.validate.SInt64Rules.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.fixed32 = $root.buf.validate.Fixed32Rules.decode(reader, reader.uint32());
                            break;
                        }
                    case 10: {
                            message.fixed64 = $root.buf.validate.Fixed64Rules.decode(reader, reader.uint32());
                            break;
                        }
                    case 11: {
                            message.sfixed32 = $root.buf.validate.SFixed32Rules.decode(reader, reader.uint32());
                            break;
                        }
                    case 12: {
                            message.sfixed64 = $root.buf.validate.SFixed64Rules.decode(reader, reader.uint32());
                            break;
                        }
                    case 13: {
                            message.bool = $root.buf.validate.BoolRules.decode(reader, reader.uint32());
                            break;
                        }
                    case 14: {
                            message.string = $root.buf.validate.StringRules.decode(reader, reader.uint32());
                            break;
                        }
                    case 15: {
                            message.bytes = $root.buf.validate.BytesRules.decode(reader, reader.uint32());
                            break;
                        }
                    case 16: {
                            message["enum"] = $root.buf.validate.EnumRules.decode(reader, reader.uint32());
                            break;
                        }
                    case 18: {
                            message.repeated = $root.buf.validate.RepeatedRules.decode(reader, reader.uint32());
                            break;
                        }
                    case 19: {
                            message.map = $root.buf.validate.MapRules.decode(reader, reader.uint32());
                            break;
                        }
                    case 20: {
                            message.any = $root.buf.validate.AnyRules.decode(reader, reader.uint32());
                            break;
                        }
                    case 21: {
                            message.duration = $root.buf.validate.DurationRules.decode(reader, reader.uint32());
                            break;
                        }
                    case 22: {
                            message.timestamp = $root.buf.validate.TimestampRules.decode(reader, reader.uint32());
                            break;
                        }
                    case 24: {
                            message.skipped = reader.bool();
                            break;
                        }
                    case 26: {
                            message.ignoreEmpty = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldConstraints message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.FieldConstraints
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.FieldConstraints} FieldConstraints
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldConstraints.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldConstraints message.
             * @function verify
             * @memberof buf.validate.FieldConstraints
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldConstraints.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.cel != null && message.hasOwnProperty("cel")) {
                    if (!Array.isArray(message.cel))
                        return "cel: array expected";
                    for (let i = 0; i < message.cel.length; ++i) {
                        let error = $root.buf.validate.Constraint.verify(message.cel[i]);
                        if (error)
                            return "cel." + error;
                    }
                }
                if (message.required != null && message.hasOwnProperty("required"))
                    if (typeof message.required !== "boolean")
                        return "required: boolean expected";
                if (message.ignore != null && message.hasOwnProperty("ignore"))
                    switch (message.ignore) {
                    default:
                        return "ignore: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.float != null && message.hasOwnProperty("float")) {
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.FloatRules.verify(message.float);
                        if (error)
                            return "float." + error;
                    }
                }
                if (message.double != null && message.hasOwnProperty("double")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.DoubleRules.verify(message.double);
                        if (error)
                            return "double." + error;
                    }
                }
                if (message.int32 != null && message.hasOwnProperty("int32")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.Int32Rules.verify(message.int32);
                        if (error)
                            return "int32." + error;
                    }
                }
                if (message.int64 != null && message.hasOwnProperty("int64")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.Int64Rules.verify(message.int64);
                        if (error)
                            return "int64." + error;
                    }
                }
                if (message.uint32 != null && message.hasOwnProperty("uint32")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.UInt32Rules.verify(message.uint32);
                        if (error)
                            return "uint32." + error;
                    }
                }
                if (message.uint64 != null && message.hasOwnProperty("uint64")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.UInt64Rules.verify(message.uint64);
                        if (error)
                            return "uint64." + error;
                    }
                }
                if (message.sint32 != null && message.hasOwnProperty("sint32")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.SInt32Rules.verify(message.sint32);
                        if (error)
                            return "sint32." + error;
                    }
                }
                if (message.sint64 != null && message.hasOwnProperty("sint64")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.SInt64Rules.verify(message.sint64);
                        if (error)
                            return "sint64." + error;
                    }
                }
                if (message.fixed32 != null && message.hasOwnProperty("fixed32")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.Fixed32Rules.verify(message.fixed32);
                        if (error)
                            return "fixed32." + error;
                    }
                }
                if (message.fixed64 != null && message.hasOwnProperty("fixed64")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.Fixed64Rules.verify(message.fixed64);
                        if (error)
                            return "fixed64." + error;
                    }
                }
                if (message.sfixed32 != null && message.hasOwnProperty("sfixed32")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.SFixed32Rules.verify(message.sfixed32);
                        if (error)
                            return "sfixed32." + error;
                    }
                }
                if (message.sfixed64 != null && message.hasOwnProperty("sfixed64")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.SFixed64Rules.verify(message.sfixed64);
                        if (error)
                            return "sfixed64." + error;
                    }
                }
                if (message.bool != null && message.hasOwnProperty("bool")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.BoolRules.verify(message.bool);
                        if (error)
                            return "bool." + error;
                    }
                }
                if (message.string != null && message.hasOwnProperty("string")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.StringRules.verify(message.string);
                        if (error)
                            return "string." + error;
                    }
                }
                if (message.bytes != null && message.hasOwnProperty("bytes")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.BytesRules.verify(message.bytes);
                        if (error)
                            return "bytes." + error;
                    }
                }
                if (message["enum"] != null && message.hasOwnProperty("enum")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.EnumRules.verify(message["enum"]);
                        if (error)
                            return "enum." + error;
                    }
                }
                if (message.repeated != null && message.hasOwnProperty("repeated")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.RepeatedRules.verify(message.repeated);
                        if (error)
                            return "repeated." + error;
                    }
                }
                if (message.map != null && message.hasOwnProperty("map")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.MapRules.verify(message.map);
                        if (error)
                            return "map." + error;
                    }
                }
                if (message.any != null && message.hasOwnProperty("any")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.AnyRules.verify(message.any);
                        if (error)
                            return "any." + error;
                    }
                }
                if (message.duration != null && message.hasOwnProperty("duration")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.DurationRules.verify(message.duration);
                        if (error)
                            return "duration." + error;
                    }
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    if (properties.type === 1)
                        return "type: multiple values";
                    properties.type = 1;
                    {
                        let error = $root.buf.validate.TimestampRules.verify(message.timestamp);
                        if (error)
                            return "timestamp." + error;
                    }
                }
                if (message.skipped != null && message.hasOwnProperty("skipped"))
                    if (typeof message.skipped !== "boolean")
                        return "skipped: boolean expected";
                if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                    if (typeof message.ignoreEmpty !== "boolean")
                        return "ignoreEmpty: boolean expected";
                return null;
            };

            /**
             * Creates a FieldConstraints message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.FieldConstraints
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.FieldConstraints} FieldConstraints
             */
            FieldConstraints.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.FieldConstraints)
                    return object;
                let message = new $root.buf.validate.FieldConstraints();
                if (object.cel) {
                    if (!Array.isArray(object.cel))
                        throw TypeError(".buf.validate.FieldConstraints.cel: array expected");
                    message.cel = [];
                    for (let i = 0; i < object.cel.length; ++i) {
                        if (typeof object.cel[i] !== "object")
                            throw TypeError(".buf.validate.FieldConstraints.cel: object expected");
                        message.cel[i] = $root.buf.validate.Constraint.fromObject(object.cel[i]);
                    }
                }
                if (object.required != null)
                    message.required = Boolean(object.required);
                switch (object.ignore) {
                default:
                    if (typeof object.ignore === "number") {
                        message.ignore = object.ignore;
                        break;
                    }
                    break;
                case "IGNORE_UNSPECIFIED":
                case 0:
                    message.ignore = 0;
                    break;
                case "IGNORE_IF_UNPOPULATED":
                case 1:
                    message.ignore = 1;
                    break;
                case "IGNORE_IF_DEFAULT_VALUE":
                case 2:
                    message.ignore = 2;
                    break;
                case "IGNORE_ALWAYS":
                case 3:
                    message.ignore = 3;
                    break;
                case "IGNORE_EMPTY":
                case 1:
                    message.ignore = 1;
                    break;
                case "IGNORE_DEFAULT":
                case 2:
                    message.ignore = 2;
                    break;
                }
                if (object.float != null) {
                    if (typeof object.float !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.float: object expected");
                    message.float = $root.buf.validate.FloatRules.fromObject(object.float);
                }
                if (object.double != null) {
                    if (typeof object.double !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.double: object expected");
                    message.double = $root.buf.validate.DoubleRules.fromObject(object.double);
                }
                if (object.int32 != null) {
                    if (typeof object.int32 !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.int32: object expected");
                    message.int32 = $root.buf.validate.Int32Rules.fromObject(object.int32);
                }
                if (object.int64 != null) {
                    if (typeof object.int64 !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.int64: object expected");
                    message.int64 = $root.buf.validate.Int64Rules.fromObject(object.int64);
                }
                if (object.uint32 != null) {
                    if (typeof object.uint32 !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.uint32: object expected");
                    message.uint32 = $root.buf.validate.UInt32Rules.fromObject(object.uint32);
                }
                if (object.uint64 != null) {
                    if (typeof object.uint64 !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.uint64: object expected");
                    message.uint64 = $root.buf.validate.UInt64Rules.fromObject(object.uint64);
                }
                if (object.sint32 != null) {
                    if (typeof object.sint32 !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.sint32: object expected");
                    message.sint32 = $root.buf.validate.SInt32Rules.fromObject(object.sint32);
                }
                if (object.sint64 != null) {
                    if (typeof object.sint64 !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.sint64: object expected");
                    message.sint64 = $root.buf.validate.SInt64Rules.fromObject(object.sint64);
                }
                if (object.fixed32 != null) {
                    if (typeof object.fixed32 !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.fixed32: object expected");
                    message.fixed32 = $root.buf.validate.Fixed32Rules.fromObject(object.fixed32);
                }
                if (object.fixed64 != null) {
                    if (typeof object.fixed64 !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.fixed64: object expected");
                    message.fixed64 = $root.buf.validate.Fixed64Rules.fromObject(object.fixed64);
                }
                if (object.sfixed32 != null) {
                    if (typeof object.sfixed32 !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.sfixed32: object expected");
                    message.sfixed32 = $root.buf.validate.SFixed32Rules.fromObject(object.sfixed32);
                }
                if (object.sfixed64 != null) {
                    if (typeof object.sfixed64 !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.sfixed64: object expected");
                    message.sfixed64 = $root.buf.validate.SFixed64Rules.fromObject(object.sfixed64);
                }
                if (object.bool != null) {
                    if (typeof object.bool !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.bool: object expected");
                    message.bool = $root.buf.validate.BoolRules.fromObject(object.bool);
                }
                if (object.string != null) {
                    if (typeof object.string !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.string: object expected");
                    message.string = $root.buf.validate.StringRules.fromObject(object.string);
                }
                if (object.bytes != null) {
                    if (typeof object.bytes !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.bytes: object expected");
                    message.bytes = $root.buf.validate.BytesRules.fromObject(object.bytes);
                }
                if (object["enum"] != null) {
                    if (typeof object["enum"] !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.enum: object expected");
                    message["enum"] = $root.buf.validate.EnumRules.fromObject(object["enum"]);
                }
                if (object.repeated != null) {
                    if (typeof object.repeated !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.repeated: object expected");
                    message.repeated = $root.buf.validate.RepeatedRules.fromObject(object.repeated);
                }
                if (object.map != null) {
                    if (typeof object.map !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.map: object expected");
                    message.map = $root.buf.validate.MapRules.fromObject(object.map);
                }
                if (object.any != null) {
                    if (typeof object.any !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.any: object expected");
                    message.any = $root.buf.validate.AnyRules.fromObject(object.any);
                }
                if (object.duration != null) {
                    if (typeof object.duration !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.duration: object expected");
                    message.duration = $root.buf.validate.DurationRules.fromObject(object.duration);
                }
                if (object.timestamp != null) {
                    if (typeof object.timestamp !== "object")
                        throw TypeError(".buf.validate.FieldConstraints.timestamp: object expected");
                    message.timestamp = $root.buf.validate.TimestampRules.fromObject(object.timestamp);
                }
                if (object.skipped != null)
                    message.skipped = Boolean(object.skipped);
                if (object.ignoreEmpty != null)
                    message.ignoreEmpty = Boolean(object.ignoreEmpty);
                return message;
            };

            /**
             * Creates a plain object from a FieldConstraints message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.FieldConstraints
             * @static
             * @param {buf.validate.FieldConstraints} message FieldConstraints
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldConstraints.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.cel = [];
                if (options.defaults) {
                    object.skipped = false;
                    object.required = false;
                    object.ignoreEmpty = false;
                    object.ignore = options.enums === String ? "IGNORE_UNSPECIFIED" : 0;
                }
                if (message.float != null && message.hasOwnProperty("float")) {
                    object.float = $root.buf.validate.FloatRules.toObject(message.float, options);
                    if (options.oneofs)
                        object.type = "float";
                }
                if (message.double != null && message.hasOwnProperty("double")) {
                    object.double = $root.buf.validate.DoubleRules.toObject(message.double, options);
                    if (options.oneofs)
                        object.type = "double";
                }
                if (message.int32 != null && message.hasOwnProperty("int32")) {
                    object.int32 = $root.buf.validate.Int32Rules.toObject(message.int32, options);
                    if (options.oneofs)
                        object.type = "int32";
                }
                if (message.int64 != null && message.hasOwnProperty("int64")) {
                    object.int64 = $root.buf.validate.Int64Rules.toObject(message.int64, options);
                    if (options.oneofs)
                        object.type = "int64";
                }
                if (message.uint32 != null && message.hasOwnProperty("uint32")) {
                    object.uint32 = $root.buf.validate.UInt32Rules.toObject(message.uint32, options);
                    if (options.oneofs)
                        object.type = "uint32";
                }
                if (message.uint64 != null && message.hasOwnProperty("uint64")) {
                    object.uint64 = $root.buf.validate.UInt64Rules.toObject(message.uint64, options);
                    if (options.oneofs)
                        object.type = "uint64";
                }
                if (message.sint32 != null && message.hasOwnProperty("sint32")) {
                    object.sint32 = $root.buf.validate.SInt32Rules.toObject(message.sint32, options);
                    if (options.oneofs)
                        object.type = "sint32";
                }
                if (message.sint64 != null && message.hasOwnProperty("sint64")) {
                    object.sint64 = $root.buf.validate.SInt64Rules.toObject(message.sint64, options);
                    if (options.oneofs)
                        object.type = "sint64";
                }
                if (message.fixed32 != null && message.hasOwnProperty("fixed32")) {
                    object.fixed32 = $root.buf.validate.Fixed32Rules.toObject(message.fixed32, options);
                    if (options.oneofs)
                        object.type = "fixed32";
                }
                if (message.fixed64 != null && message.hasOwnProperty("fixed64")) {
                    object.fixed64 = $root.buf.validate.Fixed64Rules.toObject(message.fixed64, options);
                    if (options.oneofs)
                        object.type = "fixed64";
                }
                if (message.sfixed32 != null && message.hasOwnProperty("sfixed32")) {
                    object.sfixed32 = $root.buf.validate.SFixed32Rules.toObject(message.sfixed32, options);
                    if (options.oneofs)
                        object.type = "sfixed32";
                }
                if (message.sfixed64 != null && message.hasOwnProperty("sfixed64")) {
                    object.sfixed64 = $root.buf.validate.SFixed64Rules.toObject(message.sfixed64, options);
                    if (options.oneofs)
                        object.type = "sfixed64";
                }
                if (message.bool != null && message.hasOwnProperty("bool")) {
                    object.bool = $root.buf.validate.BoolRules.toObject(message.bool, options);
                    if (options.oneofs)
                        object.type = "bool";
                }
                if (message.string != null && message.hasOwnProperty("string")) {
                    object.string = $root.buf.validate.StringRules.toObject(message.string, options);
                    if (options.oneofs)
                        object.type = "string";
                }
                if (message.bytes != null && message.hasOwnProperty("bytes")) {
                    object.bytes = $root.buf.validate.BytesRules.toObject(message.bytes, options);
                    if (options.oneofs)
                        object.type = "bytes";
                }
                if (message["enum"] != null && message.hasOwnProperty("enum")) {
                    object["enum"] = $root.buf.validate.EnumRules.toObject(message["enum"], options);
                    if (options.oneofs)
                        object.type = "enum";
                }
                if (message.repeated != null && message.hasOwnProperty("repeated")) {
                    object.repeated = $root.buf.validate.RepeatedRules.toObject(message.repeated, options);
                    if (options.oneofs)
                        object.type = "repeated";
                }
                if (message.map != null && message.hasOwnProperty("map")) {
                    object.map = $root.buf.validate.MapRules.toObject(message.map, options);
                    if (options.oneofs)
                        object.type = "map";
                }
                if (message.any != null && message.hasOwnProperty("any")) {
                    object.any = $root.buf.validate.AnyRules.toObject(message.any, options);
                    if (options.oneofs)
                        object.type = "any";
                }
                if (message.duration != null && message.hasOwnProperty("duration")) {
                    object.duration = $root.buf.validate.DurationRules.toObject(message.duration, options);
                    if (options.oneofs)
                        object.type = "duration";
                }
                if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                    object.timestamp = $root.buf.validate.TimestampRules.toObject(message.timestamp, options);
                    if (options.oneofs)
                        object.type = "timestamp";
                }
                if (message.cel && message.cel.length) {
                    object.cel = [];
                    for (let j = 0; j < message.cel.length; ++j)
                        object.cel[j] = $root.buf.validate.Constraint.toObject(message.cel[j], options);
                }
                if (message.skipped != null && message.hasOwnProperty("skipped"))
                    object.skipped = message.skipped;
                if (message.required != null && message.hasOwnProperty("required"))
                    object.required = message.required;
                if (message.ignoreEmpty != null && message.hasOwnProperty("ignoreEmpty"))
                    object.ignoreEmpty = message.ignoreEmpty;
                if (message.ignore != null && message.hasOwnProperty("ignore"))
                    object.ignore = options.enums === String ? $root.buf.validate.Ignore[message.ignore] === undefined ? message.ignore : $root.buf.validate.Ignore[message.ignore] : message.ignore;
                return object;
            };

            /**
             * Converts this FieldConstraints to JSON.
             * @function toJSON
             * @memberof buf.validate.FieldConstraints
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldConstraints.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FieldConstraints
             * @function getTypeUrl
             * @memberof buf.validate.FieldConstraints
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FieldConstraints.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.FieldConstraints";
            };

            return FieldConstraints;
        })();

        /**
         * Ignore enum.
         * @name buf.validate.Ignore
         * @enum {number}
         * @property {number} IGNORE_UNSPECIFIED=0 IGNORE_UNSPECIFIED value
         * @property {number} IGNORE_IF_UNPOPULATED=1 IGNORE_IF_UNPOPULATED value
         * @property {number} IGNORE_IF_DEFAULT_VALUE=2 IGNORE_IF_DEFAULT_VALUE value
         * @property {number} IGNORE_ALWAYS=3 IGNORE_ALWAYS value
         * @property {number} IGNORE_EMPTY=1 IGNORE_EMPTY value
         * @property {number} IGNORE_DEFAULT=2 IGNORE_DEFAULT value
         */
        validate.Ignore = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "IGNORE_UNSPECIFIED"] = 0;
            values[valuesById[1] = "IGNORE_IF_UNPOPULATED"] = 1;
            values[valuesById[2] = "IGNORE_IF_DEFAULT_VALUE"] = 2;
            values[valuesById[3] = "IGNORE_ALWAYS"] = 3;
            values["IGNORE_EMPTY"] = 1;
            values["IGNORE_DEFAULT"] = 2;
            return values;
        })();

        validate.FloatRules = (function() {

            /**
             * Properties of a FloatRules.
             * @memberof buf.validate
             * @interface IFloatRules
             * @property {number|null} ["const"] FloatRules const
             * @property {number|null} [lt] FloatRules lt
             * @property {number|null} [lte] FloatRules lte
             * @property {number|null} [gt] FloatRules gt
             * @property {number|null} [gte] FloatRules gte
             * @property {Array.<number>|null} ["in"] FloatRules in
             * @property {Array.<number>|null} [notIn] FloatRules notIn
             * @property {boolean|null} [finite] FloatRules finite
             */

            /**
             * Constructs a new FloatRules.
             * @memberof buf.validate
             * @classdesc Represents a FloatRules.
             * @implements IFloatRules
             * @constructor
             * @param {buf.validate.IFloatRules=} [properties] Properties to set
             */
            function FloatRules(properties) {
                this["in"] = [];
                this.notIn = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FloatRules const.
             * @member {number|null|undefined} const
             * @memberof buf.validate.FloatRules
             * @instance
             */
            FloatRules.prototype["const"] = null;

            /**
             * FloatRules lt.
             * @member {number|null|undefined} lt
             * @memberof buf.validate.FloatRules
             * @instance
             */
            FloatRules.prototype.lt = null;

            /**
             * FloatRules lte.
             * @member {number|null|undefined} lte
             * @memberof buf.validate.FloatRules
             * @instance
             */
            FloatRules.prototype.lte = null;

            /**
             * FloatRules gt.
             * @member {number|null|undefined} gt
             * @memberof buf.validate.FloatRules
             * @instance
             */
            FloatRules.prototype.gt = null;

            /**
             * FloatRules gte.
             * @member {number|null|undefined} gte
             * @memberof buf.validate.FloatRules
             * @instance
             */
            FloatRules.prototype.gte = null;

            /**
             * FloatRules in.
             * @member {Array.<number>} in
             * @memberof buf.validate.FloatRules
             * @instance
             */
            FloatRules.prototype["in"] = $util.emptyArray;

            /**
             * FloatRules notIn.
             * @member {Array.<number>} notIn
             * @memberof buf.validate.FloatRules
             * @instance
             */
            FloatRules.prototype.notIn = $util.emptyArray;

            /**
             * FloatRules finite.
             * @member {boolean} finite
             * @memberof buf.validate.FloatRules
             * @instance
             */
            FloatRules.prototype.finite = false;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * FloatRules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.FloatRules
             * @instance
             */
            Object.defineProperty(FloatRules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * FloatRules lessThan.
             * @member {"lt"|"lte"|undefined} lessThan
             * @memberof buf.validate.FloatRules
             * @instance
             */
            Object.defineProperty(FloatRules.prototype, "lessThan", {
                get: $util.oneOfGetter($oneOfFields = ["lt", "lte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * FloatRules greaterThan.
             * @member {"gt"|"gte"|undefined} greaterThan
             * @memberof buf.validate.FloatRules
             * @instance
             */
            Object.defineProperty(FloatRules.prototype, "greaterThan", {
                get: $util.oneOfGetter($oneOfFields = ["gt", "gte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new FloatRules instance using the specified properties.
             * @function create
             * @memberof buf.validate.FloatRules
             * @static
             * @param {buf.validate.IFloatRules=} [properties] Properties to set
             * @returns {buf.validate.FloatRules} FloatRules instance
             */
            FloatRules.create = function create(properties) {
                return new FloatRules(properties);
            };

            /**
             * Encodes the specified FloatRules message. Does not implicitly {@link buf.validate.FloatRules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.FloatRules
             * @static
             * @param {buf.validate.IFloatRules} message FloatRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FloatRules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    writer.uint32(/* id 1, wireType 5 =*/13).float(message["const"]);
                if (message.lt != null && Object.hasOwnProperty.call(message, "lt"))
                    writer.uint32(/* id 2, wireType 5 =*/21).float(message.lt);
                if (message.lte != null && Object.hasOwnProperty.call(message, "lte"))
                    writer.uint32(/* id 3, wireType 5 =*/29).float(message.lte);
                if (message.gt != null && Object.hasOwnProperty.call(message, "gt"))
                    writer.uint32(/* id 4, wireType 5 =*/37).float(message.gt);
                if (message.gte != null && Object.hasOwnProperty.call(message, "gte"))
                    writer.uint32(/* id 5, wireType 5 =*/45).float(message.gte);
                if (message["in"] != null && message["in"].length) {
                    writer.uint32(/* id 6, wireType 2 =*/50).fork();
                    for (let i = 0; i < message["in"].length; ++i)
                        writer.float(message["in"][i]);
                    writer.ldelim();
                }
                if (message.notIn != null && message.notIn.length) {
                    writer.uint32(/* id 7, wireType 2 =*/58).fork();
                    for (let i = 0; i < message.notIn.length; ++i)
                        writer.float(message.notIn[i]);
                    writer.ldelim();
                }
                if (message.finite != null && Object.hasOwnProperty.call(message, "finite"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.finite);
                return writer;
            };

            /**
             * Encodes the specified FloatRules message, length delimited. Does not implicitly {@link buf.validate.FloatRules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.FloatRules
             * @static
             * @param {buf.validate.IFloatRules} message FloatRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FloatRules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FloatRules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.FloatRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.FloatRules} FloatRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FloatRules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.FloatRules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message["const"] = reader.float();
                            break;
                        }
                    case 2: {
                            message.lt = reader.float();
                            break;
                        }
                    case 3: {
                            message.lte = reader.float();
                            break;
                        }
                    case 4: {
                            message.gt = reader.float();
                            break;
                        }
                    case 5: {
                            message.gte = reader.float();
                            break;
                        }
                    case 6: {
                            if (!(message["in"] && message["in"].length))
                                message["in"] = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message["in"].push(reader.float());
                            } else
                                message["in"].push(reader.float());
                            break;
                        }
                    case 7: {
                            if (!(message.notIn && message.notIn.length))
                                message.notIn = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.notIn.push(reader.float());
                            } else
                                message.notIn.push(reader.float());
                            break;
                        }
                    case 8: {
                            message.finite = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FloatRules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.FloatRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.FloatRules} FloatRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FloatRules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FloatRules message.
             * @function verify
             * @memberof buf.validate.FloatRules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FloatRules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    if (typeof message["const"] !== "number")
                        return "const: number expected";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    properties.lessThan = 1;
                    if (typeof message.lt !== "number")
                        return "lt: number expected";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (properties.lessThan === 1)
                        return "lessThan: multiple values";
                    properties.lessThan = 1;
                    if (typeof message.lte !== "number")
                        return "lte: number expected";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    properties.greaterThan = 1;
                    if (typeof message.gt !== "number")
                        return "gt: number expected";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (properties.greaterThan === 1)
                        return "greaterThan: multiple values";
                    properties.greaterThan = 1;
                    if (typeof message.gte !== "number")
                        return "gte: number expected";
                }
                if (message["in"] != null && message.hasOwnProperty("in")) {
                    if (!Array.isArray(message["in"]))
                        return "in: array expected";
                    for (let i = 0; i < message["in"].length; ++i)
                        if (typeof message["in"][i] !== "number")
                            return "in: number[] expected";
                }
                if (message.notIn != null && message.hasOwnProperty("notIn")) {
                    if (!Array.isArray(message.notIn))
                        return "notIn: array expected";
                    for (let i = 0; i < message.notIn.length; ++i)
                        if (typeof message.notIn[i] !== "number")
                            return "notIn: number[] expected";
                }
                if (message.finite != null && message.hasOwnProperty("finite"))
                    if (typeof message.finite !== "boolean")
                        return "finite: boolean expected";
                return null;
            };

            /**
             * Creates a FloatRules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.FloatRules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.FloatRules} FloatRules
             */
            FloatRules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.FloatRules)
                    return object;
                let message = new $root.buf.validate.FloatRules();
                if (object["const"] != null)
                    message["const"] = Number(object["const"]);
                if (object.lt != null)
                    message.lt = Number(object.lt);
                if (object.lte != null)
                    message.lte = Number(object.lte);
                if (object.gt != null)
                    message.gt = Number(object.gt);
                if (object.gte != null)
                    message.gte = Number(object.gte);
                if (object["in"]) {
                    if (!Array.isArray(object["in"]))
                        throw TypeError(".buf.validate.FloatRules.in: array expected");
                    message["in"] = [];
                    for (let i = 0; i < object["in"].length; ++i)
                        message["in"][i] = Number(object["in"][i]);
                }
                if (object.notIn) {
                    if (!Array.isArray(object.notIn))
                        throw TypeError(".buf.validate.FloatRules.notIn: array expected");
                    message.notIn = [];
                    for (let i = 0; i < object.notIn.length; ++i)
                        message.notIn[i] = Number(object.notIn[i]);
                }
                if (object.finite != null)
                    message.finite = Boolean(object.finite);
                return message;
            };

            /**
             * Creates a plain object from a FloatRules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.FloatRules
             * @static
             * @param {buf.validate.FloatRules} message FloatRules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FloatRules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object["in"] = [];
                    object.notIn = [];
                }
                if (options.defaults)
                    object.finite = false;
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    object["const"] = options.json && !isFinite(message["const"]) ? String(message["const"]) : message["const"];
                    if (options.oneofs)
                        object._const = "const";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    object.lt = options.json && !isFinite(message.lt) ? String(message.lt) : message.lt;
                    if (options.oneofs)
                        object.lessThan = "lt";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    object.lte = options.json && !isFinite(message.lte) ? String(message.lte) : message.lte;
                    if (options.oneofs)
                        object.lessThan = "lte";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    object.gt = options.json && !isFinite(message.gt) ? String(message.gt) : message.gt;
                    if (options.oneofs)
                        object.greaterThan = "gt";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    object.gte = options.json && !isFinite(message.gte) ? String(message.gte) : message.gte;
                    if (options.oneofs)
                        object.greaterThan = "gte";
                }
                if (message["in"] && message["in"].length) {
                    object["in"] = [];
                    for (let j = 0; j < message["in"].length; ++j)
                        object["in"][j] = options.json && !isFinite(message["in"][j]) ? String(message["in"][j]) : message["in"][j];
                }
                if (message.notIn && message.notIn.length) {
                    object.notIn = [];
                    for (let j = 0; j < message.notIn.length; ++j)
                        object.notIn[j] = options.json && !isFinite(message.notIn[j]) ? String(message.notIn[j]) : message.notIn[j];
                }
                if (message.finite != null && message.hasOwnProperty("finite"))
                    object.finite = message.finite;
                return object;
            };

            /**
             * Converts this FloatRules to JSON.
             * @function toJSON
             * @memberof buf.validate.FloatRules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FloatRules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FloatRules
             * @function getTypeUrl
             * @memberof buf.validate.FloatRules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FloatRules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.FloatRules";
            };

            return FloatRules;
        })();

        validate.DoubleRules = (function() {

            /**
             * Properties of a DoubleRules.
             * @memberof buf.validate
             * @interface IDoubleRules
             * @property {number|null} ["const"] DoubleRules const
             * @property {number|null} [lt] DoubleRules lt
             * @property {number|null} [lte] DoubleRules lte
             * @property {number|null} [gt] DoubleRules gt
             * @property {number|null} [gte] DoubleRules gte
             * @property {Array.<number>|null} ["in"] DoubleRules in
             * @property {Array.<number>|null} [notIn] DoubleRules notIn
             * @property {boolean|null} [finite] DoubleRules finite
             */

            /**
             * Constructs a new DoubleRules.
             * @memberof buf.validate
             * @classdesc Represents a DoubleRules.
             * @implements IDoubleRules
             * @constructor
             * @param {buf.validate.IDoubleRules=} [properties] Properties to set
             */
            function DoubleRules(properties) {
                this["in"] = [];
                this.notIn = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DoubleRules const.
             * @member {number|null|undefined} const
             * @memberof buf.validate.DoubleRules
             * @instance
             */
            DoubleRules.prototype["const"] = null;

            /**
             * DoubleRules lt.
             * @member {number|null|undefined} lt
             * @memberof buf.validate.DoubleRules
             * @instance
             */
            DoubleRules.prototype.lt = null;

            /**
             * DoubleRules lte.
             * @member {number|null|undefined} lte
             * @memberof buf.validate.DoubleRules
             * @instance
             */
            DoubleRules.prototype.lte = null;

            /**
             * DoubleRules gt.
             * @member {number|null|undefined} gt
             * @memberof buf.validate.DoubleRules
             * @instance
             */
            DoubleRules.prototype.gt = null;

            /**
             * DoubleRules gte.
             * @member {number|null|undefined} gte
             * @memberof buf.validate.DoubleRules
             * @instance
             */
            DoubleRules.prototype.gte = null;

            /**
             * DoubleRules in.
             * @member {Array.<number>} in
             * @memberof buf.validate.DoubleRules
             * @instance
             */
            DoubleRules.prototype["in"] = $util.emptyArray;

            /**
             * DoubleRules notIn.
             * @member {Array.<number>} notIn
             * @memberof buf.validate.DoubleRules
             * @instance
             */
            DoubleRules.prototype.notIn = $util.emptyArray;

            /**
             * DoubleRules finite.
             * @member {boolean} finite
             * @memberof buf.validate.DoubleRules
             * @instance
             */
            DoubleRules.prototype.finite = false;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * DoubleRules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.DoubleRules
             * @instance
             */
            Object.defineProperty(DoubleRules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * DoubleRules lessThan.
             * @member {"lt"|"lte"|undefined} lessThan
             * @memberof buf.validate.DoubleRules
             * @instance
             */
            Object.defineProperty(DoubleRules.prototype, "lessThan", {
                get: $util.oneOfGetter($oneOfFields = ["lt", "lte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * DoubleRules greaterThan.
             * @member {"gt"|"gte"|undefined} greaterThan
             * @memberof buf.validate.DoubleRules
             * @instance
             */
            Object.defineProperty(DoubleRules.prototype, "greaterThan", {
                get: $util.oneOfGetter($oneOfFields = ["gt", "gte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new DoubleRules instance using the specified properties.
             * @function create
             * @memberof buf.validate.DoubleRules
             * @static
             * @param {buf.validate.IDoubleRules=} [properties] Properties to set
             * @returns {buf.validate.DoubleRules} DoubleRules instance
             */
            DoubleRules.create = function create(properties) {
                return new DoubleRules(properties);
            };

            /**
             * Encodes the specified DoubleRules message. Does not implicitly {@link buf.validate.DoubleRules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.DoubleRules
             * @static
             * @param {buf.validate.IDoubleRules} message DoubleRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DoubleRules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    writer.uint32(/* id 1, wireType 1 =*/9).double(message["const"]);
                if (message.lt != null && Object.hasOwnProperty.call(message, "lt"))
                    writer.uint32(/* id 2, wireType 1 =*/17).double(message.lt);
                if (message.lte != null && Object.hasOwnProperty.call(message, "lte"))
                    writer.uint32(/* id 3, wireType 1 =*/25).double(message.lte);
                if (message.gt != null && Object.hasOwnProperty.call(message, "gt"))
                    writer.uint32(/* id 4, wireType 1 =*/33).double(message.gt);
                if (message.gte != null && Object.hasOwnProperty.call(message, "gte"))
                    writer.uint32(/* id 5, wireType 1 =*/41).double(message.gte);
                if (message["in"] != null && message["in"].length) {
                    writer.uint32(/* id 6, wireType 2 =*/50).fork();
                    for (let i = 0; i < message["in"].length; ++i)
                        writer.double(message["in"][i]);
                    writer.ldelim();
                }
                if (message.notIn != null && message.notIn.length) {
                    writer.uint32(/* id 7, wireType 2 =*/58).fork();
                    for (let i = 0; i < message.notIn.length; ++i)
                        writer.double(message.notIn[i]);
                    writer.ldelim();
                }
                if (message.finite != null && Object.hasOwnProperty.call(message, "finite"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.finite);
                return writer;
            };

            /**
             * Encodes the specified DoubleRules message, length delimited. Does not implicitly {@link buf.validate.DoubleRules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.DoubleRules
             * @static
             * @param {buf.validate.IDoubleRules} message DoubleRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DoubleRules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DoubleRules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.DoubleRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.DoubleRules} DoubleRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DoubleRules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.DoubleRules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message["const"] = reader.double();
                            break;
                        }
                    case 2: {
                            message.lt = reader.double();
                            break;
                        }
                    case 3: {
                            message.lte = reader.double();
                            break;
                        }
                    case 4: {
                            message.gt = reader.double();
                            break;
                        }
                    case 5: {
                            message.gte = reader.double();
                            break;
                        }
                    case 6: {
                            if (!(message["in"] && message["in"].length))
                                message["in"] = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message["in"].push(reader.double());
                            } else
                                message["in"].push(reader.double());
                            break;
                        }
                    case 7: {
                            if (!(message.notIn && message.notIn.length))
                                message.notIn = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.notIn.push(reader.double());
                            } else
                                message.notIn.push(reader.double());
                            break;
                        }
                    case 8: {
                            message.finite = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DoubleRules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.DoubleRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.DoubleRules} DoubleRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DoubleRules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DoubleRules message.
             * @function verify
             * @memberof buf.validate.DoubleRules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DoubleRules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    if (typeof message["const"] !== "number")
                        return "const: number expected";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    properties.lessThan = 1;
                    if (typeof message.lt !== "number")
                        return "lt: number expected";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (properties.lessThan === 1)
                        return "lessThan: multiple values";
                    properties.lessThan = 1;
                    if (typeof message.lte !== "number")
                        return "lte: number expected";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    properties.greaterThan = 1;
                    if (typeof message.gt !== "number")
                        return "gt: number expected";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (properties.greaterThan === 1)
                        return "greaterThan: multiple values";
                    properties.greaterThan = 1;
                    if (typeof message.gte !== "number")
                        return "gte: number expected";
                }
                if (message["in"] != null && message.hasOwnProperty("in")) {
                    if (!Array.isArray(message["in"]))
                        return "in: array expected";
                    for (let i = 0; i < message["in"].length; ++i)
                        if (typeof message["in"][i] !== "number")
                            return "in: number[] expected";
                }
                if (message.notIn != null && message.hasOwnProperty("notIn")) {
                    if (!Array.isArray(message.notIn))
                        return "notIn: array expected";
                    for (let i = 0; i < message.notIn.length; ++i)
                        if (typeof message.notIn[i] !== "number")
                            return "notIn: number[] expected";
                }
                if (message.finite != null && message.hasOwnProperty("finite"))
                    if (typeof message.finite !== "boolean")
                        return "finite: boolean expected";
                return null;
            };

            /**
             * Creates a DoubleRules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.DoubleRules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.DoubleRules} DoubleRules
             */
            DoubleRules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.DoubleRules)
                    return object;
                let message = new $root.buf.validate.DoubleRules();
                if (object["const"] != null)
                    message["const"] = Number(object["const"]);
                if (object.lt != null)
                    message.lt = Number(object.lt);
                if (object.lte != null)
                    message.lte = Number(object.lte);
                if (object.gt != null)
                    message.gt = Number(object.gt);
                if (object.gte != null)
                    message.gte = Number(object.gte);
                if (object["in"]) {
                    if (!Array.isArray(object["in"]))
                        throw TypeError(".buf.validate.DoubleRules.in: array expected");
                    message["in"] = [];
                    for (let i = 0; i < object["in"].length; ++i)
                        message["in"][i] = Number(object["in"][i]);
                }
                if (object.notIn) {
                    if (!Array.isArray(object.notIn))
                        throw TypeError(".buf.validate.DoubleRules.notIn: array expected");
                    message.notIn = [];
                    for (let i = 0; i < object.notIn.length; ++i)
                        message.notIn[i] = Number(object.notIn[i]);
                }
                if (object.finite != null)
                    message.finite = Boolean(object.finite);
                return message;
            };

            /**
             * Creates a plain object from a DoubleRules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.DoubleRules
             * @static
             * @param {buf.validate.DoubleRules} message DoubleRules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DoubleRules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object["in"] = [];
                    object.notIn = [];
                }
                if (options.defaults)
                    object.finite = false;
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    object["const"] = options.json && !isFinite(message["const"]) ? String(message["const"]) : message["const"];
                    if (options.oneofs)
                        object._const = "const";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    object.lt = options.json && !isFinite(message.lt) ? String(message.lt) : message.lt;
                    if (options.oneofs)
                        object.lessThan = "lt";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    object.lte = options.json && !isFinite(message.lte) ? String(message.lte) : message.lte;
                    if (options.oneofs)
                        object.lessThan = "lte";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    object.gt = options.json && !isFinite(message.gt) ? String(message.gt) : message.gt;
                    if (options.oneofs)
                        object.greaterThan = "gt";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    object.gte = options.json && !isFinite(message.gte) ? String(message.gte) : message.gte;
                    if (options.oneofs)
                        object.greaterThan = "gte";
                }
                if (message["in"] && message["in"].length) {
                    object["in"] = [];
                    for (let j = 0; j < message["in"].length; ++j)
                        object["in"][j] = options.json && !isFinite(message["in"][j]) ? String(message["in"][j]) : message["in"][j];
                }
                if (message.notIn && message.notIn.length) {
                    object.notIn = [];
                    for (let j = 0; j < message.notIn.length; ++j)
                        object.notIn[j] = options.json && !isFinite(message.notIn[j]) ? String(message.notIn[j]) : message.notIn[j];
                }
                if (message.finite != null && message.hasOwnProperty("finite"))
                    object.finite = message.finite;
                return object;
            };

            /**
             * Converts this DoubleRules to JSON.
             * @function toJSON
             * @memberof buf.validate.DoubleRules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DoubleRules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for DoubleRules
             * @function getTypeUrl
             * @memberof buf.validate.DoubleRules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            DoubleRules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.DoubleRules";
            };

            return DoubleRules;
        })();

        validate.Int32Rules = (function() {

            /**
             * Properties of an Int32Rules.
             * @memberof buf.validate
             * @interface IInt32Rules
             * @property {number|null} ["const"] Int32Rules const
             * @property {number|null} [lt] Int32Rules lt
             * @property {number|null} [lte] Int32Rules lte
             * @property {number|null} [gt] Int32Rules gt
             * @property {number|null} [gte] Int32Rules gte
             * @property {Array.<number>|null} ["in"] Int32Rules in
             * @property {Array.<number>|null} [notIn] Int32Rules notIn
             */

            /**
             * Constructs a new Int32Rules.
             * @memberof buf.validate
             * @classdesc Represents an Int32Rules.
             * @implements IInt32Rules
             * @constructor
             * @param {buf.validate.IInt32Rules=} [properties] Properties to set
             */
            function Int32Rules(properties) {
                this["in"] = [];
                this.notIn = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Int32Rules const.
             * @member {number|null|undefined} const
             * @memberof buf.validate.Int32Rules
             * @instance
             */
            Int32Rules.prototype["const"] = null;

            /**
             * Int32Rules lt.
             * @member {number|null|undefined} lt
             * @memberof buf.validate.Int32Rules
             * @instance
             */
            Int32Rules.prototype.lt = null;

            /**
             * Int32Rules lte.
             * @member {number|null|undefined} lte
             * @memberof buf.validate.Int32Rules
             * @instance
             */
            Int32Rules.prototype.lte = null;

            /**
             * Int32Rules gt.
             * @member {number|null|undefined} gt
             * @memberof buf.validate.Int32Rules
             * @instance
             */
            Int32Rules.prototype.gt = null;

            /**
             * Int32Rules gte.
             * @member {number|null|undefined} gte
             * @memberof buf.validate.Int32Rules
             * @instance
             */
            Int32Rules.prototype.gte = null;

            /**
             * Int32Rules in.
             * @member {Array.<number>} in
             * @memberof buf.validate.Int32Rules
             * @instance
             */
            Int32Rules.prototype["in"] = $util.emptyArray;

            /**
             * Int32Rules notIn.
             * @member {Array.<number>} notIn
             * @memberof buf.validate.Int32Rules
             * @instance
             */
            Int32Rules.prototype.notIn = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Int32Rules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.Int32Rules
             * @instance
             */
            Object.defineProperty(Int32Rules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Int32Rules lessThan.
             * @member {"lt"|"lte"|undefined} lessThan
             * @memberof buf.validate.Int32Rules
             * @instance
             */
            Object.defineProperty(Int32Rules.prototype, "lessThan", {
                get: $util.oneOfGetter($oneOfFields = ["lt", "lte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Int32Rules greaterThan.
             * @member {"gt"|"gte"|undefined} greaterThan
             * @memberof buf.validate.Int32Rules
             * @instance
             */
            Object.defineProperty(Int32Rules.prototype, "greaterThan", {
                get: $util.oneOfGetter($oneOfFields = ["gt", "gte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new Int32Rules instance using the specified properties.
             * @function create
             * @memberof buf.validate.Int32Rules
             * @static
             * @param {buf.validate.IInt32Rules=} [properties] Properties to set
             * @returns {buf.validate.Int32Rules} Int32Rules instance
             */
            Int32Rules.create = function create(properties) {
                return new Int32Rules(properties);
            };

            /**
             * Encodes the specified Int32Rules message. Does not implicitly {@link buf.validate.Int32Rules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.Int32Rules
             * @static
             * @param {buf.validate.IInt32Rules} message Int32Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Int32Rules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message["const"]);
                if (message.lt != null && Object.hasOwnProperty.call(message, "lt"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.lt);
                if (message.lte != null && Object.hasOwnProperty.call(message, "lte"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.lte);
                if (message.gt != null && Object.hasOwnProperty.call(message, "gt"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.gt);
                if (message.gte != null && Object.hasOwnProperty.call(message, "gte"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.gte);
                if (message["in"] != null && message["in"].length) {
                    writer.uint32(/* id 6, wireType 2 =*/50).fork();
                    for (let i = 0; i < message["in"].length; ++i)
                        writer.int32(message["in"][i]);
                    writer.ldelim();
                }
                if (message.notIn != null && message.notIn.length) {
                    writer.uint32(/* id 7, wireType 2 =*/58).fork();
                    for (let i = 0; i < message.notIn.length; ++i)
                        writer.int32(message.notIn[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified Int32Rules message, length delimited. Does not implicitly {@link buf.validate.Int32Rules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.Int32Rules
             * @static
             * @param {buf.validate.IInt32Rules} message Int32Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Int32Rules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Int32Rules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.Int32Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.Int32Rules} Int32Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Int32Rules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.Int32Rules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message["const"] = reader.int32();
                            break;
                        }
                    case 2: {
                            message.lt = reader.int32();
                            break;
                        }
                    case 3: {
                            message.lte = reader.int32();
                            break;
                        }
                    case 4: {
                            message.gt = reader.int32();
                            break;
                        }
                    case 5: {
                            message.gte = reader.int32();
                            break;
                        }
                    case 6: {
                            if (!(message["in"] && message["in"].length))
                                message["in"] = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message["in"].push(reader.int32());
                            } else
                                message["in"].push(reader.int32());
                            break;
                        }
                    case 7: {
                            if (!(message.notIn && message.notIn.length))
                                message.notIn = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.notIn.push(reader.int32());
                            } else
                                message.notIn.push(reader.int32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Int32Rules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.Int32Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.Int32Rules} Int32Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Int32Rules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Int32Rules message.
             * @function verify
             * @memberof buf.validate.Int32Rules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Int32Rules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    if (!$util.isInteger(message["const"]))
                        return "const: integer expected";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lt))
                        return "lt: integer expected";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (properties.lessThan === 1)
                        return "lessThan: multiple values";
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lte))
                        return "lte: integer expected";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gt))
                        return "gt: integer expected";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (properties.greaterThan === 1)
                        return "greaterThan: multiple values";
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gte))
                        return "gte: integer expected";
                }
                if (message["in"] != null && message.hasOwnProperty("in")) {
                    if (!Array.isArray(message["in"]))
                        return "in: array expected";
                    for (let i = 0; i < message["in"].length; ++i)
                        if (!$util.isInteger(message["in"][i]))
                            return "in: integer[] expected";
                }
                if (message.notIn != null && message.hasOwnProperty("notIn")) {
                    if (!Array.isArray(message.notIn))
                        return "notIn: array expected";
                    for (let i = 0; i < message.notIn.length; ++i)
                        if (!$util.isInteger(message.notIn[i]))
                            return "notIn: integer[] expected";
                }
                return null;
            };

            /**
             * Creates an Int32Rules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.Int32Rules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.Int32Rules} Int32Rules
             */
            Int32Rules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.Int32Rules)
                    return object;
                let message = new $root.buf.validate.Int32Rules();
                if (object["const"] != null)
                    message["const"] = object["const"] | 0;
                if (object.lt != null)
                    message.lt = object.lt | 0;
                if (object.lte != null)
                    message.lte = object.lte | 0;
                if (object.gt != null)
                    message.gt = object.gt | 0;
                if (object.gte != null)
                    message.gte = object.gte | 0;
                if (object["in"]) {
                    if (!Array.isArray(object["in"]))
                        throw TypeError(".buf.validate.Int32Rules.in: array expected");
                    message["in"] = [];
                    for (let i = 0; i < object["in"].length; ++i)
                        message["in"][i] = object["in"][i] | 0;
                }
                if (object.notIn) {
                    if (!Array.isArray(object.notIn))
                        throw TypeError(".buf.validate.Int32Rules.notIn: array expected");
                    message.notIn = [];
                    for (let i = 0; i < object.notIn.length; ++i)
                        message.notIn[i] = object.notIn[i] | 0;
                }
                return message;
            };

            /**
             * Creates a plain object from an Int32Rules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.Int32Rules
             * @static
             * @param {buf.validate.Int32Rules} message Int32Rules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Int32Rules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object["in"] = [];
                    object.notIn = [];
                }
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    object["const"] = message["const"];
                    if (options.oneofs)
                        object._const = "const";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    object.lt = message.lt;
                    if (options.oneofs)
                        object.lessThan = "lt";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    object.lte = message.lte;
                    if (options.oneofs)
                        object.lessThan = "lte";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    object.gt = message.gt;
                    if (options.oneofs)
                        object.greaterThan = "gt";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    object.gte = message.gte;
                    if (options.oneofs)
                        object.greaterThan = "gte";
                }
                if (message["in"] && message["in"].length) {
                    object["in"] = [];
                    for (let j = 0; j < message["in"].length; ++j)
                        object["in"][j] = message["in"][j];
                }
                if (message.notIn && message.notIn.length) {
                    object.notIn = [];
                    for (let j = 0; j < message.notIn.length; ++j)
                        object.notIn[j] = message.notIn[j];
                }
                return object;
            };

            /**
             * Converts this Int32Rules to JSON.
             * @function toJSON
             * @memberof buf.validate.Int32Rules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Int32Rules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Int32Rules
             * @function getTypeUrl
             * @memberof buf.validate.Int32Rules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Int32Rules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.Int32Rules";
            };

            return Int32Rules;
        })();

        validate.Int64Rules = (function() {

            /**
             * Properties of an Int64Rules.
             * @memberof buf.validate
             * @interface IInt64Rules
             * @property {number|Long|null} ["const"] Int64Rules const
             * @property {number|Long|null} [lt] Int64Rules lt
             * @property {number|Long|null} [lte] Int64Rules lte
             * @property {number|Long|null} [gt] Int64Rules gt
             * @property {number|Long|null} [gte] Int64Rules gte
             * @property {Array.<number|Long>|null} ["in"] Int64Rules in
             * @property {Array.<number|Long>|null} [notIn] Int64Rules notIn
             */

            /**
             * Constructs a new Int64Rules.
             * @memberof buf.validate
             * @classdesc Represents an Int64Rules.
             * @implements IInt64Rules
             * @constructor
             * @param {buf.validate.IInt64Rules=} [properties] Properties to set
             */
            function Int64Rules(properties) {
                this["in"] = [];
                this.notIn = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Int64Rules const.
             * @member {number|Long|null|undefined} const
             * @memberof buf.validate.Int64Rules
             * @instance
             */
            Int64Rules.prototype["const"] = null;

            /**
             * Int64Rules lt.
             * @member {number|Long|null|undefined} lt
             * @memberof buf.validate.Int64Rules
             * @instance
             */
            Int64Rules.prototype.lt = null;

            /**
             * Int64Rules lte.
             * @member {number|Long|null|undefined} lte
             * @memberof buf.validate.Int64Rules
             * @instance
             */
            Int64Rules.prototype.lte = null;

            /**
             * Int64Rules gt.
             * @member {number|Long|null|undefined} gt
             * @memberof buf.validate.Int64Rules
             * @instance
             */
            Int64Rules.prototype.gt = null;

            /**
             * Int64Rules gte.
             * @member {number|Long|null|undefined} gte
             * @memberof buf.validate.Int64Rules
             * @instance
             */
            Int64Rules.prototype.gte = null;

            /**
             * Int64Rules in.
             * @member {Array.<number|Long>} in
             * @memberof buf.validate.Int64Rules
             * @instance
             */
            Int64Rules.prototype["in"] = $util.emptyArray;

            /**
             * Int64Rules notIn.
             * @member {Array.<number|Long>} notIn
             * @memberof buf.validate.Int64Rules
             * @instance
             */
            Int64Rules.prototype.notIn = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Int64Rules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.Int64Rules
             * @instance
             */
            Object.defineProperty(Int64Rules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Int64Rules lessThan.
             * @member {"lt"|"lte"|undefined} lessThan
             * @memberof buf.validate.Int64Rules
             * @instance
             */
            Object.defineProperty(Int64Rules.prototype, "lessThan", {
                get: $util.oneOfGetter($oneOfFields = ["lt", "lte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Int64Rules greaterThan.
             * @member {"gt"|"gte"|undefined} greaterThan
             * @memberof buf.validate.Int64Rules
             * @instance
             */
            Object.defineProperty(Int64Rules.prototype, "greaterThan", {
                get: $util.oneOfGetter($oneOfFields = ["gt", "gte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new Int64Rules instance using the specified properties.
             * @function create
             * @memberof buf.validate.Int64Rules
             * @static
             * @param {buf.validate.IInt64Rules=} [properties] Properties to set
             * @returns {buf.validate.Int64Rules} Int64Rules instance
             */
            Int64Rules.create = function create(properties) {
                return new Int64Rules(properties);
            };

            /**
             * Encodes the specified Int64Rules message. Does not implicitly {@link buf.validate.Int64Rules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.Int64Rules
             * @static
             * @param {buf.validate.IInt64Rules} message Int64Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Int64Rules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message["const"]);
                if (message.lt != null && Object.hasOwnProperty.call(message, "lt"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.lt);
                if (message.lte != null && Object.hasOwnProperty.call(message, "lte"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int64(message.lte);
                if (message.gt != null && Object.hasOwnProperty.call(message, "gt"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int64(message.gt);
                if (message.gte != null && Object.hasOwnProperty.call(message, "gte"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.gte);
                if (message["in"] != null && message["in"].length) {
                    writer.uint32(/* id 6, wireType 2 =*/50).fork();
                    for (let i = 0; i < message["in"].length; ++i)
                        writer.int64(message["in"][i]);
                    writer.ldelim();
                }
                if (message.notIn != null && message.notIn.length) {
                    writer.uint32(/* id 7, wireType 2 =*/58).fork();
                    for (let i = 0; i < message.notIn.length; ++i)
                        writer.int64(message.notIn[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified Int64Rules message, length delimited. Does not implicitly {@link buf.validate.Int64Rules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.Int64Rules
             * @static
             * @param {buf.validate.IInt64Rules} message Int64Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Int64Rules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Int64Rules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.Int64Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.Int64Rules} Int64Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Int64Rules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.Int64Rules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message["const"] = reader.int64();
                            break;
                        }
                    case 2: {
                            message.lt = reader.int64();
                            break;
                        }
                    case 3: {
                            message.lte = reader.int64();
                            break;
                        }
                    case 4: {
                            message.gt = reader.int64();
                            break;
                        }
                    case 5: {
                            message.gte = reader.int64();
                            break;
                        }
                    case 6: {
                            if (!(message["in"] && message["in"].length))
                                message["in"] = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message["in"].push(reader.int64());
                            } else
                                message["in"].push(reader.int64());
                            break;
                        }
                    case 7: {
                            if (!(message.notIn && message.notIn.length))
                                message.notIn = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.notIn.push(reader.int64());
                            } else
                                message.notIn.push(reader.int64());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Int64Rules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.Int64Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.Int64Rules} Int64Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Int64Rules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Int64Rules message.
             * @function verify
             * @memberof buf.validate.Int64Rules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Int64Rules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    if (!$util.isInteger(message["const"]) && !(message["const"] && $util.isInteger(message["const"].low) && $util.isInteger(message["const"].high)))
                        return "const: integer|Long expected";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lt) && !(message.lt && $util.isInteger(message.lt.low) && $util.isInteger(message.lt.high)))
                        return "lt: integer|Long expected";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (properties.lessThan === 1)
                        return "lessThan: multiple values";
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lte) && !(message.lte && $util.isInteger(message.lte.low) && $util.isInteger(message.lte.high)))
                        return "lte: integer|Long expected";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gt) && !(message.gt && $util.isInteger(message.gt.low) && $util.isInteger(message.gt.high)))
                        return "gt: integer|Long expected";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (properties.greaterThan === 1)
                        return "greaterThan: multiple values";
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gte) && !(message.gte && $util.isInteger(message.gte.low) && $util.isInteger(message.gte.high)))
                        return "gte: integer|Long expected";
                }
                if (message["in"] != null && message.hasOwnProperty("in")) {
                    if (!Array.isArray(message["in"]))
                        return "in: array expected";
                    for (let i = 0; i < message["in"].length; ++i)
                        if (!$util.isInteger(message["in"][i]) && !(message["in"][i] && $util.isInteger(message["in"][i].low) && $util.isInteger(message["in"][i].high)))
                            return "in: integer|Long[] expected";
                }
                if (message.notIn != null && message.hasOwnProperty("notIn")) {
                    if (!Array.isArray(message.notIn))
                        return "notIn: array expected";
                    for (let i = 0; i < message.notIn.length; ++i)
                        if (!$util.isInteger(message.notIn[i]) && !(message.notIn[i] && $util.isInteger(message.notIn[i].low) && $util.isInteger(message.notIn[i].high)))
                            return "notIn: integer|Long[] expected";
                }
                return null;
            };

            /**
             * Creates an Int64Rules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.Int64Rules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.Int64Rules} Int64Rules
             */
            Int64Rules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.Int64Rules)
                    return object;
                let message = new $root.buf.validate.Int64Rules();
                if (object["const"] != null)
                    if ($util.Long)
                        (message["const"] = $util.Long.fromValue(object["const"])).unsigned = false;
                    else if (typeof object["const"] === "string")
                        message["const"] = parseInt(object["const"], 10);
                    else if (typeof object["const"] === "number")
                        message["const"] = object["const"];
                    else if (typeof object["const"] === "object")
                        message["const"] = new $util.LongBits(object["const"].low >>> 0, object["const"].high >>> 0).toNumber();
                if (object.lt != null)
                    if ($util.Long)
                        (message.lt = $util.Long.fromValue(object.lt)).unsigned = false;
                    else if (typeof object.lt === "string")
                        message.lt = parseInt(object.lt, 10);
                    else if (typeof object.lt === "number")
                        message.lt = object.lt;
                    else if (typeof object.lt === "object")
                        message.lt = new $util.LongBits(object.lt.low >>> 0, object.lt.high >>> 0).toNumber();
                if (object.lte != null)
                    if ($util.Long)
                        (message.lte = $util.Long.fromValue(object.lte)).unsigned = false;
                    else if (typeof object.lte === "string")
                        message.lte = parseInt(object.lte, 10);
                    else if (typeof object.lte === "number")
                        message.lte = object.lte;
                    else if (typeof object.lte === "object")
                        message.lte = new $util.LongBits(object.lte.low >>> 0, object.lte.high >>> 0).toNumber();
                if (object.gt != null)
                    if ($util.Long)
                        (message.gt = $util.Long.fromValue(object.gt)).unsigned = false;
                    else if (typeof object.gt === "string")
                        message.gt = parseInt(object.gt, 10);
                    else if (typeof object.gt === "number")
                        message.gt = object.gt;
                    else if (typeof object.gt === "object")
                        message.gt = new $util.LongBits(object.gt.low >>> 0, object.gt.high >>> 0).toNumber();
                if (object.gte != null)
                    if ($util.Long)
                        (message.gte = $util.Long.fromValue(object.gte)).unsigned = false;
                    else if (typeof object.gte === "string")
                        message.gte = parseInt(object.gte, 10);
                    else if (typeof object.gte === "number")
                        message.gte = object.gte;
                    else if (typeof object.gte === "object")
                        message.gte = new $util.LongBits(object.gte.low >>> 0, object.gte.high >>> 0).toNumber();
                if (object["in"]) {
                    if (!Array.isArray(object["in"]))
                        throw TypeError(".buf.validate.Int64Rules.in: array expected");
                    message["in"] = [];
                    for (let i = 0; i < object["in"].length; ++i)
                        if ($util.Long)
                            (message["in"][i] = $util.Long.fromValue(object["in"][i])).unsigned = false;
                        else if (typeof object["in"][i] === "string")
                            message["in"][i] = parseInt(object["in"][i], 10);
                        else if (typeof object["in"][i] === "number")
                            message["in"][i] = object["in"][i];
                        else if (typeof object["in"][i] === "object")
                            message["in"][i] = new $util.LongBits(object["in"][i].low >>> 0, object["in"][i].high >>> 0).toNumber();
                }
                if (object.notIn) {
                    if (!Array.isArray(object.notIn))
                        throw TypeError(".buf.validate.Int64Rules.notIn: array expected");
                    message.notIn = [];
                    for (let i = 0; i < object.notIn.length; ++i)
                        if ($util.Long)
                            (message.notIn[i] = $util.Long.fromValue(object.notIn[i])).unsigned = false;
                        else if (typeof object.notIn[i] === "string")
                            message.notIn[i] = parseInt(object.notIn[i], 10);
                        else if (typeof object.notIn[i] === "number")
                            message.notIn[i] = object.notIn[i];
                        else if (typeof object.notIn[i] === "object")
                            message.notIn[i] = new $util.LongBits(object.notIn[i].low >>> 0, object.notIn[i].high >>> 0).toNumber();
                }
                return message;
            };

            /**
             * Creates a plain object from an Int64Rules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.Int64Rules
             * @static
             * @param {buf.validate.Int64Rules} message Int64Rules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Int64Rules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object["in"] = [];
                    object.notIn = [];
                }
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    if (typeof message["const"] === "number")
                        object["const"] = options.longs === String ? String(message["const"]) : message["const"];
                    else
                        object["const"] = options.longs === String ? $util.Long.prototype.toString.call(message["const"]) : options.longs === Number ? new $util.LongBits(message["const"].low >>> 0, message["const"].high >>> 0).toNumber() : message["const"];
                    if (options.oneofs)
                        object._const = "const";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    if (typeof message.lt === "number")
                        object.lt = options.longs === String ? String(message.lt) : message.lt;
                    else
                        object.lt = options.longs === String ? $util.Long.prototype.toString.call(message.lt) : options.longs === Number ? new $util.LongBits(message.lt.low >>> 0, message.lt.high >>> 0).toNumber() : message.lt;
                    if (options.oneofs)
                        object.lessThan = "lt";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (typeof message.lte === "number")
                        object.lte = options.longs === String ? String(message.lte) : message.lte;
                    else
                        object.lte = options.longs === String ? $util.Long.prototype.toString.call(message.lte) : options.longs === Number ? new $util.LongBits(message.lte.low >>> 0, message.lte.high >>> 0).toNumber() : message.lte;
                    if (options.oneofs)
                        object.lessThan = "lte";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    if (typeof message.gt === "number")
                        object.gt = options.longs === String ? String(message.gt) : message.gt;
                    else
                        object.gt = options.longs === String ? $util.Long.prototype.toString.call(message.gt) : options.longs === Number ? new $util.LongBits(message.gt.low >>> 0, message.gt.high >>> 0).toNumber() : message.gt;
                    if (options.oneofs)
                        object.greaterThan = "gt";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (typeof message.gte === "number")
                        object.gte = options.longs === String ? String(message.gte) : message.gte;
                    else
                        object.gte = options.longs === String ? $util.Long.prototype.toString.call(message.gte) : options.longs === Number ? new $util.LongBits(message.gte.low >>> 0, message.gte.high >>> 0).toNumber() : message.gte;
                    if (options.oneofs)
                        object.greaterThan = "gte";
                }
                if (message["in"] && message["in"].length) {
                    object["in"] = [];
                    for (let j = 0; j < message["in"].length; ++j)
                        if (typeof message["in"][j] === "number")
                            object["in"][j] = options.longs === String ? String(message["in"][j]) : message["in"][j];
                        else
                            object["in"][j] = options.longs === String ? $util.Long.prototype.toString.call(message["in"][j]) : options.longs === Number ? new $util.LongBits(message["in"][j].low >>> 0, message["in"][j].high >>> 0).toNumber() : message["in"][j];
                }
                if (message.notIn && message.notIn.length) {
                    object.notIn = [];
                    for (let j = 0; j < message.notIn.length; ++j)
                        if (typeof message.notIn[j] === "number")
                            object.notIn[j] = options.longs === String ? String(message.notIn[j]) : message.notIn[j];
                        else
                            object.notIn[j] = options.longs === String ? $util.Long.prototype.toString.call(message.notIn[j]) : options.longs === Number ? new $util.LongBits(message.notIn[j].low >>> 0, message.notIn[j].high >>> 0).toNumber() : message.notIn[j];
                }
                return object;
            };

            /**
             * Converts this Int64Rules to JSON.
             * @function toJSON
             * @memberof buf.validate.Int64Rules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Int64Rules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Int64Rules
             * @function getTypeUrl
             * @memberof buf.validate.Int64Rules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Int64Rules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.Int64Rules";
            };

            return Int64Rules;
        })();

        validate.UInt32Rules = (function() {

            /**
             * Properties of a UInt32Rules.
             * @memberof buf.validate
             * @interface IUInt32Rules
             * @property {number|null} ["const"] UInt32Rules const
             * @property {number|null} [lt] UInt32Rules lt
             * @property {number|null} [lte] UInt32Rules lte
             * @property {number|null} [gt] UInt32Rules gt
             * @property {number|null} [gte] UInt32Rules gte
             * @property {Array.<number>|null} ["in"] UInt32Rules in
             * @property {Array.<number>|null} [notIn] UInt32Rules notIn
             */

            /**
             * Constructs a new UInt32Rules.
             * @memberof buf.validate
             * @classdesc Represents a UInt32Rules.
             * @implements IUInt32Rules
             * @constructor
             * @param {buf.validate.IUInt32Rules=} [properties] Properties to set
             */
            function UInt32Rules(properties) {
                this["in"] = [];
                this.notIn = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UInt32Rules const.
             * @member {number|null|undefined} const
             * @memberof buf.validate.UInt32Rules
             * @instance
             */
            UInt32Rules.prototype["const"] = null;

            /**
             * UInt32Rules lt.
             * @member {number|null|undefined} lt
             * @memberof buf.validate.UInt32Rules
             * @instance
             */
            UInt32Rules.prototype.lt = null;

            /**
             * UInt32Rules lte.
             * @member {number|null|undefined} lte
             * @memberof buf.validate.UInt32Rules
             * @instance
             */
            UInt32Rules.prototype.lte = null;

            /**
             * UInt32Rules gt.
             * @member {number|null|undefined} gt
             * @memberof buf.validate.UInt32Rules
             * @instance
             */
            UInt32Rules.prototype.gt = null;

            /**
             * UInt32Rules gte.
             * @member {number|null|undefined} gte
             * @memberof buf.validate.UInt32Rules
             * @instance
             */
            UInt32Rules.prototype.gte = null;

            /**
             * UInt32Rules in.
             * @member {Array.<number>} in
             * @memberof buf.validate.UInt32Rules
             * @instance
             */
            UInt32Rules.prototype["in"] = $util.emptyArray;

            /**
             * UInt32Rules notIn.
             * @member {Array.<number>} notIn
             * @memberof buf.validate.UInt32Rules
             * @instance
             */
            UInt32Rules.prototype.notIn = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * UInt32Rules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.UInt32Rules
             * @instance
             */
            Object.defineProperty(UInt32Rules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * UInt32Rules lessThan.
             * @member {"lt"|"lte"|undefined} lessThan
             * @memberof buf.validate.UInt32Rules
             * @instance
             */
            Object.defineProperty(UInt32Rules.prototype, "lessThan", {
                get: $util.oneOfGetter($oneOfFields = ["lt", "lte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * UInt32Rules greaterThan.
             * @member {"gt"|"gte"|undefined} greaterThan
             * @memberof buf.validate.UInt32Rules
             * @instance
             */
            Object.defineProperty(UInt32Rules.prototype, "greaterThan", {
                get: $util.oneOfGetter($oneOfFields = ["gt", "gte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new UInt32Rules instance using the specified properties.
             * @function create
             * @memberof buf.validate.UInt32Rules
             * @static
             * @param {buf.validate.IUInt32Rules=} [properties] Properties to set
             * @returns {buf.validate.UInt32Rules} UInt32Rules instance
             */
            UInt32Rules.create = function create(properties) {
                return new UInt32Rules(properties);
            };

            /**
             * Encodes the specified UInt32Rules message. Does not implicitly {@link buf.validate.UInt32Rules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.UInt32Rules
             * @static
             * @param {buf.validate.IUInt32Rules} message UInt32Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UInt32Rules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message["const"]);
                if (message.lt != null && Object.hasOwnProperty.call(message, "lt"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.lt);
                if (message.lte != null && Object.hasOwnProperty.call(message, "lte"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.lte);
                if (message.gt != null && Object.hasOwnProperty.call(message, "gt"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.gt);
                if (message.gte != null && Object.hasOwnProperty.call(message, "gte"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.gte);
                if (message["in"] != null && message["in"].length) {
                    writer.uint32(/* id 6, wireType 2 =*/50).fork();
                    for (let i = 0; i < message["in"].length; ++i)
                        writer.uint32(message["in"][i]);
                    writer.ldelim();
                }
                if (message.notIn != null && message.notIn.length) {
                    writer.uint32(/* id 7, wireType 2 =*/58).fork();
                    for (let i = 0; i < message.notIn.length; ++i)
                        writer.uint32(message.notIn[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified UInt32Rules message, length delimited. Does not implicitly {@link buf.validate.UInt32Rules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.UInt32Rules
             * @static
             * @param {buf.validate.IUInt32Rules} message UInt32Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UInt32Rules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a UInt32Rules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.UInt32Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.UInt32Rules} UInt32Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UInt32Rules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.UInt32Rules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message["const"] = reader.uint32();
                            break;
                        }
                    case 2: {
                            message.lt = reader.uint32();
                            break;
                        }
                    case 3: {
                            message.lte = reader.uint32();
                            break;
                        }
                    case 4: {
                            message.gt = reader.uint32();
                            break;
                        }
                    case 5: {
                            message.gte = reader.uint32();
                            break;
                        }
                    case 6: {
                            if (!(message["in"] && message["in"].length))
                                message["in"] = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message["in"].push(reader.uint32());
                            } else
                                message["in"].push(reader.uint32());
                            break;
                        }
                    case 7: {
                            if (!(message.notIn && message.notIn.length))
                                message.notIn = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.notIn.push(reader.uint32());
                            } else
                                message.notIn.push(reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a UInt32Rules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.UInt32Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.UInt32Rules} UInt32Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UInt32Rules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a UInt32Rules message.
             * @function verify
             * @memberof buf.validate.UInt32Rules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UInt32Rules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    if (!$util.isInteger(message["const"]))
                        return "const: integer expected";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lt))
                        return "lt: integer expected";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (properties.lessThan === 1)
                        return "lessThan: multiple values";
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lte))
                        return "lte: integer expected";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gt))
                        return "gt: integer expected";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (properties.greaterThan === 1)
                        return "greaterThan: multiple values";
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gte))
                        return "gte: integer expected";
                }
                if (message["in"] != null && message.hasOwnProperty("in")) {
                    if (!Array.isArray(message["in"]))
                        return "in: array expected";
                    for (let i = 0; i < message["in"].length; ++i)
                        if (!$util.isInteger(message["in"][i]))
                            return "in: integer[] expected";
                }
                if (message.notIn != null && message.hasOwnProperty("notIn")) {
                    if (!Array.isArray(message.notIn))
                        return "notIn: array expected";
                    for (let i = 0; i < message.notIn.length; ++i)
                        if (!$util.isInteger(message.notIn[i]))
                            return "notIn: integer[] expected";
                }
                return null;
            };

            /**
             * Creates a UInt32Rules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.UInt32Rules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.UInt32Rules} UInt32Rules
             */
            UInt32Rules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.UInt32Rules)
                    return object;
                let message = new $root.buf.validate.UInt32Rules();
                if (object["const"] != null)
                    message["const"] = object["const"] >>> 0;
                if (object.lt != null)
                    message.lt = object.lt >>> 0;
                if (object.lte != null)
                    message.lte = object.lte >>> 0;
                if (object.gt != null)
                    message.gt = object.gt >>> 0;
                if (object.gte != null)
                    message.gte = object.gte >>> 0;
                if (object["in"]) {
                    if (!Array.isArray(object["in"]))
                        throw TypeError(".buf.validate.UInt32Rules.in: array expected");
                    message["in"] = [];
                    for (let i = 0; i < object["in"].length; ++i)
                        message["in"][i] = object["in"][i] >>> 0;
                }
                if (object.notIn) {
                    if (!Array.isArray(object.notIn))
                        throw TypeError(".buf.validate.UInt32Rules.notIn: array expected");
                    message.notIn = [];
                    for (let i = 0; i < object.notIn.length; ++i)
                        message.notIn[i] = object.notIn[i] >>> 0;
                }
                return message;
            };

            /**
             * Creates a plain object from a UInt32Rules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.UInt32Rules
             * @static
             * @param {buf.validate.UInt32Rules} message UInt32Rules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UInt32Rules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object["in"] = [];
                    object.notIn = [];
                }
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    object["const"] = message["const"];
                    if (options.oneofs)
                        object._const = "const";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    object.lt = message.lt;
                    if (options.oneofs)
                        object.lessThan = "lt";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    object.lte = message.lte;
                    if (options.oneofs)
                        object.lessThan = "lte";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    object.gt = message.gt;
                    if (options.oneofs)
                        object.greaterThan = "gt";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    object.gte = message.gte;
                    if (options.oneofs)
                        object.greaterThan = "gte";
                }
                if (message["in"] && message["in"].length) {
                    object["in"] = [];
                    for (let j = 0; j < message["in"].length; ++j)
                        object["in"][j] = message["in"][j];
                }
                if (message.notIn && message.notIn.length) {
                    object.notIn = [];
                    for (let j = 0; j < message.notIn.length; ++j)
                        object.notIn[j] = message.notIn[j];
                }
                return object;
            };

            /**
             * Converts this UInt32Rules to JSON.
             * @function toJSON
             * @memberof buf.validate.UInt32Rules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UInt32Rules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UInt32Rules
             * @function getTypeUrl
             * @memberof buf.validate.UInt32Rules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UInt32Rules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.UInt32Rules";
            };

            return UInt32Rules;
        })();

        validate.UInt64Rules = (function() {

            /**
             * Properties of a UInt64Rules.
             * @memberof buf.validate
             * @interface IUInt64Rules
             * @property {number|Long|null} ["const"] UInt64Rules const
             * @property {number|Long|null} [lt] UInt64Rules lt
             * @property {number|Long|null} [lte] UInt64Rules lte
             * @property {number|Long|null} [gt] UInt64Rules gt
             * @property {number|Long|null} [gte] UInt64Rules gte
             * @property {Array.<number|Long>|null} ["in"] UInt64Rules in
             * @property {Array.<number|Long>|null} [notIn] UInt64Rules notIn
             */

            /**
             * Constructs a new UInt64Rules.
             * @memberof buf.validate
             * @classdesc Represents a UInt64Rules.
             * @implements IUInt64Rules
             * @constructor
             * @param {buf.validate.IUInt64Rules=} [properties] Properties to set
             */
            function UInt64Rules(properties) {
                this["in"] = [];
                this.notIn = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UInt64Rules const.
             * @member {number|Long|null|undefined} const
             * @memberof buf.validate.UInt64Rules
             * @instance
             */
            UInt64Rules.prototype["const"] = null;

            /**
             * UInt64Rules lt.
             * @member {number|Long|null|undefined} lt
             * @memberof buf.validate.UInt64Rules
             * @instance
             */
            UInt64Rules.prototype.lt = null;

            /**
             * UInt64Rules lte.
             * @member {number|Long|null|undefined} lte
             * @memberof buf.validate.UInt64Rules
             * @instance
             */
            UInt64Rules.prototype.lte = null;

            /**
             * UInt64Rules gt.
             * @member {number|Long|null|undefined} gt
             * @memberof buf.validate.UInt64Rules
             * @instance
             */
            UInt64Rules.prototype.gt = null;

            /**
             * UInt64Rules gte.
             * @member {number|Long|null|undefined} gte
             * @memberof buf.validate.UInt64Rules
             * @instance
             */
            UInt64Rules.prototype.gte = null;

            /**
             * UInt64Rules in.
             * @member {Array.<number|Long>} in
             * @memberof buf.validate.UInt64Rules
             * @instance
             */
            UInt64Rules.prototype["in"] = $util.emptyArray;

            /**
             * UInt64Rules notIn.
             * @member {Array.<number|Long>} notIn
             * @memberof buf.validate.UInt64Rules
             * @instance
             */
            UInt64Rules.prototype.notIn = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * UInt64Rules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.UInt64Rules
             * @instance
             */
            Object.defineProperty(UInt64Rules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * UInt64Rules lessThan.
             * @member {"lt"|"lte"|undefined} lessThan
             * @memberof buf.validate.UInt64Rules
             * @instance
             */
            Object.defineProperty(UInt64Rules.prototype, "lessThan", {
                get: $util.oneOfGetter($oneOfFields = ["lt", "lte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * UInt64Rules greaterThan.
             * @member {"gt"|"gte"|undefined} greaterThan
             * @memberof buf.validate.UInt64Rules
             * @instance
             */
            Object.defineProperty(UInt64Rules.prototype, "greaterThan", {
                get: $util.oneOfGetter($oneOfFields = ["gt", "gte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new UInt64Rules instance using the specified properties.
             * @function create
             * @memberof buf.validate.UInt64Rules
             * @static
             * @param {buf.validate.IUInt64Rules=} [properties] Properties to set
             * @returns {buf.validate.UInt64Rules} UInt64Rules instance
             */
            UInt64Rules.create = function create(properties) {
                return new UInt64Rules(properties);
            };

            /**
             * Encodes the specified UInt64Rules message. Does not implicitly {@link buf.validate.UInt64Rules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.UInt64Rules
             * @static
             * @param {buf.validate.IUInt64Rules} message UInt64Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UInt64Rules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message["const"]);
                if (message.lt != null && Object.hasOwnProperty.call(message, "lt"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.lt);
                if (message.lte != null && Object.hasOwnProperty.call(message, "lte"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.lte);
                if (message.gt != null && Object.hasOwnProperty.call(message, "gt"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.gt);
                if (message.gte != null && Object.hasOwnProperty.call(message, "gte"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.gte);
                if (message["in"] != null && message["in"].length) {
                    writer.uint32(/* id 6, wireType 2 =*/50).fork();
                    for (let i = 0; i < message["in"].length; ++i)
                        writer.uint64(message["in"][i]);
                    writer.ldelim();
                }
                if (message.notIn != null && message.notIn.length) {
                    writer.uint32(/* id 7, wireType 2 =*/58).fork();
                    for (let i = 0; i < message.notIn.length; ++i)
                        writer.uint64(message.notIn[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified UInt64Rules message, length delimited. Does not implicitly {@link buf.validate.UInt64Rules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.UInt64Rules
             * @static
             * @param {buf.validate.IUInt64Rules} message UInt64Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UInt64Rules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a UInt64Rules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.UInt64Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.UInt64Rules} UInt64Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UInt64Rules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.UInt64Rules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message["const"] = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.lt = reader.uint64();
                            break;
                        }
                    case 3: {
                            message.lte = reader.uint64();
                            break;
                        }
                    case 4: {
                            message.gt = reader.uint64();
                            break;
                        }
                    case 5: {
                            message.gte = reader.uint64();
                            break;
                        }
                    case 6: {
                            if (!(message["in"] && message["in"].length))
                                message["in"] = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message["in"].push(reader.uint64());
                            } else
                                message["in"].push(reader.uint64());
                            break;
                        }
                    case 7: {
                            if (!(message.notIn && message.notIn.length))
                                message.notIn = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.notIn.push(reader.uint64());
                            } else
                                message.notIn.push(reader.uint64());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a UInt64Rules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.UInt64Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.UInt64Rules} UInt64Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UInt64Rules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a UInt64Rules message.
             * @function verify
             * @memberof buf.validate.UInt64Rules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UInt64Rules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    if (!$util.isInteger(message["const"]) && !(message["const"] && $util.isInteger(message["const"].low) && $util.isInteger(message["const"].high)))
                        return "const: integer|Long expected";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lt) && !(message.lt && $util.isInteger(message.lt.low) && $util.isInteger(message.lt.high)))
                        return "lt: integer|Long expected";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (properties.lessThan === 1)
                        return "lessThan: multiple values";
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lte) && !(message.lte && $util.isInteger(message.lte.low) && $util.isInteger(message.lte.high)))
                        return "lte: integer|Long expected";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gt) && !(message.gt && $util.isInteger(message.gt.low) && $util.isInteger(message.gt.high)))
                        return "gt: integer|Long expected";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (properties.greaterThan === 1)
                        return "greaterThan: multiple values";
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gte) && !(message.gte && $util.isInteger(message.gte.low) && $util.isInteger(message.gte.high)))
                        return "gte: integer|Long expected";
                }
                if (message["in"] != null && message.hasOwnProperty("in")) {
                    if (!Array.isArray(message["in"]))
                        return "in: array expected";
                    for (let i = 0; i < message["in"].length; ++i)
                        if (!$util.isInteger(message["in"][i]) && !(message["in"][i] && $util.isInteger(message["in"][i].low) && $util.isInteger(message["in"][i].high)))
                            return "in: integer|Long[] expected";
                }
                if (message.notIn != null && message.hasOwnProperty("notIn")) {
                    if (!Array.isArray(message.notIn))
                        return "notIn: array expected";
                    for (let i = 0; i < message.notIn.length; ++i)
                        if (!$util.isInteger(message.notIn[i]) && !(message.notIn[i] && $util.isInteger(message.notIn[i].low) && $util.isInteger(message.notIn[i].high)))
                            return "notIn: integer|Long[] expected";
                }
                return null;
            };

            /**
             * Creates a UInt64Rules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.UInt64Rules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.UInt64Rules} UInt64Rules
             */
            UInt64Rules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.UInt64Rules)
                    return object;
                let message = new $root.buf.validate.UInt64Rules();
                if (object["const"] != null)
                    if ($util.Long)
                        (message["const"] = $util.Long.fromValue(object["const"])).unsigned = true;
                    else if (typeof object["const"] === "string")
                        message["const"] = parseInt(object["const"], 10);
                    else if (typeof object["const"] === "number")
                        message["const"] = object["const"];
                    else if (typeof object["const"] === "object")
                        message["const"] = new $util.LongBits(object["const"].low >>> 0, object["const"].high >>> 0).toNumber(true);
                if (object.lt != null)
                    if ($util.Long)
                        (message.lt = $util.Long.fromValue(object.lt)).unsigned = true;
                    else if (typeof object.lt === "string")
                        message.lt = parseInt(object.lt, 10);
                    else if (typeof object.lt === "number")
                        message.lt = object.lt;
                    else if (typeof object.lt === "object")
                        message.lt = new $util.LongBits(object.lt.low >>> 0, object.lt.high >>> 0).toNumber(true);
                if (object.lte != null)
                    if ($util.Long)
                        (message.lte = $util.Long.fromValue(object.lte)).unsigned = true;
                    else if (typeof object.lte === "string")
                        message.lte = parseInt(object.lte, 10);
                    else if (typeof object.lte === "number")
                        message.lte = object.lte;
                    else if (typeof object.lte === "object")
                        message.lte = new $util.LongBits(object.lte.low >>> 0, object.lte.high >>> 0).toNumber(true);
                if (object.gt != null)
                    if ($util.Long)
                        (message.gt = $util.Long.fromValue(object.gt)).unsigned = true;
                    else if (typeof object.gt === "string")
                        message.gt = parseInt(object.gt, 10);
                    else if (typeof object.gt === "number")
                        message.gt = object.gt;
                    else if (typeof object.gt === "object")
                        message.gt = new $util.LongBits(object.gt.low >>> 0, object.gt.high >>> 0).toNumber(true);
                if (object.gte != null)
                    if ($util.Long)
                        (message.gte = $util.Long.fromValue(object.gte)).unsigned = true;
                    else if (typeof object.gte === "string")
                        message.gte = parseInt(object.gte, 10);
                    else if (typeof object.gte === "number")
                        message.gte = object.gte;
                    else if (typeof object.gte === "object")
                        message.gte = new $util.LongBits(object.gte.low >>> 0, object.gte.high >>> 0).toNumber(true);
                if (object["in"]) {
                    if (!Array.isArray(object["in"]))
                        throw TypeError(".buf.validate.UInt64Rules.in: array expected");
                    message["in"] = [];
                    for (let i = 0; i < object["in"].length; ++i)
                        if ($util.Long)
                            (message["in"][i] = $util.Long.fromValue(object["in"][i])).unsigned = true;
                        else if (typeof object["in"][i] === "string")
                            message["in"][i] = parseInt(object["in"][i], 10);
                        else if (typeof object["in"][i] === "number")
                            message["in"][i] = object["in"][i];
                        else if (typeof object["in"][i] === "object")
                            message["in"][i] = new $util.LongBits(object["in"][i].low >>> 0, object["in"][i].high >>> 0).toNumber(true);
                }
                if (object.notIn) {
                    if (!Array.isArray(object.notIn))
                        throw TypeError(".buf.validate.UInt64Rules.notIn: array expected");
                    message.notIn = [];
                    for (let i = 0; i < object.notIn.length; ++i)
                        if ($util.Long)
                            (message.notIn[i] = $util.Long.fromValue(object.notIn[i])).unsigned = true;
                        else if (typeof object.notIn[i] === "string")
                            message.notIn[i] = parseInt(object.notIn[i], 10);
                        else if (typeof object.notIn[i] === "number")
                            message.notIn[i] = object.notIn[i];
                        else if (typeof object.notIn[i] === "object")
                            message.notIn[i] = new $util.LongBits(object.notIn[i].low >>> 0, object.notIn[i].high >>> 0).toNumber(true);
                }
                return message;
            };

            /**
             * Creates a plain object from a UInt64Rules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.UInt64Rules
             * @static
             * @param {buf.validate.UInt64Rules} message UInt64Rules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UInt64Rules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object["in"] = [];
                    object.notIn = [];
                }
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    if (typeof message["const"] === "number")
                        object["const"] = options.longs === String ? String(message["const"]) : message["const"];
                    else
                        object["const"] = options.longs === String ? $util.Long.prototype.toString.call(message["const"]) : options.longs === Number ? new $util.LongBits(message["const"].low >>> 0, message["const"].high >>> 0).toNumber(true) : message["const"];
                    if (options.oneofs)
                        object._const = "const";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    if (typeof message.lt === "number")
                        object.lt = options.longs === String ? String(message.lt) : message.lt;
                    else
                        object.lt = options.longs === String ? $util.Long.prototype.toString.call(message.lt) : options.longs === Number ? new $util.LongBits(message.lt.low >>> 0, message.lt.high >>> 0).toNumber(true) : message.lt;
                    if (options.oneofs)
                        object.lessThan = "lt";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (typeof message.lte === "number")
                        object.lte = options.longs === String ? String(message.lte) : message.lte;
                    else
                        object.lte = options.longs === String ? $util.Long.prototype.toString.call(message.lte) : options.longs === Number ? new $util.LongBits(message.lte.low >>> 0, message.lte.high >>> 0).toNumber(true) : message.lte;
                    if (options.oneofs)
                        object.lessThan = "lte";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    if (typeof message.gt === "number")
                        object.gt = options.longs === String ? String(message.gt) : message.gt;
                    else
                        object.gt = options.longs === String ? $util.Long.prototype.toString.call(message.gt) : options.longs === Number ? new $util.LongBits(message.gt.low >>> 0, message.gt.high >>> 0).toNumber(true) : message.gt;
                    if (options.oneofs)
                        object.greaterThan = "gt";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (typeof message.gte === "number")
                        object.gte = options.longs === String ? String(message.gte) : message.gte;
                    else
                        object.gte = options.longs === String ? $util.Long.prototype.toString.call(message.gte) : options.longs === Number ? new $util.LongBits(message.gte.low >>> 0, message.gte.high >>> 0).toNumber(true) : message.gte;
                    if (options.oneofs)
                        object.greaterThan = "gte";
                }
                if (message["in"] && message["in"].length) {
                    object["in"] = [];
                    for (let j = 0; j < message["in"].length; ++j)
                        if (typeof message["in"][j] === "number")
                            object["in"][j] = options.longs === String ? String(message["in"][j]) : message["in"][j];
                        else
                            object["in"][j] = options.longs === String ? $util.Long.prototype.toString.call(message["in"][j]) : options.longs === Number ? new $util.LongBits(message["in"][j].low >>> 0, message["in"][j].high >>> 0).toNumber(true) : message["in"][j];
                }
                if (message.notIn && message.notIn.length) {
                    object.notIn = [];
                    for (let j = 0; j < message.notIn.length; ++j)
                        if (typeof message.notIn[j] === "number")
                            object.notIn[j] = options.longs === String ? String(message.notIn[j]) : message.notIn[j];
                        else
                            object.notIn[j] = options.longs === String ? $util.Long.prototype.toString.call(message.notIn[j]) : options.longs === Number ? new $util.LongBits(message.notIn[j].low >>> 0, message.notIn[j].high >>> 0).toNumber(true) : message.notIn[j];
                }
                return object;
            };

            /**
             * Converts this UInt64Rules to JSON.
             * @function toJSON
             * @memberof buf.validate.UInt64Rules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UInt64Rules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UInt64Rules
             * @function getTypeUrl
             * @memberof buf.validate.UInt64Rules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UInt64Rules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.UInt64Rules";
            };

            return UInt64Rules;
        })();

        validate.SInt32Rules = (function() {

            /**
             * Properties of a SInt32Rules.
             * @memberof buf.validate
             * @interface ISInt32Rules
             * @property {number|null} ["const"] SInt32Rules const
             * @property {number|null} [lt] SInt32Rules lt
             * @property {number|null} [lte] SInt32Rules lte
             * @property {number|null} [gt] SInt32Rules gt
             * @property {number|null} [gte] SInt32Rules gte
             * @property {Array.<number>|null} ["in"] SInt32Rules in
             * @property {Array.<number>|null} [notIn] SInt32Rules notIn
             */

            /**
             * Constructs a new SInt32Rules.
             * @memberof buf.validate
             * @classdesc Represents a SInt32Rules.
             * @implements ISInt32Rules
             * @constructor
             * @param {buf.validate.ISInt32Rules=} [properties] Properties to set
             */
            function SInt32Rules(properties) {
                this["in"] = [];
                this.notIn = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SInt32Rules const.
             * @member {number|null|undefined} const
             * @memberof buf.validate.SInt32Rules
             * @instance
             */
            SInt32Rules.prototype["const"] = null;

            /**
             * SInt32Rules lt.
             * @member {number|null|undefined} lt
             * @memberof buf.validate.SInt32Rules
             * @instance
             */
            SInt32Rules.prototype.lt = null;

            /**
             * SInt32Rules lte.
             * @member {number|null|undefined} lte
             * @memberof buf.validate.SInt32Rules
             * @instance
             */
            SInt32Rules.prototype.lte = null;

            /**
             * SInt32Rules gt.
             * @member {number|null|undefined} gt
             * @memberof buf.validate.SInt32Rules
             * @instance
             */
            SInt32Rules.prototype.gt = null;

            /**
             * SInt32Rules gte.
             * @member {number|null|undefined} gte
             * @memberof buf.validate.SInt32Rules
             * @instance
             */
            SInt32Rules.prototype.gte = null;

            /**
             * SInt32Rules in.
             * @member {Array.<number>} in
             * @memberof buf.validate.SInt32Rules
             * @instance
             */
            SInt32Rules.prototype["in"] = $util.emptyArray;

            /**
             * SInt32Rules notIn.
             * @member {Array.<number>} notIn
             * @memberof buf.validate.SInt32Rules
             * @instance
             */
            SInt32Rules.prototype.notIn = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * SInt32Rules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.SInt32Rules
             * @instance
             */
            Object.defineProperty(SInt32Rules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * SInt32Rules lessThan.
             * @member {"lt"|"lte"|undefined} lessThan
             * @memberof buf.validate.SInt32Rules
             * @instance
             */
            Object.defineProperty(SInt32Rules.prototype, "lessThan", {
                get: $util.oneOfGetter($oneOfFields = ["lt", "lte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * SInt32Rules greaterThan.
             * @member {"gt"|"gte"|undefined} greaterThan
             * @memberof buf.validate.SInt32Rules
             * @instance
             */
            Object.defineProperty(SInt32Rules.prototype, "greaterThan", {
                get: $util.oneOfGetter($oneOfFields = ["gt", "gte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new SInt32Rules instance using the specified properties.
             * @function create
             * @memberof buf.validate.SInt32Rules
             * @static
             * @param {buf.validate.ISInt32Rules=} [properties] Properties to set
             * @returns {buf.validate.SInt32Rules} SInt32Rules instance
             */
            SInt32Rules.create = function create(properties) {
                return new SInt32Rules(properties);
            };

            /**
             * Encodes the specified SInt32Rules message. Does not implicitly {@link buf.validate.SInt32Rules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.SInt32Rules
             * @static
             * @param {buf.validate.ISInt32Rules} message SInt32Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SInt32Rules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    writer.uint32(/* id 1, wireType 0 =*/8).sint32(message["const"]);
                if (message.lt != null && Object.hasOwnProperty.call(message, "lt"))
                    writer.uint32(/* id 2, wireType 0 =*/16).sint32(message.lt);
                if (message.lte != null && Object.hasOwnProperty.call(message, "lte"))
                    writer.uint32(/* id 3, wireType 0 =*/24).sint32(message.lte);
                if (message.gt != null && Object.hasOwnProperty.call(message, "gt"))
                    writer.uint32(/* id 4, wireType 0 =*/32).sint32(message.gt);
                if (message.gte != null && Object.hasOwnProperty.call(message, "gte"))
                    writer.uint32(/* id 5, wireType 0 =*/40).sint32(message.gte);
                if (message["in"] != null && message["in"].length) {
                    writer.uint32(/* id 6, wireType 2 =*/50).fork();
                    for (let i = 0; i < message["in"].length; ++i)
                        writer.sint32(message["in"][i]);
                    writer.ldelim();
                }
                if (message.notIn != null && message.notIn.length) {
                    writer.uint32(/* id 7, wireType 2 =*/58).fork();
                    for (let i = 0; i < message.notIn.length; ++i)
                        writer.sint32(message.notIn[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified SInt32Rules message, length delimited. Does not implicitly {@link buf.validate.SInt32Rules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.SInt32Rules
             * @static
             * @param {buf.validate.ISInt32Rules} message SInt32Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SInt32Rules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SInt32Rules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.SInt32Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.SInt32Rules} SInt32Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SInt32Rules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.SInt32Rules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message["const"] = reader.sint32();
                            break;
                        }
                    case 2: {
                            message.lt = reader.sint32();
                            break;
                        }
                    case 3: {
                            message.lte = reader.sint32();
                            break;
                        }
                    case 4: {
                            message.gt = reader.sint32();
                            break;
                        }
                    case 5: {
                            message.gte = reader.sint32();
                            break;
                        }
                    case 6: {
                            if (!(message["in"] && message["in"].length))
                                message["in"] = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message["in"].push(reader.sint32());
                            } else
                                message["in"].push(reader.sint32());
                            break;
                        }
                    case 7: {
                            if (!(message.notIn && message.notIn.length))
                                message.notIn = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.notIn.push(reader.sint32());
                            } else
                                message.notIn.push(reader.sint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SInt32Rules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.SInt32Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.SInt32Rules} SInt32Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SInt32Rules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SInt32Rules message.
             * @function verify
             * @memberof buf.validate.SInt32Rules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SInt32Rules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    if (!$util.isInteger(message["const"]))
                        return "const: integer expected";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lt))
                        return "lt: integer expected";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (properties.lessThan === 1)
                        return "lessThan: multiple values";
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lte))
                        return "lte: integer expected";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gt))
                        return "gt: integer expected";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (properties.greaterThan === 1)
                        return "greaterThan: multiple values";
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gte))
                        return "gte: integer expected";
                }
                if (message["in"] != null && message.hasOwnProperty("in")) {
                    if (!Array.isArray(message["in"]))
                        return "in: array expected";
                    for (let i = 0; i < message["in"].length; ++i)
                        if (!$util.isInteger(message["in"][i]))
                            return "in: integer[] expected";
                }
                if (message.notIn != null && message.hasOwnProperty("notIn")) {
                    if (!Array.isArray(message.notIn))
                        return "notIn: array expected";
                    for (let i = 0; i < message.notIn.length; ++i)
                        if (!$util.isInteger(message.notIn[i]))
                            return "notIn: integer[] expected";
                }
                return null;
            };

            /**
             * Creates a SInt32Rules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.SInt32Rules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.SInt32Rules} SInt32Rules
             */
            SInt32Rules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.SInt32Rules)
                    return object;
                let message = new $root.buf.validate.SInt32Rules();
                if (object["const"] != null)
                    message["const"] = object["const"] | 0;
                if (object.lt != null)
                    message.lt = object.lt | 0;
                if (object.lte != null)
                    message.lte = object.lte | 0;
                if (object.gt != null)
                    message.gt = object.gt | 0;
                if (object.gte != null)
                    message.gte = object.gte | 0;
                if (object["in"]) {
                    if (!Array.isArray(object["in"]))
                        throw TypeError(".buf.validate.SInt32Rules.in: array expected");
                    message["in"] = [];
                    for (let i = 0; i < object["in"].length; ++i)
                        message["in"][i] = object["in"][i] | 0;
                }
                if (object.notIn) {
                    if (!Array.isArray(object.notIn))
                        throw TypeError(".buf.validate.SInt32Rules.notIn: array expected");
                    message.notIn = [];
                    for (let i = 0; i < object.notIn.length; ++i)
                        message.notIn[i] = object.notIn[i] | 0;
                }
                return message;
            };

            /**
             * Creates a plain object from a SInt32Rules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.SInt32Rules
             * @static
             * @param {buf.validate.SInt32Rules} message SInt32Rules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SInt32Rules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object["in"] = [];
                    object.notIn = [];
                }
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    object["const"] = message["const"];
                    if (options.oneofs)
                        object._const = "const";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    object.lt = message.lt;
                    if (options.oneofs)
                        object.lessThan = "lt";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    object.lte = message.lte;
                    if (options.oneofs)
                        object.lessThan = "lte";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    object.gt = message.gt;
                    if (options.oneofs)
                        object.greaterThan = "gt";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    object.gte = message.gte;
                    if (options.oneofs)
                        object.greaterThan = "gte";
                }
                if (message["in"] && message["in"].length) {
                    object["in"] = [];
                    for (let j = 0; j < message["in"].length; ++j)
                        object["in"][j] = message["in"][j];
                }
                if (message.notIn && message.notIn.length) {
                    object.notIn = [];
                    for (let j = 0; j < message.notIn.length; ++j)
                        object.notIn[j] = message.notIn[j];
                }
                return object;
            };

            /**
             * Converts this SInt32Rules to JSON.
             * @function toJSON
             * @memberof buf.validate.SInt32Rules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SInt32Rules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SInt32Rules
             * @function getTypeUrl
             * @memberof buf.validate.SInt32Rules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SInt32Rules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.SInt32Rules";
            };

            return SInt32Rules;
        })();

        validate.SInt64Rules = (function() {

            /**
             * Properties of a SInt64Rules.
             * @memberof buf.validate
             * @interface ISInt64Rules
             * @property {number|Long|null} ["const"] SInt64Rules const
             * @property {number|Long|null} [lt] SInt64Rules lt
             * @property {number|Long|null} [lte] SInt64Rules lte
             * @property {number|Long|null} [gt] SInt64Rules gt
             * @property {number|Long|null} [gte] SInt64Rules gte
             * @property {Array.<number|Long>|null} ["in"] SInt64Rules in
             * @property {Array.<number|Long>|null} [notIn] SInt64Rules notIn
             */

            /**
             * Constructs a new SInt64Rules.
             * @memberof buf.validate
             * @classdesc Represents a SInt64Rules.
             * @implements ISInt64Rules
             * @constructor
             * @param {buf.validate.ISInt64Rules=} [properties] Properties to set
             */
            function SInt64Rules(properties) {
                this["in"] = [];
                this.notIn = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SInt64Rules const.
             * @member {number|Long|null|undefined} const
             * @memberof buf.validate.SInt64Rules
             * @instance
             */
            SInt64Rules.prototype["const"] = null;

            /**
             * SInt64Rules lt.
             * @member {number|Long|null|undefined} lt
             * @memberof buf.validate.SInt64Rules
             * @instance
             */
            SInt64Rules.prototype.lt = null;

            /**
             * SInt64Rules lte.
             * @member {number|Long|null|undefined} lte
             * @memberof buf.validate.SInt64Rules
             * @instance
             */
            SInt64Rules.prototype.lte = null;

            /**
             * SInt64Rules gt.
             * @member {number|Long|null|undefined} gt
             * @memberof buf.validate.SInt64Rules
             * @instance
             */
            SInt64Rules.prototype.gt = null;

            /**
             * SInt64Rules gte.
             * @member {number|Long|null|undefined} gte
             * @memberof buf.validate.SInt64Rules
             * @instance
             */
            SInt64Rules.prototype.gte = null;

            /**
             * SInt64Rules in.
             * @member {Array.<number|Long>} in
             * @memberof buf.validate.SInt64Rules
             * @instance
             */
            SInt64Rules.prototype["in"] = $util.emptyArray;

            /**
             * SInt64Rules notIn.
             * @member {Array.<number|Long>} notIn
             * @memberof buf.validate.SInt64Rules
             * @instance
             */
            SInt64Rules.prototype.notIn = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * SInt64Rules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.SInt64Rules
             * @instance
             */
            Object.defineProperty(SInt64Rules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * SInt64Rules lessThan.
             * @member {"lt"|"lte"|undefined} lessThan
             * @memberof buf.validate.SInt64Rules
             * @instance
             */
            Object.defineProperty(SInt64Rules.prototype, "lessThan", {
                get: $util.oneOfGetter($oneOfFields = ["lt", "lte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * SInt64Rules greaterThan.
             * @member {"gt"|"gte"|undefined} greaterThan
             * @memberof buf.validate.SInt64Rules
             * @instance
             */
            Object.defineProperty(SInt64Rules.prototype, "greaterThan", {
                get: $util.oneOfGetter($oneOfFields = ["gt", "gte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new SInt64Rules instance using the specified properties.
             * @function create
             * @memberof buf.validate.SInt64Rules
             * @static
             * @param {buf.validate.ISInt64Rules=} [properties] Properties to set
             * @returns {buf.validate.SInt64Rules} SInt64Rules instance
             */
            SInt64Rules.create = function create(properties) {
                return new SInt64Rules(properties);
            };

            /**
             * Encodes the specified SInt64Rules message. Does not implicitly {@link buf.validate.SInt64Rules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.SInt64Rules
             * @static
             * @param {buf.validate.ISInt64Rules} message SInt64Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SInt64Rules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    writer.uint32(/* id 1, wireType 0 =*/8).sint64(message["const"]);
                if (message.lt != null && Object.hasOwnProperty.call(message, "lt"))
                    writer.uint32(/* id 2, wireType 0 =*/16).sint64(message.lt);
                if (message.lte != null && Object.hasOwnProperty.call(message, "lte"))
                    writer.uint32(/* id 3, wireType 0 =*/24).sint64(message.lte);
                if (message.gt != null && Object.hasOwnProperty.call(message, "gt"))
                    writer.uint32(/* id 4, wireType 0 =*/32).sint64(message.gt);
                if (message.gte != null && Object.hasOwnProperty.call(message, "gte"))
                    writer.uint32(/* id 5, wireType 0 =*/40).sint64(message.gte);
                if (message["in"] != null && message["in"].length) {
                    writer.uint32(/* id 6, wireType 2 =*/50).fork();
                    for (let i = 0; i < message["in"].length; ++i)
                        writer.sint64(message["in"][i]);
                    writer.ldelim();
                }
                if (message.notIn != null && message.notIn.length) {
                    writer.uint32(/* id 7, wireType 2 =*/58).fork();
                    for (let i = 0; i < message.notIn.length; ++i)
                        writer.sint64(message.notIn[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified SInt64Rules message, length delimited. Does not implicitly {@link buf.validate.SInt64Rules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.SInt64Rules
             * @static
             * @param {buf.validate.ISInt64Rules} message SInt64Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SInt64Rules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SInt64Rules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.SInt64Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.SInt64Rules} SInt64Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SInt64Rules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.SInt64Rules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message["const"] = reader.sint64();
                            break;
                        }
                    case 2: {
                            message.lt = reader.sint64();
                            break;
                        }
                    case 3: {
                            message.lte = reader.sint64();
                            break;
                        }
                    case 4: {
                            message.gt = reader.sint64();
                            break;
                        }
                    case 5: {
                            message.gte = reader.sint64();
                            break;
                        }
                    case 6: {
                            if (!(message["in"] && message["in"].length))
                                message["in"] = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message["in"].push(reader.sint64());
                            } else
                                message["in"].push(reader.sint64());
                            break;
                        }
                    case 7: {
                            if (!(message.notIn && message.notIn.length))
                                message.notIn = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.notIn.push(reader.sint64());
                            } else
                                message.notIn.push(reader.sint64());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SInt64Rules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.SInt64Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.SInt64Rules} SInt64Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SInt64Rules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SInt64Rules message.
             * @function verify
             * @memberof buf.validate.SInt64Rules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SInt64Rules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    if (!$util.isInteger(message["const"]) && !(message["const"] && $util.isInteger(message["const"].low) && $util.isInteger(message["const"].high)))
                        return "const: integer|Long expected";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lt) && !(message.lt && $util.isInteger(message.lt.low) && $util.isInteger(message.lt.high)))
                        return "lt: integer|Long expected";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (properties.lessThan === 1)
                        return "lessThan: multiple values";
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lte) && !(message.lte && $util.isInteger(message.lte.low) && $util.isInteger(message.lte.high)))
                        return "lte: integer|Long expected";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gt) && !(message.gt && $util.isInteger(message.gt.low) && $util.isInteger(message.gt.high)))
                        return "gt: integer|Long expected";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (properties.greaterThan === 1)
                        return "greaterThan: multiple values";
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gte) && !(message.gte && $util.isInteger(message.gte.low) && $util.isInteger(message.gte.high)))
                        return "gte: integer|Long expected";
                }
                if (message["in"] != null && message.hasOwnProperty("in")) {
                    if (!Array.isArray(message["in"]))
                        return "in: array expected";
                    for (let i = 0; i < message["in"].length; ++i)
                        if (!$util.isInteger(message["in"][i]) && !(message["in"][i] && $util.isInteger(message["in"][i].low) && $util.isInteger(message["in"][i].high)))
                            return "in: integer|Long[] expected";
                }
                if (message.notIn != null && message.hasOwnProperty("notIn")) {
                    if (!Array.isArray(message.notIn))
                        return "notIn: array expected";
                    for (let i = 0; i < message.notIn.length; ++i)
                        if (!$util.isInteger(message.notIn[i]) && !(message.notIn[i] && $util.isInteger(message.notIn[i].low) && $util.isInteger(message.notIn[i].high)))
                            return "notIn: integer|Long[] expected";
                }
                return null;
            };

            /**
             * Creates a SInt64Rules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.SInt64Rules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.SInt64Rules} SInt64Rules
             */
            SInt64Rules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.SInt64Rules)
                    return object;
                let message = new $root.buf.validate.SInt64Rules();
                if (object["const"] != null)
                    if ($util.Long)
                        (message["const"] = $util.Long.fromValue(object["const"])).unsigned = false;
                    else if (typeof object["const"] === "string")
                        message["const"] = parseInt(object["const"], 10);
                    else if (typeof object["const"] === "number")
                        message["const"] = object["const"];
                    else if (typeof object["const"] === "object")
                        message["const"] = new $util.LongBits(object["const"].low >>> 0, object["const"].high >>> 0).toNumber();
                if (object.lt != null)
                    if ($util.Long)
                        (message.lt = $util.Long.fromValue(object.lt)).unsigned = false;
                    else if (typeof object.lt === "string")
                        message.lt = parseInt(object.lt, 10);
                    else if (typeof object.lt === "number")
                        message.lt = object.lt;
                    else if (typeof object.lt === "object")
                        message.lt = new $util.LongBits(object.lt.low >>> 0, object.lt.high >>> 0).toNumber();
                if (object.lte != null)
                    if ($util.Long)
                        (message.lte = $util.Long.fromValue(object.lte)).unsigned = false;
                    else if (typeof object.lte === "string")
                        message.lte = parseInt(object.lte, 10);
                    else if (typeof object.lte === "number")
                        message.lte = object.lte;
                    else if (typeof object.lte === "object")
                        message.lte = new $util.LongBits(object.lte.low >>> 0, object.lte.high >>> 0).toNumber();
                if (object.gt != null)
                    if ($util.Long)
                        (message.gt = $util.Long.fromValue(object.gt)).unsigned = false;
                    else if (typeof object.gt === "string")
                        message.gt = parseInt(object.gt, 10);
                    else if (typeof object.gt === "number")
                        message.gt = object.gt;
                    else if (typeof object.gt === "object")
                        message.gt = new $util.LongBits(object.gt.low >>> 0, object.gt.high >>> 0).toNumber();
                if (object.gte != null)
                    if ($util.Long)
                        (message.gte = $util.Long.fromValue(object.gte)).unsigned = false;
                    else if (typeof object.gte === "string")
                        message.gte = parseInt(object.gte, 10);
                    else if (typeof object.gte === "number")
                        message.gte = object.gte;
                    else if (typeof object.gte === "object")
                        message.gte = new $util.LongBits(object.gte.low >>> 0, object.gte.high >>> 0).toNumber();
                if (object["in"]) {
                    if (!Array.isArray(object["in"]))
                        throw TypeError(".buf.validate.SInt64Rules.in: array expected");
                    message["in"] = [];
                    for (let i = 0; i < object["in"].length; ++i)
                        if ($util.Long)
                            (message["in"][i] = $util.Long.fromValue(object["in"][i])).unsigned = false;
                        else if (typeof object["in"][i] === "string")
                            message["in"][i] = parseInt(object["in"][i], 10);
                        else if (typeof object["in"][i] === "number")
                            message["in"][i] = object["in"][i];
                        else if (typeof object["in"][i] === "object")
                            message["in"][i] = new $util.LongBits(object["in"][i].low >>> 0, object["in"][i].high >>> 0).toNumber();
                }
                if (object.notIn) {
                    if (!Array.isArray(object.notIn))
                        throw TypeError(".buf.validate.SInt64Rules.notIn: array expected");
                    message.notIn = [];
                    for (let i = 0; i < object.notIn.length; ++i)
                        if ($util.Long)
                            (message.notIn[i] = $util.Long.fromValue(object.notIn[i])).unsigned = false;
                        else if (typeof object.notIn[i] === "string")
                            message.notIn[i] = parseInt(object.notIn[i], 10);
                        else if (typeof object.notIn[i] === "number")
                            message.notIn[i] = object.notIn[i];
                        else if (typeof object.notIn[i] === "object")
                            message.notIn[i] = new $util.LongBits(object.notIn[i].low >>> 0, object.notIn[i].high >>> 0).toNumber();
                }
                return message;
            };

            /**
             * Creates a plain object from a SInt64Rules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.SInt64Rules
             * @static
             * @param {buf.validate.SInt64Rules} message SInt64Rules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SInt64Rules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object["in"] = [];
                    object.notIn = [];
                }
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    if (typeof message["const"] === "number")
                        object["const"] = options.longs === String ? String(message["const"]) : message["const"];
                    else
                        object["const"] = options.longs === String ? $util.Long.prototype.toString.call(message["const"]) : options.longs === Number ? new $util.LongBits(message["const"].low >>> 0, message["const"].high >>> 0).toNumber() : message["const"];
                    if (options.oneofs)
                        object._const = "const";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    if (typeof message.lt === "number")
                        object.lt = options.longs === String ? String(message.lt) : message.lt;
                    else
                        object.lt = options.longs === String ? $util.Long.prototype.toString.call(message.lt) : options.longs === Number ? new $util.LongBits(message.lt.low >>> 0, message.lt.high >>> 0).toNumber() : message.lt;
                    if (options.oneofs)
                        object.lessThan = "lt";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (typeof message.lte === "number")
                        object.lte = options.longs === String ? String(message.lte) : message.lte;
                    else
                        object.lte = options.longs === String ? $util.Long.prototype.toString.call(message.lte) : options.longs === Number ? new $util.LongBits(message.lte.low >>> 0, message.lte.high >>> 0).toNumber() : message.lte;
                    if (options.oneofs)
                        object.lessThan = "lte";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    if (typeof message.gt === "number")
                        object.gt = options.longs === String ? String(message.gt) : message.gt;
                    else
                        object.gt = options.longs === String ? $util.Long.prototype.toString.call(message.gt) : options.longs === Number ? new $util.LongBits(message.gt.low >>> 0, message.gt.high >>> 0).toNumber() : message.gt;
                    if (options.oneofs)
                        object.greaterThan = "gt";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (typeof message.gte === "number")
                        object.gte = options.longs === String ? String(message.gte) : message.gte;
                    else
                        object.gte = options.longs === String ? $util.Long.prototype.toString.call(message.gte) : options.longs === Number ? new $util.LongBits(message.gte.low >>> 0, message.gte.high >>> 0).toNumber() : message.gte;
                    if (options.oneofs)
                        object.greaterThan = "gte";
                }
                if (message["in"] && message["in"].length) {
                    object["in"] = [];
                    for (let j = 0; j < message["in"].length; ++j)
                        if (typeof message["in"][j] === "number")
                            object["in"][j] = options.longs === String ? String(message["in"][j]) : message["in"][j];
                        else
                            object["in"][j] = options.longs === String ? $util.Long.prototype.toString.call(message["in"][j]) : options.longs === Number ? new $util.LongBits(message["in"][j].low >>> 0, message["in"][j].high >>> 0).toNumber() : message["in"][j];
                }
                if (message.notIn && message.notIn.length) {
                    object.notIn = [];
                    for (let j = 0; j < message.notIn.length; ++j)
                        if (typeof message.notIn[j] === "number")
                            object.notIn[j] = options.longs === String ? String(message.notIn[j]) : message.notIn[j];
                        else
                            object.notIn[j] = options.longs === String ? $util.Long.prototype.toString.call(message.notIn[j]) : options.longs === Number ? new $util.LongBits(message.notIn[j].low >>> 0, message.notIn[j].high >>> 0).toNumber() : message.notIn[j];
                }
                return object;
            };

            /**
             * Converts this SInt64Rules to JSON.
             * @function toJSON
             * @memberof buf.validate.SInt64Rules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SInt64Rules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SInt64Rules
             * @function getTypeUrl
             * @memberof buf.validate.SInt64Rules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SInt64Rules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.SInt64Rules";
            };

            return SInt64Rules;
        })();

        validate.Fixed32Rules = (function() {

            /**
             * Properties of a Fixed32Rules.
             * @memberof buf.validate
             * @interface IFixed32Rules
             * @property {number|null} ["const"] Fixed32Rules const
             * @property {number|null} [lt] Fixed32Rules lt
             * @property {number|null} [lte] Fixed32Rules lte
             * @property {number|null} [gt] Fixed32Rules gt
             * @property {number|null} [gte] Fixed32Rules gte
             * @property {Array.<number>|null} ["in"] Fixed32Rules in
             * @property {Array.<number>|null} [notIn] Fixed32Rules notIn
             */

            /**
             * Constructs a new Fixed32Rules.
             * @memberof buf.validate
             * @classdesc Represents a Fixed32Rules.
             * @implements IFixed32Rules
             * @constructor
             * @param {buf.validate.IFixed32Rules=} [properties] Properties to set
             */
            function Fixed32Rules(properties) {
                this["in"] = [];
                this.notIn = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Fixed32Rules const.
             * @member {number|null|undefined} const
             * @memberof buf.validate.Fixed32Rules
             * @instance
             */
            Fixed32Rules.prototype["const"] = null;

            /**
             * Fixed32Rules lt.
             * @member {number|null|undefined} lt
             * @memberof buf.validate.Fixed32Rules
             * @instance
             */
            Fixed32Rules.prototype.lt = null;

            /**
             * Fixed32Rules lte.
             * @member {number|null|undefined} lte
             * @memberof buf.validate.Fixed32Rules
             * @instance
             */
            Fixed32Rules.prototype.lte = null;

            /**
             * Fixed32Rules gt.
             * @member {number|null|undefined} gt
             * @memberof buf.validate.Fixed32Rules
             * @instance
             */
            Fixed32Rules.prototype.gt = null;

            /**
             * Fixed32Rules gte.
             * @member {number|null|undefined} gte
             * @memberof buf.validate.Fixed32Rules
             * @instance
             */
            Fixed32Rules.prototype.gte = null;

            /**
             * Fixed32Rules in.
             * @member {Array.<number>} in
             * @memberof buf.validate.Fixed32Rules
             * @instance
             */
            Fixed32Rules.prototype["in"] = $util.emptyArray;

            /**
             * Fixed32Rules notIn.
             * @member {Array.<number>} notIn
             * @memberof buf.validate.Fixed32Rules
             * @instance
             */
            Fixed32Rules.prototype.notIn = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Fixed32Rules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.Fixed32Rules
             * @instance
             */
            Object.defineProperty(Fixed32Rules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Fixed32Rules lessThan.
             * @member {"lt"|"lte"|undefined} lessThan
             * @memberof buf.validate.Fixed32Rules
             * @instance
             */
            Object.defineProperty(Fixed32Rules.prototype, "lessThan", {
                get: $util.oneOfGetter($oneOfFields = ["lt", "lte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Fixed32Rules greaterThan.
             * @member {"gt"|"gte"|undefined} greaterThan
             * @memberof buf.validate.Fixed32Rules
             * @instance
             */
            Object.defineProperty(Fixed32Rules.prototype, "greaterThan", {
                get: $util.oneOfGetter($oneOfFields = ["gt", "gte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new Fixed32Rules instance using the specified properties.
             * @function create
             * @memberof buf.validate.Fixed32Rules
             * @static
             * @param {buf.validate.IFixed32Rules=} [properties] Properties to set
             * @returns {buf.validate.Fixed32Rules} Fixed32Rules instance
             */
            Fixed32Rules.create = function create(properties) {
                return new Fixed32Rules(properties);
            };

            /**
             * Encodes the specified Fixed32Rules message. Does not implicitly {@link buf.validate.Fixed32Rules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.Fixed32Rules
             * @static
             * @param {buf.validate.IFixed32Rules} message Fixed32Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Fixed32Rules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    writer.uint32(/* id 1, wireType 5 =*/13).fixed32(message["const"]);
                if (message.lt != null && Object.hasOwnProperty.call(message, "lt"))
                    writer.uint32(/* id 2, wireType 5 =*/21).fixed32(message.lt);
                if (message.lte != null && Object.hasOwnProperty.call(message, "lte"))
                    writer.uint32(/* id 3, wireType 5 =*/29).fixed32(message.lte);
                if (message.gt != null && Object.hasOwnProperty.call(message, "gt"))
                    writer.uint32(/* id 4, wireType 5 =*/37).fixed32(message.gt);
                if (message.gte != null && Object.hasOwnProperty.call(message, "gte"))
                    writer.uint32(/* id 5, wireType 5 =*/45).fixed32(message.gte);
                if (message["in"] != null && message["in"].length) {
                    writer.uint32(/* id 6, wireType 2 =*/50).fork();
                    for (let i = 0; i < message["in"].length; ++i)
                        writer.fixed32(message["in"][i]);
                    writer.ldelim();
                }
                if (message.notIn != null && message.notIn.length) {
                    writer.uint32(/* id 7, wireType 2 =*/58).fork();
                    for (let i = 0; i < message.notIn.length; ++i)
                        writer.fixed32(message.notIn[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified Fixed32Rules message, length delimited. Does not implicitly {@link buf.validate.Fixed32Rules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.Fixed32Rules
             * @static
             * @param {buf.validate.IFixed32Rules} message Fixed32Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Fixed32Rules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Fixed32Rules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.Fixed32Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.Fixed32Rules} Fixed32Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Fixed32Rules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.Fixed32Rules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message["const"] = reader.fixed32();
                            break;
                        }
                    case 2: {
                            message.lt = reader.fixed32();
                            break;
                        }
                    case 3: {
                            message.lte = reader.fixed32();
                            break;
                        }
                    case 4: {
                            message.gt = reader.fixed32();
                            break;
                        }
                    case 5: {
                            message.gte = reader.fixed32();
                            break;
                        }
                    case 6: {
                            if (!(message["in"] && message["in"].length))
                                message["in"] = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message["in"].push(reader.fixed32());
                            } else
                                message["in"].push(reader.fixed32());
                            break;
                        }
                    case 7: {
                            if (!(message.notIn && message.notIn.length))
                                message.notIn = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.notIn.push(reader.fixed32());
                            } else
                                message.notIn.push(reader.fixed32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Fixed32Rules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.Fixed32Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.Fixed32Rules} Fixed32Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Fixed32Rules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Fixed32Rules message.
             * @function verify
             * @memberof buf.validate.Fixed32Rules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Fixed32Rules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    if (!$util.isInteger(message["const"]))
                        return "const: integer expected";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lt))
                        return "lt: integer expected";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (properties.lessThan === 1)
                        return "lessThan: multiple values";
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lte))
                        return "lte: integer expected";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gt))
                        return "gt: integer expected";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (properties.greaterThan === 1)
                        return "greaterThan: multiple values";
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gte))
                        return "gte: integer expected";
                }
                if (message["in"] != null && message.hasOwnProperty("in")) {
                    if (!Array.isArray(message["in"]))
                        return "in: array expected";
                    for (let i = 0; i < message["in"].length; ++i)
                        if (!$util.isInteger(message["in"][i]))
                            return "in: integer[] expected";
                }
                if (message.notIn != null && message.hasOwnProperty("notIn")) {
                    if (!Array.isArray(message.notIn))
                        return "notIn: array expected";
                    for (let i = 0; i < message.notIn.length; ++i)
                        if (!$util.isInteger(message.notIn[i]))
                            return "notIn: integer[] expected";
                }
                return null;
            };

            /**
             * Creates a Fixed32Rules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.Fixed32Rules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.Fixed32Rules} Fixed32Rules
             */
            Fixed32Rules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.Fixed32Rules)
                    return object;
                let message = new $root.buf.validate.Fixed32Rules();
                if (object["const"] != null)
                    message["const"] = object["const"] >>> 0;
                if (object.lt != null)
                    message.lt = object.lt >>> 0;
                if (object.lte != null)
                    message.lte = object.lte >>> 0;
                if (object.gt != null)
                    message.gt = object.gt >>> 0;
                if (object.gte != null)
                    message.gte = object.gte >>> 0;
                if (object["in"]) {
                    if (!Array.isArray(object["in"]))
                        throw TypeError(".buf.validate.Fixed32Rules.in: array expected");
                    message["in"] = [];
                    for (let i = 0; i < object["in"].length; ++i)
                        message["in"][i] = object["in"][i] >>> 0;
                }
                if (object.notIn) {
                    if (!Array.isArray(object.notIn))
                        throw TypeError(".buf.validate.Fixed32Rules.notIn: array expected");
                    message.notIn = [];
                    for (let i = 0; i < object.notIn.length; ++i)
                        message.notIn[i] = object.notIn[i] >>> 0;
                }
                return message;
            };

            /**
             * Creates a plain object from a Fixed32Rules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.Fixed32Rules
             * @static
             * @param {buf.validate.Fixed32Rules} message Fixed32Rules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Fixed32Rules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object["in"] = [];
                    object.notIn = [];
                }
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    object["const"] = message["const"];
                    if (options.oneofs)
                        object._const = "const";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    object.lt = message.lt;
                    if (options.oneofs)
                        object.lessThan = "lt";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    object.lte = message.lte;
                    if (options.oneofs)
                        object.lessThan = "lte";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    object.gt = message.gt;
                    if (options.oneofs)
                        object.greaterThan = "gt";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    object.gte = message.gte;
                    if (options.oneofs)
                        object.greaterThan = "gte";
                }
                if (message["in"] && message["in"].length) {
                    object["in"] = [];
                    for (let j = 0; j < message["in"].length; ++j)
                        object["in"][j] = message["in"][j];
                }
                if (message.notIn && message.notIn.length) {
                    object.notIn = [];
                    for (let j = 0; j < message.notIn.length; ++j)
                        object.notIn[j] = message.notIn[j];
                }
                return object;
            };

            /**
             * Converts this Fixed32Rules to JSON.
             * @function toJSON
             * @memberof buf.validate.Fixed32Rules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Fixed32Rules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Fixed32Rules
             * @function getTypeUrl
             * @memberof buf.validate.Fixed32Rules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Fixed32Rules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.Fixed32Rules";
            };

            return Fixed32Rules;
        })();

        validate.Fixed64Rules = (function() {

            /**
             * Properties of a Fixed64Rules.
             * @memberof buf.validate
             * @interface IFixed64Rules
             * @property {number|Long|null} ["const"] Fixed64Rules const
             * @property {number|Long|null} [lt] Fixed64Rules lt
             * @property {number|Long|null} [lte] Fixed64Rules lte
             * @property {number|Long|null} [gt] Fixed64Rules gt
             * @property {number|Long|null} [gte] Fixed64Rules gte
             * @property {Array.<number|Long>|null} ["in"] Fixed64Rules in
             * @property {Array.<number|Long>|null} [notIn] Fixed64Rules notIn
             */

            /**
             * Constructs a new Fixed64Rules.
             * @memberof buf.validate
             * @classdesc Represents a Fixed64Rules.
             * @implements IFixed64Rules
             * @constructor
             * @param {buf.validate.IFixed64Rules=} [properties] Properties to set
             */
            function Fixed64Rules(properties) {
                this["in"] = [];
                this.notIn = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Fixed64Rules const.
             * @member {number|Long|null|undefined} const
             * @memberof buf.validate.Fixed64Rules
             * @instance
             */
            Fixed64Rules.prototype["const"] = null;

            /**
             * Fixed64Rules lt.
             * @member {number|Long|null|undefined} lt
             * @memberof buf.validate.Fixed64Rules
             * @instance
             */
            Fixed64Rules.prototype.lt = null;

            /**
             * Fixed64Rules lte.
             * @member {number|Long|null|undefined} lte
             * @memberof buf.validate.Fixed64Rules
             * @instance
             */
            Fixed64Rules.prototype.lte = null;

            /**
             * Fixed64Rules gt.
             * @member {number|Long|null|undefined} gt
             * @memberof buf.validate.Fixed64Rules
             * @instance
             */
            Fixed64Rules.prototype.gt = null;

            /**
             * Fixed64Rules gte.
             * @member {number|Long|null|undefined} gte
             * @memberof buf.validate.Fixed64Rules
             * @instance
             */
            Fixed64Rules.prototype.gte = null;

            /**
             * Fixed64Rules in.
             * @member {Array.<number|Long>} in
             * @memberof buf.validate.Fixed64Rules
             * @instance
             */
            Fixed64Rules.prototype["in"] = $util.emptyArray;

            /**
             * Fixed64Rules notIn.
             * @member {Array.<number|Long>} notIn
             * @memberof buf.validate.Fixed64Rules
             * @instance
             */
            Fixed64Rules.prototype.notIn = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * Fixed64Rules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.Fixed64Rules
             * @instance
             */
            Object.defineProperty(Fixed64Rules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Fixed64Rules lessThan.
             * @member {"lt"|"lte"|undefined} lessThan
             * @memberof buf.validate.Fixed64Rules
             * @instance
             */
            Object.defineProperty(Fixed64Rules.prototype, "lessThan", {
                get: $util.oneOfGetter($oneOfFields = ["lt", "lte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Fixed64Rules greaterThan.
             * @member {"gt"|"gte"|undefined} greaterThan
             * @memberof buf.validate.Fixed64Rules
             * @instance
             */
            Object.defineProperty(Fixed64Rules.prototype, "greaterThan", {
                get: $util.oneOfGetter($oneOfFields = ["gt", "gte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new Fixed64Rules instance using the specified properties.
             * @function create
             * @memberof buf.validate.Fixed64Rules
             * @static
             * @param {buf.validate.IFixed64Rules=} [properties] Properties to set
             * @returns {buf.validate.Fixed64Rules} Fixed64Rules instance
             */
            Fixed64Rules.create = function create(properties) {
                return new Fixed64Rules(properties);
            };

            /**
             * Encodes the specified Fixed64Rules message. Does not implicitly {@link buf.validate.Fixed64Rules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.Fixed64Rules
             * @static
             * @param {buf.validate.IFixed64Rules} message Fixed64Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Fixed64Rules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    writer.uint32(/* id 1, wireType 1 =*/9).fixed64(message["const"]);
                if (message.lt != null && Object.hasOwnProperty.call(message, "lt"))
                    writer.uint32(/* id 2, wireType 1 =*/17).fixed64(message.lt);
                if (message.lte != null && Object.hasOwnProperty.call(message, "lte"))
                    writer.uint32(/* id 3, wireType 1 =*/25).fixed64(message.lte);
                if (message.gt != null && Object.hasOwnProperty.call(message, "gt"))
                    writer.uint32(/* id 4, wireType 1 =*/33).fixed64(message.gt);
                if (message.gte != null && Object.hasOwnProperty.call(message, "gte"))
                    writer.uint32(/* id 5, wireType 1 =*/41).fixed64(message.gte);
                if (message["in"] != null && message["in"].length) {
                    writer.uint32(/* id 6, wireType 2 =*/50).fork();
                    for (let i = 0; i < message["in"].length; ++i)
                        writer.fixed64(message["in"][i]);
                    writer.ldelim();
                }
                if (message.notIn != null && message.notIn.length) {
                    writer.uint32(/* id 7, wireType 2 =*/58).fork();
                    for (let i = 0; i < message.notIn.length; ++i)
                        writer.fixed64(message.notIn[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified Fixed64Rules message, length delimited. Does not implicitly {@link buf.validate.Fixed64Rules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.Fixed64Rules
             * @static
             * @param {buf.validate.IFixed64Rules} message Fixed64Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Fixed64Rules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Fixed64Rules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.Fixed64Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.Fixed64Rules} Fixed64Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Fixed64Rules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.Fixed64Rules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message["const"] = reader.fixed64();
                            break;
                        }
                    case 2: {
                            message.lt = reader.fixed64();
                            break;
                        }
                    case 3: {
                            message.lte = reader.fixed64();
                            break;
                        }
                    case 4: {
                            message.gt = reader.fixed64();
                            break;
                        }
                    case 5: {
                            message.gte = reader.fixed64();
                            break;
                        }
                    case 6: {
                            if (!(message["in"] && message["in"].length))
                                message["in"] = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message["in"].push(reader.fixed64());
                            } else
                                message["in"].push(reader.fixed64());
                            break;
                        }
                    case 7: {
                            if (!(message.notIn && message.notIn.length))
                                message.notIn = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.notIn.push(reader.fixed64());
                            } else
                                message.notIn.push(reader.fixed64());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Fixed64Rules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.Fixed64Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.Fixed64Rules} Fixed64Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Fixed64Rules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Fixed64Rules message.
             * @function verify
             * @memberof buf.validate.Fixed64Rules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Fixed64Rules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    if (!$util.isInteger(message["const"]) && !(message["const"] && $util.isInteger(message["const"].low) && $util.isInteger(message["const"].high)))
                        return "const: integer|Long expected";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lt) && !(message.lt && $util.isInteger(message.lt.low) && $util.isInteger(message.lt.high)))
                        return "lt: integer|Long expected";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (properties.lessThan === 1)
                        return "lessThan: multiple values";
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lte) && !(message.lte && $util.isInteger(message.lte.low) && $util.isInteger(message.lte.high)))
                        return "lte: integer|Long expected";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gt) && !(message.gt && $util.isInteger(message.gt.low) && $util.isInteger(message.gt.high)))
                        return "gt: integer|Long expected";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (properties.greaterThan === 1)
                        return "greaterThan: multiple values";
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gte) && !(message.gte && $util.isInteger(message.gte.low) && $util.isInteger(message.gte.high)))
                        return "gte: integer|Long expected";
                }
                if (message["in"] != null && message.hasOwnProperty("in")) {
                    if (!Array.isArray(message["in"]))
                        return "in: array expected";
                    for (let i = 0; i < message["in"].length; ++i)
                        if (!$util.isInteger(message["in"][i]) && !(message["in"][i] && $util.isInteger(message["in"][i].low) && $util.isInteger(message["in"][i].high)))
                            return "in: integer|Long[] expected";
                }
                if (message.notIn != null && message.hasOwnProperty("notIn")) {
                    if (!Array.isArray(message.notIn))
                        return "notIn: array expected";
                    for (let i = 0; i < message.notIn.length; ++i)
                        if (!$util.isInteger(message.notIn[i]) && !(message.notIn[i] && $util.isInteger(message.notIn[i].low) && $util.isInteger(message.notIn[i].high)))
                            return "notIn: integer|Long[] expected";
                }
                return null;
            };

            /**
             * Creates a Fixed64Rules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.Fixed64Rules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.Fixed64Rules} Fixed64Rules
             */
            Fixed64Rules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.Fixed64Rules)
                    return object;
                let message = new $root.buf.validate.Fixed64Rules();
                if (object["const"] != null)
                    if ($util.Long)
                        (message["const"] = $util.Long.fromValue(object["const"])).unsigned = false;
                    else if (typeof object["const"] === "string")
                        message["const"] = parseInt(object["const"], 10);
                    else if (typeof object["const"] === "number")
                        message["const"] = object["const"];
                    else if (typeof object["const"] === "object")
                        message["const"] = new $util.LongBits(object["const"].low >>> 0, object["const"].high >>> 0).toNumber();
                if (object.lt != null)
                    if ($util.Long)
                        (message.lt = $util.Long.fromValue(object.lt)).unsigned = false;
                    else if (typeof object.lt === "string")
                        message.lt = parseInt(object.lt, 10);
                    else if (typeof object.lt === "number")
                        message.lt = object.lt;
                    else if (typeof object.lt === "object")
                        message.lt = new $util.LongBits(object.lt.low >>> 0, object.lt.high >>> 0).toNumber();
                if (object.lte != null)
                    if ($util.Long)
                        (message.lte = $util.Long.fromValue(object.lte)).unsigned = false;
                    else if (typeof object.lte === "string")
                        message.lte = parseInt(object.lte, 10);
                    else if (typeof object.lte === "number")
                        message.lte = object.lte;
                    else if (typeof object.lte === "object")
                        message.lte = new $util.LongBits(object.lte.low >>> 0, object.lte.high >>> 0).toNumber();
                if (object.gt != null)
                    if ($util.Long)
                        (message.gt = $util.Long.fromValue(object.gt)).unsigned = false;
                    else if (typeof object.gt === "string")
                        message.gt = parseInt(object.gt, 10);
                    else if (typeof object.gt === "number")
                        message.gt = object.gt;
                    else if (typeof object.gt === "object")
                        message.gt = new $util.LongBits(object.gt.low >>> 0, object.gt.high >>> 0).toNumber();
                if (object.gte != null)
                    if ($util.Long)
                        (message.gte = $util.Long.fromValue(object.gte)).unsigned = false;
                    else if (typeof object.gte === "string")
                        message.gte = parseInt(object.gte, 10);
                    else if (typeof object.gte === "number")
                        message.gte = object.gte;
                    else if (typeof object.gte === "object")
                        message.gte = new $util.LongBits(object.gte.low >>> 0, object.gte.high >>> 0).toNumber();
                if (object["in"]) {
                    if (!Array.isArray(object["in"]))
                        throw TypeError(".buf.validate.Fixed64Rules.in: array expected");
                    message["in"] = [];
                    for (let i = 0; i < object["in"].length; ++i)
                        if ($util.Long)
                            (message["in"][i] = $util.Long.fromValue(object["in"][i])).unsigned = false;
                        else if (typeof object["in"][i] === "string")
                            message["in"][i] = parseInt(object["in"][i], 10);
                        else if (typeof object["in"][i] === "number")
                            message["in"][i] = object["in"][i];
                        else if (typeof object["in"][i] === "object")
                            message["in"][i] = new $util.LongBits(object["in"][i].low >>> 0, object["in"][i].high >>> 0).toNumber();
                }
                if (object.notIn) {
                    if (!Array.isArray(object.notIn))
                        throw TypeError(".buf.validate.Fixed64Rules.notIn: array expected");
                    message.notIn = [];
                    for (let i = 0; i < object.notIn.length; ++i)
                        if ($util.Long)
                            (message.notIn[i] = $util.Long.fromValue(object.notIn[i])).unsigned = false;
                        else if (typeof object.notIn[i] === "string")
                            message.notIn[i] = parseInt(object.notIn[i], 10);
                        else if (typeof object.notIn[i] === "number")
                            message.notIn[i] = object.notIn[i];
                        else if (typeof object.notIn[i] === "object")
                            message.notIn[i] = new $util.LongBits(object.notIn[i].low >>> 0, object.notIn[i].high >>> 0).toNumber();
                }
                return message;
            };

            /**
             * Creates a plain object from a Fixed64Rules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.Fixed64Rules
             * @static
             * @param {buf.validate.Fixed64Rules} message Fixed64Rules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Fixed64Rules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object["in"] = [];
                    object.notIn = [];
                }
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    if (typeof message["const"] === "number")
                        object["const"] = options.longs === String ? String(message["const"]) : message["const"];
                    else
                        object["const"] = options.longs === String ? $util.Long.prototype.toString.call(message["const"]) : options.longs === Number ? new $util.LongBits(message["const"].low >>> 0, message["const"].high >>> 0).toNumber() : message["const"];
                    if (options.oneofs)
                        object._const = "const";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    if (typeof message.lt === "number")
                        object.lt = options.longs === String ? String(message.lt) : message.lt;
                    else
                        object.lt = options.longs === String ? $util.Long.prototype.toString.call(message.lt) : options.longs === Number ? new $util.LongBits(message.lt.low >>> 0, message.lt.high >>> 0).toNumber() : message.lt;
                    if (options.oneofs)
                        object.lessThan = "lt";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (typeof message.lte === "number")
                        object.lte = options.longs === String ? String(message.lte) : message.lte;
                    else
                        object.lte = options.longs === String ? $util.Long.prototype.toString.call(message.lte) : options.longs === Number ? new $util.LongBits(message.lte.low >>> 0, message.lte.high >>> 0).toNumber() : message.lte;
                    if (options.oneofs)
                        object.lessThan = "lte";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    if (typeof message.gt === "number")
                        object.gt = options.longs === String ? String(message.gt) : message.gt;
                    else
                        object.gt = options.longs === String ? $util.Long.prototype.toString.call(message.gt) : options.longs === Number ? new $util.LongBits(message.gt.low >>> 0, message.gt.high >>> 0).toNumber() : message.gt;
                    if (options.oneofs)
                        object.greaterThan = "gt";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (typeof message.gte === "number")
                        object.gte = options.longs === String ? String(message.gte) : message.gte;
                    else
                        object.gte = options.longs === String ? $util.Long.prototype.toString.call(message.gte) : options.longs === Number ? new $util.LongBits(message.gte.low >>> 0, message.gte.high >>> 0).toNumber() : message.gte;
                    if (options.oneofs)
                        object.greaterThan = "gte";
                }
                if (message["in"] && message["in"].length) {
                    object["in"] = [];
                    for (let j = 0; j < message["in"].length; ++j)
                        if (typeof message["in"][j] === "number")
                            object["in"][j] = options.longs === String ? String(message["in"][j]) : message["in"][j];
                        else
                            object["in"][j] = options.longs === String ? $util.Long.prototype.toString.call(message["in"][j]) : options.longs === Number ? new $util.LongBits(message["in"][j].low >>> 0, message["in"][j].high >>> 0).toNumber() : message["in"][j];
                }
                if (message.notIn && message.notIn.length) {
                    object.notIn = [];
                    for (let j = 0; j < message.notIn.length; ++j)
                        if (typeof message.notIn[j] === "number")
                            object.notIn[j] = options.longs === String ? String(message.notIn[j]) : message.notIn[j];
                        else
                            object.notIn[j] = options.longs === String ? $util.Long.prototype.toString.call(message.notIn[j]) : options.longs === Number ? new $util.LongBits(message.notIn[j].low >>> 0, message.notIn[j].high >>> 0).toNumber() : message.notIn[j];
                }
                return object;
            };

            /**
             * Converts this Fixed64Rules to JSON.
             * @function toJSON
             * @memberof buf.validate.Fixed64Rules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Fixed64Rules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Fixed64Rules
             * @function getTypeUrl
             * @memberof buf.validate.Fixed64Rules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Fixed64Rules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.Fixed64Rules";
            };

            return Fixed64Rules;
        })();

        validate.SFixed32Rules = (function() {

            /**
             * Properties of a SFixed32Rules.
             * @memberof buf.validate
             * @interface ISFixed32Rules
             * @property {number|null} ["const"] SFixed32Rules const
             * @property {number|null} [lt] SFixed32Rules lt
             * @property {number|null} [lte] SFixed32Rules lte
             * @property {number|null} [gt] SFixed32Rules gt
             * @property {number|null} [gte] SFixed32Rules gte
             * @property {Array.<number>|null} ["in"] SFixed32Rules in
             * @property {Array.<number>|null} [notIn] SFixed32Rules notIn
             */

            /**
             * Constructs a new SFixed32Rules.
             * @memberof buf.validate
             * @classdesc Represents a SFixed32Rules.
             * @implements ISFixed32Rules
             * @constructor
             * @param {buf.validate.ISFixed32Rules=} [properties] Properties to set
             */
            function SFixed32Rules(properties) {
                this["in"] = [];
                this.notIn = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SFixed32Rules const.
             * @member {number|null|undefined} const
             * @memberof buf.validate.SFixed32Rules
             * @instance
             */
            SFixed32Rules.prototype["const"] = null;

            /**
             * SFixed32Rules lt.
             * @member {number|null|undefined} lt
             * @memberof buf.validate.SFixed32Rules
             * @instance
             */
            SFixed32Rules.prototype.lt = null;

            /**
             * SFixed32Rules lte.
             * @member {number|null|undefined} lte
             * @memberof buf.validate.SFixed32Rules
             * @instance
             */
            SFixed32Rules.prototype.lte = null;

            /**
             * SFixed32Rules gt.
             * @member {number|null|undefined} gt
             * @memberof buf.validate.SFixed32Rules
             * @instance
             */
            SFixed32Rules.prototype.gt = null;

            /**
             * SFixed32Rules gte.
             * @member {number|null|undefined} gte
             * @memberof buf.validate.SFixed32Rules
             * @instance
             */
            SFixed32Rules.prototype.gte = null;

            /**
             * SFixed32Rules in.
             * @member {Array.<number>} in
             * @memberof buf.validate.SFixed32Rules
             * @instance
             */
            SFixed32Rules.prototype["in"] = $util.emptyArray;

            /**
             * SFixed32Rules notIn.
             * @member {Array.<number>} notIn
             * @memberof buf.validate.SFixed32Rules
             * @instance
             */
            SFixed32Rules.prototype.notIn = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * SFixed32Rules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.SFixed32Rules
             * @instance
             */
            Object.defineProperty(SFixed32Rules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * SFixed32Rules lessThan.
             * @member {"lt"|"lte"|undefined} lessThan
             * @memberof buf.validate.SFixed32Rules
             * @instance
             */
            Object.defineProperty(SFixed32Rules.prototype, "lessThan", {
                get: $util.oneOfGetter($oneOfFields = ["lt", "lte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * SFixed32Rules greaterThan.
             * @member {"gt"|"gte"|undefined} greaterThan
             * @memberof buf.validate.SFixed32Rules
             * @instance
             */
            Object.defineProperty(SFixed32Rules.prototype, "greaterThan", {
                get: $util.oneOfGetter($oneOfFields = ["gt", "gte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new SFixed32Rules instance using the specified properties.
             * @function create
             * @memberof buf.validate.SFixed32Rules
             * @static
             * @param {buf.validate.ISFixed32Rules=} [properties] Properties to set
             * @returns {buf.validate.SFixed32Rules} SFixed32Rules instance
             */
            SFixed32Rules.create = function create(properties) {
                return new SFixed32Rules(properties);
            };

            /**
             * Encodes the specified SFixed32Rules message. Does not implicitly {@link buf.validate.SFixed32Rules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.SFixed32Rules
             * @static
             * @param {buf.validate.ISFixed32Rules} message SFixed32Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SFixed32Rules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    writer.uint32(/* id 1, wireType 5 =*/13).sfixed32(message["const"]);
                if (message.lt != null && Object.hasOwnProperty.call(message, "lt"))
                    writer.uint32(/* id 2, wireType 5 =*/21).sfixed32(message.lt);
                if (message.lte != null && Object.hasOwnProperty.call(message, "lte"))
                    writer.uint32(/* id 3, wireType 5 =*/29).sfixed32(message.lte);
                if (message.gt != null && Object.hasOwnProperty.call(message, "gt"))
                    writer.uint32(/* id 4, wireType 5 =*/37).sfixed32(message.gt);
                if (message.gte != null && Object.hasOwnProperty.call(message, "gte"))
                    writer.uint32(/* id 5, wireType 5 =*/45).sfixed32(message.gte);
                if (message["in"] != null && message["in"].length) {
                    writer.uint32(/* id 6, wireType 2 =*/50).fork();
                    for (let i = 0; i < message["in"].length; ++i)
                        writer.sfixed32(message["in"][i]);
                    writer.ldelim();
                }
                if (message.notIn != null && message.notIn.length) {
                    writer.uint32(/* id 7, wireType 2 =*/58).fork();
                    for (let i = 0; i < message.notIn.length; ++i)
                        writer.sfixed32(message.notIn[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified SFixed32Rules message, length delimited. Does not implicitly {@link buf.validate.SFixed32Rules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.SFixed32Rules
             * @static
             * @param {buf.validate.ISFixed32Rules} message SFixed32Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SFixed32Rules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SFixed32Rules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.SFixed32Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.SFixed32Rules} SFixed32Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SFixed32Rules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.SFixed32Rules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message["const"] = reader.sfixed32();
                            break;
                        }
                    case 2: {
                            message.lt = reader.sfixed32();
                            break;
                        }
                    case 3: {
                            message.lte = reader.sfixed32();
                            break;
                        }
                    case 4: {
                            message.gt = reader.sfixed32();
                            break;
                        }
                    case 5: {
                            message.gte = reader.sfixed32();
                            break;
                        }
                    case 6: {
                            if (!(message["in"] && message["in"].length))
                                message["in"] = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message["in"].push(reader.sfixed32());
                            } else
                                message["in"].push(reader.sfixed32());
                            break;
                        }
                    case 7: {
                            if (!(message.notIn && message.notIn.length))
                                message.notIn = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.notIn.push(reader.sfixed32());
                            } else
                                message.notIn.push(reader.sfixed32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SFixed32Rules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.SFixed32Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.SFixed32Rules} SFixed32Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SFixed32Rules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SFixed32Rules message.
             * @function verify
             * @memberof buf.validate.SFixed32Rules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SFixed32Rules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    if (!$util.isInteger(message["const"]))
                        return "const: integer expected";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lt))
                        return "lt: integer expected";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (properties.lessThan === 1)
                        return "lessThan: multiple values";
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lte))
                        return "lte: integer expected";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gt))
                        return "gt: integer expected";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (properties.greaterThan === 1)
                        return "greaterThan: multiple values";
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gte))
                        return "gte: integer expected";
                }
                if (message["in"] != null && message.hasOwnProperty("in")) {
                    if (!Array.isArray(message["in"]))
                        return "in: array expected";
                    for (let i = 0; i < message["in"].length; ++i)
                        if (!$util.isInteger(message["in"][i]))
                            return "in: integer[] expected";
                }
                if (message.notIn != null && message.hasOwnProperty("notIn")) {
                    if (!Array.isArray(message.notIn))
                        return "notIn: array expected";
                    for (let i = 0; i < message.notIn.length; ++i)
                        if (!$util.isInteger(message.notIn[i]))
                            return "notIn: integer[] expected";
                }
                return null;
            };

            /**
             * Creates a SFixed32Rules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.SFixed32Rules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.SFixed32Rules} SFixed32Rules
             */
            SFixed32Rules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.SFixed32Rules)
                    return object;
                let message = new $root.buf.validate.SFixed32Rules();
                if (object["const"] != null)
                    message["const"] = object["const"] | 0;
                if (object.lt != null)
                    message.lt = object.lt | 0;
                if (object.lte != null)
                    message.lte = object.lte | 0;
                if (object.gt != null)
                    message.gt = object.gt | 0;
                if (object.gte != null)
                    message.gte = object.gte | 0;
                if (object["in"]) {
                    if (!Array.isArray(object["in"]))
                        throw TypeError(".buf.validate.SFixed32Rules.in: array expected");
                    message["in"] = [];
                    for (let i = 0; i < object["in"].length; ++i)
                        message["in"][i] = object["in"][i] | 0;
                }
                if (object.notIn) {
                    if (!Array.isArray(object.notIn))
                        throw TypeError(".buf.validate.SFixed32Rules.notIn: array expected");
                    message.notIn = [];
                    for (let i = 0; i < object.notIn.length; ++i)
                        message.notIn[i] = object.notIn[i] | 0;
                }
                return message;
            };

            /**
             * Creates a plain object from a SFixed32Rules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.SFixed32Rules
             * @static
             * @param {buf.validate.SFixed32Rules} message SFixed32Rules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SFixed32Rules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object["in"] = [];
                    object.notIn = [];
                }
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    object["const"] = message["const"];
                    if (options.oneofs)
                        object._const = "const";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    object.lt = message.lt;
                    if (options.oneofs)
                        object.lessThan = "lt";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    object.lte = message.lte;
                    if (options.oneofs)
                        object.lessThan = "lte";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    object.gt = message.gt;
                    if (options.oneofs)
                        object.greaterThan = "gt";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    object.gte = message.gte;
                    if (options.oneofs)
                        object.greaterThan = "gte";
                }
                if (message["in"] && message["in"].length) {
                    object["in"] = [];
                    for (let j = 0; j < message["in"].length; ++j)
                        object["in"][j] = message["in"][j];
                }
                if (message.notIn && message.notIn.length) {
                    object.notIn = [];
                    for (let j = 0; j < message.notIn.length; ++j)
                        object.notIn[j] = message.notIn[j];
                }
                return object;
            };

            /**
             * Converts this SFixed32Rules to JSON.
             * @function toJSON
             * @memberof buf.validate.SFixed32Rules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SFixed32Rules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SFixed32Rules
             * @function getTypeUrl
             * @memberof buf.validate.SFixed32Rules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SFixed32Rules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.SFixed32Rules";
            };

            return SFixed32Rules;
        })();

        validate.SFixed64Rules = (function() {

            /**
             * Properties of a SFixed64Rules.
             * @memberof buf.validate
             * @interface ISFixed64Rules
             * @property {number|Long|null} ["const"] SFixed64Rules const
             * @property {number|Long|null} [lt] SFixed64Rules lt
             * @property {number|Long|null} [lte] SFixed64Rules lte
             * @property {number|Long|null} [gt] SFixed64Rules gt
             * @property {number|Long|null} [gte] SFixed64Rules gte
             * @property {Array.<number|Long>|null} ["in"] SFixed64Rules in
             * @property {Array.<number|Long>|null} [notIn] SFixed64Rules notIn
             */

            /**
             * Constructs a new SFixed64Rules.
             * @memberof buf.validate
             * @classdesc Represents a SFixed64Rules.
             * @implements ISFixed64Rules
             * @constructor
             * @param {buf.validate.ISFixed64Rules=} [properties] Properties to set
             */
            function SFixed64Rules(properties) {
                this["in"] = [];
                this.notIn = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SFixed64Rules const.
             * @member {number|Long|null|undefined} const
             * @memberof buf.validate.SFixed64Rules
             * @instance
             */
            SFixed64Rules.prototype["const"] = null;

            /**
             * SFixed64Rules lt.
             * @member {number|Long|null|undefined} lt
             * @memberof buf.validate.SFixed64Rules
             * @instance
             */
            SFixed64Rules.prototype.lt = null;

            /**
             * SFixed64Rules lte.
             * @member {number|Long|null|undefined} lte
             * @memberof buf.validate.SFixed64Rules
             * @instance
             */
            SFixed64Rules.prototype.lte = null;

            /**
             * SFixed64Rules gt.
             * @member {number|Long|null|undefined} gt
             * @memberof buf.validate.SFixed64Rules
             * @instance
             */
            SFixed64Rules.prototype.gt = null;

            /**
             * SFixed64Rules gte.
             * @member {number|Long|null|undefined} gte
             * @memberof buf.validate.SFixed64Rules
             * @instance
             */
            SFixed64Rules.prototype.gte = null;

            /**
             * SFixed64Rules in.
             * @member {Array.<number|Long>} in
             * @memberof buf.validate.SFixed64Rules
             * @instance
             */
            SFixed64Rules.prototype["in"] = $util.emptyArray;

            /**
             * SFixed64Rules notIn.
             * @member {Array.<number|Long>} notIn
             * @memberof buf.validate.SFixed64Rules
             * @instance
             */
            SFixed64Rules.prototype.notIn = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * SFixed64Rules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.SFixed64Rules
             * @instance
             */
            Object.defineProperty(SFixed64Rules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * SFixed64Rules lessThan.
             * @member {"lt"|"lte"|undefined} lessThan
             * @memberof buf.validate.SFixed64Rules
             * @instance
             */
            Object.defineProperty(SFixed64Rules.prototype, "lessThan", {
                get: $util.oneOfGetter($oneOfFields = ["lt", "lte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * SFixed64Rules greaterThan.
             * @member {"gt"|"gte"|undefined} greaterThan
             * @memberof buf.validate.SFixed64Rules
             * @instance
             */
            Object.defineProperty(SFixed64Rules.prototype, "greaterThan", {
                get: $util.oneOfGetter($oneOfFields = ["gt", "gte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new SFixed64Rules instance using the specified properties.
             * @function create
             * @memberof buf.validate.SFixed64Rules
             * @static
             * @param {buf.validate.ISFixed64Rules=} [properties] Properties to set
             * @returns {buf.validate.SFixed64Rules} SFixed64Rules instance
             */
            SFixed64Rules.create = function create(properties) {
                return new SFixed64Rules(properties);
            };

            /**
             * Encodes the specified SFixed64Rules message. Does not implicitly {@link buf.validate.SFixed64Rules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.SFixed64Rules
             * @static
             * @param {buf.validate.ISFixed64Rules} message SFixed64Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SFixed64Rules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    writer.uint32(/* id 1, wireType 1 =*/9).sfixed64(message["const"]);
                if (message.lt != null && Object.hasOwnProperty.call(message, "lt"))
                    writer.uint32(/* id 2, wireType 1 =*/17).sfixed64(message.lt);
                if (message.lte != null && Object.hasOwnProperty.call(message, "lte"))
                    writer.uint32(/* id 3, wireType 1 =*/25).sfixed64(message.lte);
                if (message.gt != null && Object.hasOwnProperty.call(message, "gt"))
                    writer.uint32(/* id 4, wireType 1 =*/33).sfixed64(message.gt);
                if (message.gte != null && Object.hasOwnProperty.call(message, "gte"))
                    writer.uint32(/* id 5, wireType 1 =*/41).sfixed64(message.gte);
                if (message["in"] != null && message["in"].length) {
                    writer.uint32(/* id 6, wireType 2 =*/50).fork();
                    for (let i = 0; i < message["in"].length; ++i)
                        writer.sfixed64(message["in"][i]);
                    writer.ldelim();
                }
                if (message.notIn != null && message.notIn.length) {
                    writer.uint32(/* id 7, wireType 2 =*/58).fork();
                    for (let i = 0; i < message.notIn.length; ++i)
                        writer.sfixed64(message.notIn[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified SFixed64Rules message, length delimited. Does not implicitly {@link buf.validate.SFixed64Rules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.SFixed64Rules
             * @static
             * @param {buf.validate.ISFixed64Rules} message SFixed64Rules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SFixed64Rules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SFixed64Rules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.SFixed64Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.SFixed64Rules} SFixed64Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SFixed64Rules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.SFixed64Rules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message["const"] = reader.sfixed64();
                            break;
                        }
                    case 2: {
                            message.lt = reader.sfixed64();
                            break;
                        }
                    case 3: {
                            message.lte = reader.sfixed64();
                            break;
                        }
                    case 4: {
                            message.gt = reader.sfixed64();
                            break;
                        }
                    case 5: {
                            message.gte = reader.sfixed64();
                            break;
                        }
                    case 6: {
                            if (!(message["in"] && message["in"].length))
                                message["in"] = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message["in"].push(reader.sfixed64());
                            } else
                                message["in"].push(reader.sfixed64());
                            break;
                        }
                    case 7: {
                            if (!(message.notIn && message.notIn.length))
                                message.notIn = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.notIn.push(reader.sfixed64());
                            } else
                                message.notIn.push(reader.sfixed64());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SFixed64Rules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.SFixed64Rules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.SFixed64Rules} SFixed64Rules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SFixed64Rules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SFixed64Rules message.
             * @function verify
             * @memberof buf.validate.SFixed64Rules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SFixed64Rules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    if (!$util.isInteger(message["const"]) && !(message["const"] && $util.isInteger(message["const"].low) && $util.isInteger(message["const"].high)))
                        return "const: integer|Long expected";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lt) && !(message.lt && $util.isInteger(message.lt.low) && $util.isInteger(message.lt.high)))
                        return "lt: integer|Long expected";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (properties.lessThan === 1)
                        return "lessThan: multiple values";
                    properties.lessThan = 1;
                    if (!$util.isInteger(message.lte) && !(message.lte && $util.isInteger(message.lte.low) && $util.isInteger(message.lte.high)))
                        return "lte: integer|Long expected";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gt) && !(message.gt && $util.isInteger(message.gt.low) && $util.isInteger(message.gt.high)))
                        return "gt: integer|Long expected";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (properties.greaterThan === 1)
                        return "greaterThan: multiple values";
                    properties.greaterThan = 1;
                    if (!$util.isInteger(message.gte) && !(message.gte && $util.isInteger(message.gte.low) && $util.isInteger(message.gte.high)))
                        return "gte: integer|Long expected";
                }
                if (message["in"] != null && message.hasOwnProperty("in")) {
                    if (!Array.isArray(message["in"]))
                        return "in: array expected";
                    for (let i = 0; i < message["in"].length; ++i)
                        if (!$util.isInteger(message["in"][i]) && !(message["in"][i] && $util.isInteger(message["in"][i].low) && $util.isInteger(message["in"][i].high)))
                            return "in: integer|Long[] expected";
                }
                if (message.notIn != null && message.hasOwnProperty("notIn")) {
                    if (!Array.isArray(message.notIn))
                        return "notIn: array expected";
                    for (let i = 0; i < message.notIn.length; ++i)
                        if (!$util.isInteger(message.notIn[i]) && !(message.notIn[i] && $util.isInteger(message.notIn[i].low) && $util.isInteger(message.notIn[i].high)))
                            return "notIn: integer|Long[] expected";
                }
                return null;
            };

            /**
             * Creates a SFixed64Rules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.SFixed64Rules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.SFixed64Rules} SFixed64Rules
             */
            SFixed64Rules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.SFixed64Rules)
                    return object;
                let message = new $root.buf.validate.SFixed64Rules();
                if (object["const"] != null)
                    if ($util.Long)
                        (message["const"] = $util.Long.fromValue(object["const"])).unsigned = false;
                    else if (typeof object["const"] === "string")
                        message["const"] = parseInt(object["const"], 10);
                    else if (typeof object["const"] === "number")
                        message["const"] = object["const"];
                    else if (typeof object["const"] === "object")
                        message["const"] = new $util.LongBits(object["const"].low >>> 0, object["const"].high >>> 0).toNumber();
                if (object.lt != null)
                    if ($util.Long)
                        (message.lt = $util.Long.fromValue(object.lt)).unsigned = false;
                    else if (typeof object.lt === "string")
                        message.lt = parseInt(object.lt, 10);
                    else if (typeof object.lt === "number")
                        message.lt = object.lt;
                    else if (typeof object.lt === "object")
                        message.lt = new $util.LongBits(object.lt.low >>> 0, object.lt.high >>> 0).toNumber();
                if (object.lte != null)
                    if ($util.Long)
                        (message.lte = $util.Long.fromValue(object.lte)).unsigned = false;
                    else if (typeof object.lte === "string")
                        message.lte = parseInt(object.lte, 10);
                    else if (typeof object.lte === "number")
                        message.lte = object.lte;
                    else if (typeof object.lte === "object")
                        message.lte = new $util.LongBits(object.lte.low >>> 0, object.lte.high >>> 0).toNumber();
                if (object.gt != null)
                    if ($util.Long)
                        (message.gt = $util.Long.fromValue(object.gt)).unsigned = false;
                    else if (typeof object.gt === "string")
                        message.gt = parseInt(object.gt, 10);
                    else if (typeof object.gt === "number")
                        message.gt = object.gt;
                    else if (typeof object.gt === "object")
                        message.gt = new $util.LongBits(object.gt.low >>> 0, object.gt.high >>> 0).toNumber();
                if (object.gte != null)
                    if ($util.Long)
                        (message.gte = $util.Long.fromValue(object.gte)).unsigned = false;
                    else if (typeof object.gte === "string")
                        message.gte = parseInt(object.gte, 10);
                    else if (typeof object.gte === "number")
                        message.gte = object.gte;
                    else if (typeof object.gte === "object")
                        message.gte = new $util.LongBits(object.gte.low >>> 0, object.gte.high >>> 0).toNumber();
                if (object["in"]) {
                    if (!Array.isArray(object["in"]))
                        throw TypeError(".buf.validate.SFixed64Rules.in: array expected");
                    message["in"] = [];
                    for (let i = 0; i < object["in"].length; ++i)
                        if ($util.Long)
                            (message["in"][i] = $util.Long.fromValue(object["in"][i])).unsigned = false;
                        else if (typeof object["in"][i] === "string")
                            message["in"][i] = parseInt(object["in"][i], 10);
                        else if (typeof object["in"][i] === "number")
                            message["in"][i] = object["in"][i];
                        else if (typeof object["in"][i] === "object")
                            message["in"][i] = new $util.LongBits(object["in"][i].low >>> 0, object["in"][i].high >>> 0).toNumber();
                }
                if (object.notIn) {
                    if (!Array.isArray(object.notIn))
                        throw TypeError(".buf.validate.SFixed64Rules.notIn: array expected");
                    message.notIn = [];
                    for (let i = 0; i < object.notIn.length; ++i)
                        if ($util.Long)
                            (message.notIn[i] = $util.Long.fromValue(object.notIn[i])).unsigned = false;
                        else if (typeof object.notIn[i] === "string")
                            message.notIn[i] = parseInt(object.notIn[i], 10);
                        else if (typeof object.notIn[i] === "number")
                            message.notIn[i] = object.notIn[i];
                        else if (typeof object.notIn[i] === "object")
                            message.notIn[i] = new $util.LongBits(object.notIn[i].low >>> 0, object.notIn[i].high >>> 0).toNumber();
                }
                return message;
            };

            /**
             * Creates a plain object from a SFixed64Rules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.SFixed64Rules
             * @static
             * @param {buf.validate.SFixed64Rules} message SFixed64Rules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SFixed64Rules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object["in"] = [];
                    object.notIn = [];
                }
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    if (typeof message["const"] === "number")
                        object["const"] = options.longs === String ? String(message["const"]) : message["const"];
                    else
                        object["const"] = options.longs === String ? $util.Long.prototype.toString.call(message["const"]) : options.longs === Number ? new $util.LongBits(message["const"].low >>> 0, message["const"].high >>> 0).toNumber() : message["const"];
                    if (options.oneofs)
                        object._const = "const";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    if (typeof message.lt === "number")
                        object.lt = options.longs === String ? String(message.lt) : message.lt;
                    else
                        object.lt = options.longs === String ? $util.Long.prototype.toString.call(message.lt) : options.longs === Number ? new $util.LongBits(message.lt.low >>> 0, message.lt.high >>> 0).toNumber() : message.lt;
                    if (options.oneofs)
                        object.lessThan = "lt";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (typeof message.lte === "number")
                        object.lte = options.longs === String ? String(message.lte) : message.lte;
                    else
                        object.lte = options.longs === String ? $util.Long.prototype.toString.call(message.lte) : options.longs === Number ? new $util.LongBits(message.lte.low >>> 0, message.lte.high >>> 0).toNumber() : message.lte;
                    if (options.oneofs)
                        object.lessThan = "lte";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    if (typeof message.gt === "number")
                        object.gt = options.longs === String ? String(message.gt) : message.gt;
                    else
                        object.gt = options.longs === String ? $util.Long.prototype.toString.call(message.gt) : options.longs === Number ? new $util.LongBits(message.gt.low >>> 0, message.gt.high >>> 0).toNumber() : message.gt;
                    if (options.oneofs)
                        object.greaterThan = "gt";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (typeof message.gte === "number")
                        object.gte = options.longs === String ? String(message.gte) : message.gte;
                    else
                        object.gte = options.longs === String ? $util.Long.prototype.toString.call(message.gte) : options.longs === Number ? new $util.LongBits(message.gte.low >>> 0, message.gte.high >>> 0).toNumber() : message.gte;
                    if (options.oneofs)
                        object.greaterThan = "gte";
                }
                if (message["in"] && message["in"].length) {
                    object["in"] = [];
                    for (let j = 0; j < message["in"].length; ++j)
                        if (typeof message["in"][j] === "number")
                            object["in"][j] = options.longs === String ? String(message["in"][j]) : message["in"][j];
                        else
                            object["in"][j] = options.longs === String ? $util.Long.prototype.toString.call(message["in"][j]) : options.longs === Number ? new $util.LongBits(message["in"][j].low >>> 0, message["in"][j].high >>> 0).toNumber() : message["in"][j];
                }
                if (message.notIn && message.notIn.length) {
                    object.notIn = [];
                    for (let j = 0; j < message.notIn.length; ++j)
                        if (typeof message.notIn[j] === "number")
                            object.notIn[j] = options.longs === String ? String(message.notIn[j]) : message.notIn[j];
                        else
                            object.notIn[j] = options.longs === String ? $util.Long.prototype.toString.call(message.notIn[j]) : options.longs === Number ? new $util.LongBits(message.notIn[j].low >>> 0, message.notIn[j].high >>> 0).toNumber() : message.notIn[j];
                }
                return object;
            };

            /**
             * Converts this SFixed64Rules to JSON.
             * @function toJSON
             * @memberof buf.validate.SFixed64Rules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SFixed64Rules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SFixed64Rules
             * @function getTypeUrl
             * @memberof buf.validate.SFixed64Rules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SFixed64Rules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.SFixed64Rules";
            };

            return SFixed64Rules;
        })();

        validate.BoolRules = (function() {

            /**
             * Properties of a BoolRules.
             * @memberof buf.validate
             * @interface IBoolRules
             * @property {boolean|null} ["const"] BoolRules const
             */

            /**
             * Constructs a new BoolRules.
             * @memberof buf.validate
             * @classdesc Represents a BoolRules.
             * @implements IBoolRules
             * @constructor
             * @param {buf.validate.IBoolRules=} [properties] Properties to set
             */
            function BoolRules(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BoolRules const.
             * @member {boolean|null|undefined} const
             * @memberof buf.validate.BoolRules
             * @instance
             */
            BoolRules.prototype["const"] = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * BoolRules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.BoolRules
             * @instance
             */
            Object.defineProperty(BoolRules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new BoolRules instance using the specified properties.
             * @function create
             * @memberof buf.validate.BoolRules
             * @static
             * @param {buf.validate.IBoolRules=} [properties] Properties to set
             * @returns {buf.validate.BoolRules} BoolRules instance
             */
            BoolRules.create = function create(properties) {
                return new BoolRules(properties);
            };

            /**
             * Encodes the specified BoolRules message. Does not implicitly {@link buf.validate.BoolRules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.BoolRules
             * @static
             * @param {buf.validate.IBoolRules} message BoolRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BoolRules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message["const"]);
                return writer;
            };

            /**
             * Encodes the specified BoolRules message, length delimited. Does not implicitly {@link buf.validate.BoolRules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.BoolRules
             * @static
             * @param {buf.validate.IBoolRules} message BoolRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BoolRules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BoolRules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.BoolRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.BoolRules} BoolRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BoolRules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.BoolRules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message["const"] = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BoolRules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.BoolRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.BoolRules} BoolRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BoolRules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BoolRules message.
             * @function verify
             * @memberof buf.validate.BoolRules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BoolRules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    if (typeof message["const"] !== "boolean")
                        return "const: boolean expected";
                }
                return null;
            };

            /**
             * Creates a BoolRules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.BoolRules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.BoolRules} BoolRules
             */
            BoolRules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.BoolRules)
                    return object;
                let message = new $root.buf.validate.BoolRules();
                if (object["const"] != null)
                    message["const"] = Boolean(object["const"]);
                return message;
            };

            /**
             * Creates a plain object from a BoolRules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.BoolRules
             * @static
             * @param {buf.validate.BoolRules} message BoolRules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BoolRules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    object["const"] = message["const"];
                    if (options.oneofs)
                        object._const = "const";
                }
                return object;
            };

            /**
             * Converts this BoolRules to JSON.
             * @function toJSON
             * @memberof buf.validate.BoolRules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BoolRules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for BoolRules
             * @function getTypeUrl
             * @memberof buf.validate.BoolRules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            BoolRules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.BoolRules";
            };

            return BoolRules;
        })();

        validate.StringRules = (function() {

            /**
             * Properties of a StringRules.
             * @memberof buf.validate
             * @interface IStringRules
             * @property {string|null} ["const"] StringRules const
             * @property {number|Long|null} [len] StringRules len
             * @property {number|Long|null} [minLen] StringRules minLen
             * @property {number|Long|null} [maxLen] StringRules maxLen
             * @property {number|Long|null} [lenBytes] StringRules lenBytes
             * @property {number|Long|null} [minBytes] StringRules minBytes
             * @property {number|Long|null} [maxBytes] StringRules maxBytes
             * @property {string|null} [pattern] StringRules pattern
             * @property {string|null} [prefix] StringRules prefix
             * @property {string|null} [suffix] StringRules suffix
             * @property {string|null} [contains] StringRules contains
             * @property {string|null} [notContains] StringRules notContains
             * @property {Array.<string>|null} ["in"] StringRules in
             * @property {Array.<string>|null} [notIn] StringRules notIn
             * @property {boolean|null} [email] StringRules email
             * @property {boolean|null} [hostname] StringRules hostname
             * @property {boolean|null} [ip] StringRules ip
             * @property {boolean|null} [ipv4] StringRules ipv4
             * @property {boolean|null} [ipv6] StringRules ipv6
             * @property {boolean|null} [uri] StringRules uri
             * @property {boolean|null} [uriRef] StringRules uriRef
             * @property {boolean|null} [address] StringRules address
             * @property {boolean|null} [uuid] StringRules uuid
             * @property {boolean|null} [tuuid] StringRules tuuid
             * @property {boolean|null} [ipWithPrefixlen] StringRules ipWithPrefixlen
             * @property {boolean|null} [ipv4WithPrefixlen] StringRules ipv4WithPrefixlen
             * @property {boolean|null} [ipv6WithPrefixlen] StringRules ipv6WithPrefixlen
             * @property {boolean|null} [ipPrefix] StringRules ipPrefix
             * @property {boolean|null} [ipv4Prefix] StringRules ipv4Prefix
             * @property {boolean|null} [ipv6Prefix] StringRules ipv6Prefix
             * @property {boolean|null} [hostAndPort] StringRules hostAndPort
             * @property {buf.validate.KnownRegex|null} [wellKnownRegex] StringRules wellKnownRegex
             * @property {boolean|null} [strict] StringRules strict
             */

            /**
             * Constructs a new StringRules.
             * @memberof buf.validate
             * @classdesc Represents a StringRules.
             * @implements IStringRules
             * @constructor
             * @param {buf.validate.IStringRules=} [properties] Properties to set
             */
            function StringRules(properties) {
                this["in"] = [];
                this.notIn = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * StringRules const.
             * @member {string|null|undefined} const
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype["const"] = null;

            /**
             * StringRules len.
             * @member {number|Long|null|undefined} len
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.len = null;

            /**
             * StringRules minLen.
             * @member {number|Long|null|undefined} minLen
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.minLen = null;

            /**
             * StringRules maxLen.
             * @member {number|Long|null|undefined} maxLen
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.maxLen = null;

            /**
             * StringRules lenBytes.
             * @member {number|Long|null|undefined} lenBytes
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.lenBytes = null;

            /**
             * StringRules minBytes.
             * @member {number|Long|null|undefined} minBytes
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.minBytes = null;

            /**
             * StringRules maxBytes.
             * @member {number|Long|null|undefined} maxBytes
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.maxBytes = null;

            /**
             * StringRules pattern.
             * @member {string|null|undefined} pattern
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.pattern = null;

            /**
             * StringRules prefix.
             * @member {string|null|undefined} prefix
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.prefix = null;

            /**
             * StringRules suffix.
             * @member {string|null|undefined} suffix
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.suffix = null;

            /**
             * StringRules contains.
             * @member {string|null|undefined} contains
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.contains = null;

            /**
             * StringRules notContains.
             * @member {string|null|undefined} notContains
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.notContains = null;

            /**
             * StringRules in.
             * @member {Array.<string>} in
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype["in"] = $util.emptyArray;

            /**
             * StringRules notIn.
             * @member {Array.<string>} notIn
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.notIn = $util.emptyArray;

            /**
             * StringRules email.
             * @member {boolean|null|undefined} email
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.email = null;

            /**
             * StringRules hostname.
             * @member {boolean|null|undefined} hostname
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.hostname = null;

            /**
             * StringRules ip.
             * @member {boolean|null|undefined} ip
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.ip = null;

            /**
             * StringRules ipv4.
             * @member {boolean|null|undefined} ipv4
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.ipv4 = null;

            /**
             * StringRules ipv6.
             * @member {boolean|null|undefined} ipv6
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.ipv6 = null;

            /**
             * StringRules uri.
             * @member {boolean|null|undefined} uri
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.uri = null;

            /**
             * StringRules uriRef.
             * @member {boolean|null|undefined} uriRef
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.uriRef = null;

            /**
             * StringRules address.
             * @member {boolean|null|undefined} address
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.address = null;

            /**
             * StringRules uuid.
             * @member {boolean|null|undefined} uuid
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.uuid = null;

            /**
             * StringRules tuuid.
             * @member {boolean|null|undefined} tuuid
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.tuuid = null;

            /**
             * StringRules ipWithPrefixlen.
             * @member {boolean|null|undefined} ipWithPrefixlen
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.ipWithPrefixlen = null;

            /**
             * StringRules ipv4WithPrefixlen.
             * @member {boolean|null|undefined} ipv4WithPrefixlen
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.ipv4WithPrefixlen = null;

            /**
             * StringRules ipv6WithPrefixlen.
             * @member {boolean|null|undefined} ipv6WithPrefixlen
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.ipv6WithPrefixlen = null;

            /**
             * StringRules ipPrefix.
             * @member {boolean|null|undefined} ipPrefix
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.ipPrefix = null;

            /**
             * StringRules ipv4Prefix.
             * @member {boolean|null|undefined} ipv4Prefix
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.ipv4Prefix = null;

            /**
             * StringRules ipv6Prefix.
             * @member {boolean|null|undefined} ipv6Prefix
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.ipv6Prefix = null;

            /**
             * StringRules hostAndPort.
             * @member {boolean|null|undefined} hostAndPort
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.hostAndPort = null;

            /**
             * StringRules wellKnownRegex.
             * @member {buf.validate.KnownRegex|null|undefined} wellKnownRegex
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.wellKnownRegex = null;

            /**
             * StringRules strict.
             * @member {boolean|null|undefined} strict
             * @memberof buf.validate.StringRules
             * @instance
             */
            StringRules.prototype.strict = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * StringRules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.StringRules
             * @instance
             */
            Object.defineProperty(StringRules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * StringRules _len.
             * @member {"len"|undefined} _len
             * @memberof buf.validate.StringRules
             * @instance
             */
            Object.defineProperty(StringRules.prototype, "_len", {
                get: $util.oneOfGetter($oneOfFields = ["len"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * StringRules _minLen.
             * @member {"minLen"|undefined} _minLen
             * @memberof buf.validate.StringRules
             * @instance
             */
            Object.defineProperty(StringRules.prototype, "_minLen", {
                get: $util.oneOfGetter($oneOfFields = ["minLen"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * StringRules _maxLen.
             * @member {"maxLen"|undefined} _maxLen
             * @memberof buf.validate.StringRules
             * @instance
             */
            Object.defineProperty(StringRules.prototype, "_maxLen", {
                get: $util.oneOfGetter($oneOfFields = ["maxLen"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * StringRules _lenBytes.
             * @member {"lenBytes"|undefined} _lenBytes
             * @memberof buf.validate.StringRules
             * @instance
             */
            Object.defineProperty(StringRules.prototype, "_lenBytes", {
                get: $util.oneOfGetter($oneOfFields = ["lenBytes"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * StringRules _minBytes.
             * @member {"minBytes"|undefined} _minBytes
             * @memberof buf.validate.StringRules
             * @instance
             */
            Object.defineProperty(StringRules.prototype, "_minBytes", {
                get: $util.oneOfGetter($oneOfFields = ["minBytes"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * StringRules _maxBytes.
             * @member {"maxBytes"|undefined} _maxBytes
             * @memberof buf.validate.StringRules
             * @instance
             */
            Object.defineProperty(StringRules.prototype, "_maxBytes", {
                get: $util.oneOfGetter($oneOfFields = ["maxBytes"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * StringRules _pattern.
             * @member {"pattern"|undefined} _pattern
             * @memberof buf.validate.StringRules
             * @instance
             */
            Object.defineProperty(StringRules.prototype, "_pattern", {
                get: $util.oneOfGetter($oneOfFields = ["pattern"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * StringRules _prefix.
             * @member {"prefix"|undefined} _prefix
             * @memberof buf.validate.StringRules
             * @instance
             */
            Object.defineProperty(StringRules.prototype, "_prefix", {
                get: $util.oneOfGetter($oneOfFields = ["prefix"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * StringRules _suffix.
             * @member {"suffix"|undefined} _suffix
             * @memberof buf.validate.StringRules
             * @instance
             */
            Object.defineProperty(StringRules.prototype, "_suffix", {
                get: $util.oneOfGetter($oneOfFields = ["suffix"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * StringRules _contains.
             * @member {"contains"|undefined} _contains
             * @memberof buf.validate.StringRules
             * @instance
             */
            Object.defineProperty(StringRules.prototype, "_contains", {
                get: $util.oneOfGetter($oneOfFields = ["contains"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * StringRules _notContains.
             * @member {"notContains"|undefined} _notContains
             * @memberof buf.validate.StringRules
             * @instance
             */
            Object.defineProperty(StringRules.prototype, "_notContains", {
                get: $util.oneOfGetter($oneOfFields = ["notContains"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * StringRules wellKnown.
             * @member {"email"|"hostname"|"ip"|"ipv4"|"ipv6"|"uri"|"uriRef"|"address"|"uuid"|"tuuid"|"ipWithPrefixlen"|"ipv4WithPrefixlen"|"ipv6WithPrefixlen"|"ipPrefix"|"ipv4Prefix"|"ipv6Prefix"|"hostAndPort"|"wellKnownRegex"|undefined} wellKnown
             * @memberof buf.validate.StringRules
             * @instance
             */
            Object.defineProperty(StringRules.prototype, "wellKnown", {
                get: $util.oneOfGetter($oneOfFields = ["email", "hostname", "ip", "ipv4", "ipv6", "uri", "uriRef", "address", "uuid", "tuuid", "ipWithPrefixlen", "ipv4WithPrefixlen", "ipv6WithPrefixlen", "ipPrefix", "ipv4Prefix", "ipv6Prefix", "hostAndPort", "wellKnownRegex"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * StringRules _strict.
             * @member {"strict"|undefined} _strict
             * @memberof buf.validate.StringRules
             * @instance
             */
            Object.defineProperty(StringRules.prototype, "_strict", {
                get: $util.oneOfGetter($oneOfFields = ["strict"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new StringRules instance using the specified properties.
             * @function create
             * @memberof buf.validate.StringRules
             * @static
             * @param {buf.validate.IStringRules=} [properties] Properties to set
             * @returns {buf.validate.StringRules} StringRules instance
             */
            StringRules.create = function create(properties) {
                return new StringRules(properties);
            };

            /**
             * Encodes the specified StringRules message. Does not implicitly {@link buf.validate.StringRules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.StringRules
             * @static
             * @param {buf.validate.IStringRules} message StringRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StringRules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message["const"]);
                if (message.minLen != null && Object.hasOwnProperty.call(message, "minLen"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.minLen);
                if (message.maxLen != null && Object.hasOwnProperty.call(message, "maxLen"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.maxLen);
                if (message.minBytes != null && Object.hasOwnProperty.call(message, "minBytes"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.minBytes);
                if (message.maxBytes != null && Object.hasOwnProperty.call(message, "maxBytes"))
                    writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.maxBytes);
                if (message.pattern != null && Object.hasOwnProperty.call(message, "pattern"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.pattern);
                if (message.prefix != null && Object.hasOwnProperty.call(message, "prefix"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.prefix);
                if (message.suffix != null && Object.hasOwnProperty.call(message, "suffix"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.suffix);
                if (message.contains != null && Object.hasOwnProperty.call(message, "contains"))
                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.contains);
                if (message["in"] != null && message["in"].length)
                    for (let i = 0; i < message["in"].length; ++i)
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message["in"][i]);
                if (message.notIn != null && message.notIn.length)
                    for (let i = 0; i < message.notIn.length; ++i)
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.notIn[i]);
                if (message.email != null && Object.hasOwnProperty.call(message, "email"))
                    writer.uint32(/* id 12, wireType 0 =*/96).bool(message.email);
                if (message.hostname != null && Object.hasOwnProperty.call(message, "hostname"))
                    writer.uint32(/* id 13, wireType 0 =*/104).bool(message.hostname);
                if (message.ip != null && Object.hasOwnProperty.call(message, "ip"))
                    writer.uint32(/* id 14, wireType 0 =*/112).bool(message.ip);
                if (message.ipv4 != null && Object.hasOwnProperty.call(message, "ipv4"))
                    writer.uint32(/* id 15, wireType 0 =*/120).bool(message.ipv4);
                if (message.ipv6 != null && Object.hasOwnProperty.call(message, "ipv6"))
                    writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ipv6);
                if (message.uri != null && Object.hasOwnProperty.call(message, "uri"))
                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.uri);
                if (message.uriRef != null && Object.hasOwnProperty.call(message, "uriRef"))
                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.uriRef);
                if (message.len != null && Object.hasOwnProperty.call(message, "len"))
                    writer.uint32(/* id 19, wireType 0 =*/152).uint64(message.len);
                if (message.lenBytes != null && Object.hasOwnProperty.call(message, "lenBytes"))
                    writer.uint32(/* id 20, wireType 0 =*/160).uint64(message.lenBytes);
                if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                    writer.uint32(/* id 21, wireType 0 =*/168).bool(message.address);
                if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
                    writer.uint32(/* id 22, wireType 0 =*/176).bool(message.uuid);
                if (message.notContains != null && Object.hasOwnProperty.call(message, "notContains"))
                    writer.uint32(/* id 23, wireType 2 =*/186).string(message.notContains);
                if (message.wellKnownRegex != null && Object.hasOwnProperty.call(message, "wellKnownRegex"))
                    writer.uint32(/* id 24, wireType 0 =*/192).int32(message.wellKnownRegex);
                if (message.strict != null && Object.hasOwnProperty.call(message, "strict"))
                    writer.uint32(/* id 25, wireType 0 =*/200).bool(message.strict);
                if (message.ipWithPrefixlen != null && Object.hasOwnProperty.call(message, "ipWithPrefixlen"))
                    writer.uint32(/* id 26, wireType 0 =*/208).bool(message.ipWithPrefixlen);
                if (message.ipv4WithPrefixlen != null && Object.hasOwnProperty.call(message, "ipv4WithPrefixlen"))
                    writer.uint32(/* id 27, wireType 0 =*/216).bool(message.ipv4WithPrefixlen);
                if (message.ipv6WithPrefixlen != null && Object.hasOwnProperty.call(message, "ipv6WithPrefixlen"))
                    writer.uint32(/* id 28, wireType 0 =*/224).bool(message.ipv6WithPrefixlen);
                if (message.ipPrefix != null && Object.hasOwnProperty.call(message, "ipPrefix"))
                    writer.uint32(/* id 29, wireType 0 =*/232).bool(message.ipPrefix);
                if (message.ipv4Prefix != null && Object.hasOwnProperty.call(message, "ipv4Prefix"))
                    writer.uint32(/* id 30, wireType 0 =*/240).bool(message.ipv4Prefix);
                if (message.ipv6Prefix != null && Object.hasOwnProperty.call(message, "ipv6Prefix"))
                    writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ipv6Prefix);
                if (message.hostAndPort != null && Object.hasOwnProperty.call(message, "hostAndPort"))
                    writer.uint32(/* id 32, wireType 0 =*/256).bool(message.hostAndPort);
                if (message.tuuid != null && Object.hasOwnProperty.call(message, "tuuid"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.tuuid);
                return writer;
            };

            /**
             * Encodes the specified StringRules message, length delimited. Does not implicitly {@link buf.validate.StringRules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.StringRules
             * @static
             * @param {buf.validate.IStringRules} message StringRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            StringRules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a StringRules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.StringRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.StringRules} StringRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StringRules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.StringRules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message["const"] = reader.string();
                            break;
                        }
                    case 19: {
                            message.len = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.minLen = reader.uint64();
                            break;
                        }
                    case 3: {
                            message.maxLen = reader.uint64();
                            break;
                        }
                    case 20: {
                            message.lenBytes = reader.uint64();
                            break;
                        }
                    case 4: {
                            message.minBytes = reader.uint64();
                            break;
                        }
                    case 5: {
                            message.maxBytes = reader.uint64();
                            break;
                        }
                    case 6: {
                            message.pattern = reader.string();
                            break;
                        }
                    case 7: {
                            message.prefix = reader.string();
                            break;
                        }
                    case 8: {
                            message.suffix = reader.string();
                            break;
                        }
                    case 9: {
                            message.contains = reader.string();
                            break;
                        }
                    case 23: {
                            message.notContains = reader.string();
                            break;
                        }
                    case 10: {
                            if (!(message["in"] && message["in"].length))
                                message["in"] = [];
                            message["in"].push(reader.string());
                            break;
                        }
                    case 11: {
                            if (!(message.notIn && message.notIn.length))
                                message.notIn = [];
                            message.notIn.push(reader.string());
                            break;
                        }
                    case 12: {
                            message.email = reader.bool();
                            break;
                        }
                    case 13: {
                            message.hostname = reader.bool();
                            break;
                        }
                    case 14: {
                            message.ip = reader.bool();
                            break;
                        }
                    case 15: {
                            message.ipv4 = reader.bool();
                            break;
                        }
                    case 16: {
                            message.ipv6 = reader.bool();
                            break;
                        }
                    case 17: {
                            message.uri = reader.bool();
                            break;
                        }
                    case 18: {
                            message.uriRef = reader.bool();
                            break;
                        }
                    case 21: {
                            message.address = reader.bool();
                            break;
                        }
                    case 22: {
                            message.uuid = reader.bool();
                            break;
                        }
                    case 33: {
                            message.tuuid = reader.bool();
                            break;
                        }
                    case 26: {
                            message.ipWithPrefixlen = reader.bool();
                            break;
                        }
                    case 27: {
                            message.ipv4WithPrefixlen = reader.bool();
                            break;
                        }
                    case 28: {
                            message.ipv6WithPrefixlen = reader.bool();
                            break;
                        }
                    case 29: {
                            message.ipPrefix = reader.bool();
                            break;
                        }
                    case 30: {
                            message.ipv4Prefix = reader.bool();
                            break;
                        }
                    case 31: {
                            message.ipv6Prefix = reader.bool();
                            break;
                        }
                    case 32: {
                            message.hostAndPort = reader.bool();
                            break;
                        }
                    case 24: {
                            message.wellKnownRegex = reader.int32();
                            break;
                        }
                    case 25: {
                            message.strict = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a StringRules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.StringRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.StringRules} StringRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            StringRules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a StringRules message.
             * @function verify
             * @memberof buf.validate.StringRules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            StringRules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    if (!$util.isString(message["const"]))
                        return "const: string expected";
                }
                if (message.len != null && message.hasOwnProperty("len")) {
                    properties._len = 1;
                    if (!$util.isInteger(message.len) && !(message.len && $util.isInteger(message.len.low) && $util.isInteger(message.len.high)))
                        return "len: integer|Long expected";
                }
                if (message.minLen != null && message.hasOwnProperty("minLen")) {
                    properties._minLen = 1;
                    if (!$util.isInteger(message.minLen) && !(message.minLen && $util.isInteger(message.minLen.low) && $util.isInteger(message.minLen.high)))
                        return "minLen: integer|Long expected";
                }
                if (message.maxLen != null && message.hasOwnProperty("maxLen")) {
                    properties._maxLen = 1;
                    if (!$util.isInteger(message.maxLen) && !(message.maxLen && $util.isInteger(message.maxLen.low) && $util.isInteger(message.maxLen.high)))
                        return "maxLen: integer|Long expected";
                }
                if (message.lenBytes != null && message.hasOwnProperty("lenBytes")) {
                    properties._lenBytes = 1;
                    if (!$util.isInteger(message.lenBytes) && !(message.lenBytes && $util.isInteger(message.lenBytes.low) && $util.isInteger(message.lenBytes.high)))
                        return "lenBytes: integer|Long expected";
                }
                if (message.minBytes != null && message.hasOwnProperty("minBytes")) {
                    properties._minBytes = 1;
                    if (!$util.isInteger(message.minBytes) && !(message.minBytes && $util.isInteger(message.minBytes.low) && $util.isInteger(message.minBytes.high)))
                        return "minBytes: integer|Long expected";
                }
                if (message.maxBytes != null && message.hasOwnProperty("maxBytes")) {
                    properties._maxBytes = 1;
                    if (!$util.isInteger(message.maxBytes) && !(message.maxBytes && $util.isInteger(message.maxBytes.low) && $util.isInteger(message.maxBytes.high)))
                        return "maxBytes: integer|Long expected";
                }
                if (message.pattern != null && message.hasOwnProperty("pattern")) {
                    properties._pattern = 1;
                    if (!$util.isString(message.pattern))
                        return "pattern: string expected";
                }
                if (message.prefix != null && message.hasOwnProperty("prefix")) {
                    properties._prefix = 1;
                    if (!$util.isString(message.prefix))
                        return "prefix: string expected";
                }
                if (message.suffix != null && message.hasOwnProperty("suffix")) {
                    properties._suffix = 1;
                    if (!$util.isString(message.suffix))
                        return "suffix: string expected";
                }
                if (message.contains != null && message.hasOwnProperty("contains")) {
                    properties._contains = 1;
                    if (!$util.isString(message.contains))
                        return "contains: string expected";
                }
                if (message.notContains != null && message.hasOwnProperty("notContains")) {
                    properties._notContains = 1;
                    if (!$util.isString(message.notContains))
                        return "notContains: string expected";
                }
                if (message["in"] != null && message.hasOwnProperty("in")) {
                    if (!Array.isArray(message["in"]))
                        return "in: array expected";
                    for (let i = 0; i < message["in"].length; ++i)
                        if (!$util.isString(message["in"][i]))
                            return "in: string[] expected";
                }
                if (message.notIn != null && message.hasOwnProperty("notIn")) {
                    if (!Array.isArray(message.notIn))
                        return "notIn: array expected";
                    for (let i = 0; i < message.notIn.length; ++i)
                        if (!$util.isString(message.notIn[i]))
                            return "notIn: string[] expected";
                }
                if (message.email != null && message.hasOwnProperty("email")) {
                    properties.wellKnown = 1;
                    if (typeof message.email !== "boolean")
                        return "email: boolean expected";
                }
                if (message.hostname != null && message.hasOwnProperty("hostname")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.hostname !== "boolean")
                        return "hostname: boolean expected";
                }
                if (message.ip != null && message.hasOwnProperty("ip")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.ip !== "boolean")
                        return "ip: boolean expected";
                }
                if (message.ipv4 != null && message.hasOwnProperty("ipv4")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.ipv4 !== "boolean")
                        return "ipv4: boolean expected";
                }
                if (message.ipv6 != null && message.hasOwnProperty("ipv6")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.ipv6 !== "boolean")
                        return "ipv6: boolean expected";
                }
                if (message.uri != null && message.hasOwnProperty("uri")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.uri !== "boolean")
                        return "uri: boolean expected";
                }
                if (message.uriRef != null && message.hasOwnProperty("uriRef")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.uriRef !== "boolean")
                        return "uriRef: boolean expected";
                }
                if (message.address != null && message.hasOwnProperty("address")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.address !== "boolean")
                        return "address: boolean expected";
                }
                if (message.uuid != null && message.hasOwnProperty("uuid")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.uuid !== "boolean")
                        return "uuid: boolean expected";
                }
                if (message.tuuid != null && message.hasOwnProperty("tuuid")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.tuuid !== "boolean")
                        return "tuuid: boolean expected";
                }
                if (message.ipWithPrefixlen != null && message.hasOwnProperty("ipWithPrefixlen")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.ipWithPrefixlen !== "boolean")
                        return "ipWithPrefixlen: boolean expected";
                }
                if (message.ipv4WithPrefixlen != null && message.hasOwnProperty("ipv4WithPrefixlen")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.ipv4WithPrefixlen !== "boolean")
                        return "ipv4WithPrefixlen: boolean expected";
                }
                if (message.ipv6WithPrefixlen != null && message.hasOwnProperty("ipv6WithPrefixlen")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.ipv6WithPrefixlen !== "boolean")
                        return "ipv6WithPrefixlen: boolean expected";
                }
                if (message.ipPrefix != null && message.hasOwnProperty("ipPrefix")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.ipPrefix !== "boolean")
                        return "ipPrefix: boolean expected";
                }
                if (message.ipv4Prefix != null && message.hasOwnProperty("ipv4Prefix")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.ipv4Prefix !== "boolean")
                        return "ipv4Prefix: boolean expected";
                }
                if (message.ipv6Prefix != null && message.hasOwnProperty("ipv6Prefix")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.ipv6Prefix !== "boolean")
                        return "ipv6Prefix: boolean expected";
                }
                if (message.hostAndPort != null && message.hasOwnProperty("hostAndPort")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.hostAndPort !== "boolean")
                        return "hostAndPort: boolean expected";
                }
                if (message.wellKnownRegex != null && message.hasOwnProperty("wellKnownRegex")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    switch (message.wellKnownRegex) {
                    default:
                        return "wellKnownRegex: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                }
                if (message.strict != null && message.hasOwnProperty("strict")) {
                    properties._strict = 1;
                    if (typeof message.strict !== "boolean")
                        return "strict: boolean expected";
                }
                return null;
            };

            /**
             * Creates a StringRules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.StringRules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.StringRules} StringRules
             */
            StringRules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.StringRules)
                    return object;
                let message = new $root.buf.validate.StringRules();
                if (object["const"] != null)
                    message["const"] = String(object["const"]);
                if (object.len != null)
                    if ($util.Long)
                        (message.len = $util.Long.fromValue(object.len)).unsigned = true;
                    else if (typeof object.len === "string")
                        message.len = parseInt(object.len, 10);
                    else if (typeof object.len === "number")
                        message.len = object.len;
                    else if (typeof object.len === "object")
                        message.len = new $util.LongBits(object.len.low >>> 0, object.len.high >>> 0).toNumber(true);
                if (object.minLen != null)
                    if ($util.Long)
                        (message.minLen = $util.Long.fromValue(object.minLen)).unsigned = true;
                    else if (typeof object.minLen === "string")
                        message.minLen = parseInt(object.minLen, 10);
                    else if (typeof object.minLen === "number")
                        message.minLen = object.minLen;
                    else if (typeof object.minLen === "object")
                        message.minLen = new $util.LongBits(object.minLen.low >>> 0, object.minLen.high >>> 0).toNumber(true);
                if (object.maxLen != null)
                    if ($util.Long)
                        (message.maxLen = $util.Long.fromValue(object.maxLen)).unsigned = true;
                    else if (typeof object.maxLen === "string")
                        message.maxLen = parseInt(object.maxLen, 10);
                    else if (typeof object.maxLen === "number")
                        message.maxLen = object.maxLen;
                    else if (typeof object.maxLen === "object")
                        message.maxLen = new $util.LongBits(object.maxLen.low >>> 0, object.maxLen.high >>> 0).toNumber(true);
                if (object.lenBytes != null)
                    if ($util.Long)
                        (message.lenBytes = $util.Long.fromValue(object.lenBytes)).unsigned = true;
                    else if (typeof object.lenBytes === "string")
                        message.lenBytes = parseInt(object.lenBytes, 10);
                    else if (typeof object.lenBytes === "number")
                        message.lenBytes = object.lenBytes;
                    else if (typeof object.lenBytes === "object")
                        message.lenBytes = new $util.LongBits(object.lenBytes.low >>> 0, object.lenBytes.high >>> 0).toNumber(true);
                if (object.minBytes != null)
                    if ($util.Long)
                        (message.minBytes = $util.Long.fromValue(object.minBytes)).unsigned = true;
                    else if (typeof object.minBytes === "string")
                        message.minBytes = parseInt(object.minBytes, 10);
                    else if (typeof object.minBytes === "number")
                        message.minBytes = object.minBytes;
                    else if (typeof object.minBytes === "object")
                        message.minBytes = new $util.LongBits(object.minBytes.low >>> 0, object.minBytes.high >>> 0).toNumber(true);
                if (object.maxBytes != null)
                    if ($util.Long)
                        (message.maxBytes = $util.Long.fromValue(object.maxBytes)).unsigned = true;
                    else if (typeof object.maxBytes === "string")
                        message.maxBytes = parseInt(object.maxBytes, 10);
                    else if (typeof object.maxBytes === "number")
                        message.maxBytes = object.maxBytes;
                    else if (typeof object.maxBytes === "object")
                        message.maxBytes = new $util.LongBits(object.maxBytes.low >>> 0, object.maxBytes.high >>> 0).toNumber(true);
                if (object.pattern != null)
                    message.pattern = String(object.pattern);
                if (object.prefix != null)
                    message.prefix = String(object.prefix);
                if (object.suffix != null)
                    message.suffix = String(object.suffix);
                if (object.contains != null)
                    message.contains = String(object.contains);
                if (object.notContains != null)
                    message.notContains = String(object.notContains);
                if (object["in"]) {
                    if (!Array.isArray(object["in"]))
                        throw TypeError(".buf.validate.StringRules.in: array expected");
                    message["in"] = [];
                    for (let i = 0; i < object["in"].length; ++i)
                        message["in"][i] = String(object["in"][i]);
                }
                if (object.notIn) {
                    if (!Array.isArray(object.notIn))
                        throw TypeError(".buf.validate.StringRules.notIn: array expected");
                    message.notIn = [];
                    for (let i = 0; i < object.notIn.length; ++i)
                        message.notIn[i] = String(object.notIn[i]);
                }
                if (object.email != null)
                    message.email = Boolean(object.email);
                if (object.hostname != null)
                    message.hostname = Boolean(object.hostname);
                if (object.ip != null)
                    message.ip = Boolean(object.ip);
                if (object.ipv4 != null)
                    message.ipv4 = Boolean(object.ipv4);
                if (object.ipv6 != null)
                    message.ipv6 = Boolean(object.ipv6);
                if (object.uri != null)
                    message.uri = Boolean(object.uri);
                if (object.uriRef != null)
                    message.uriRef = Boolean(object.uriRef);
                if (object.address != null)
                    message.address = Boolean(object.address);
                if (object.uuid != null)
                    message.uuid = Boolean(object.uuid);
                if (object.tuuid != null)
                    message.tuuid = Boolean(object.tuuid);
                if (object.ipWithPrefixlen != null)
                    message.ipWithPrefixlen = Boolean(object.ipWithPrefixlen);
                if (object.ipv4WithPrefixlen != null)
                    message.ipv4WithPrefixlen = Boolean(object.ipv4WithPrefixlen);
                if (object.ipv6WithPrefixlen != null)
                    message.ipv6WithPrefixlen = Boolean(object.ipv6WithPrefixlen);
                if (object.ipPrefix != null)
                    message.ipPrefix = Boolean(object.ipPrefix);
                if (object.ipv4Prefix != null)
                    message.ipv4Prefix = Boolean(object.ipv4Prefix);
                if (object.ipv6Prefix != null)
                    message.ipv6Prefix = Boolean(object.ipv6Prefix);
                if (object.hostAndPort != null)
                    message.hostAndPort = Boolean(object.hostAndPort);
                switch (object.wellKnownRegex) {
                default:
                    if (typeof object.wellKnownRegex === "number") {
                        message.wellKnownRegex = object.wellKnownRegex;
                        break;
                    }
                    break;
                case "KNOWN_REGEX_UNSPECIFIED":
                case 0:
                    message.wellKnownRegex = 0;
                    break;
                case "KNOWN_REGEX_HTTP_HEADER_NAME":
                case 1:
                    message.wellKnownRegex = 1;
                    break;
                case "KNOWN_REGEX_HTTP_HEADER_VALUE":
                case 2:
                    message.wellKnownRegex = 2;
                    break;
                }
                if (object.strict != null)
                    message.strict = Boolean(object.strict);
                return message;
            };

            /**
             * Creates a plain object from a StringRules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.StringRules
             * @static
             * @param {buf.validate.StringRules} message StringRules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            StringRules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object["in"] = [];
                    object.notIn = [];
                }
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    object["const"] = message["const"];
                    if (options.oneofs)
                        object._const = "const";
                }
                if (message.minLen != null && message.hasOwnProperty("minLen")) {
                    if (typeof message.minLen === "number")
                        object.minLen = options.longs === String ? String(message.minLen) : message.minLen;
                    else
                        object.minLen = options.longs === String ? $util.Long.prototype.toString.call(message.minLen) : options.longs === Number ? new $util.LongBits(message.minLen.low >>> 0, message.minLen.high >>> 0).toNumber(true) : message.minLen;
                    if (options.oneofs)
                        object._minLen = "minLen";
                }
                if (message.maxLen != null && message.hasOwnProperty("maxLen")) {
                    if (typeof message.maxLen === "number")
                        object.maxLen = options.longs === String ? String(message.maxLen) : message.maxLen;
                    else
                        object.maxLen = options.longs === String ? $util.Long.prototype.toString.call(message.maxLen) : options.longs === Number ? new $util.LongBits(message.maxLen.low >>> 0, message.maxLen.high >>> 0).toNumber(true) : message.maxLen;
                    if (options.oneofs)
                        object._maxLen = "maxLen";
                }
                if (message.minBytes != null && message.hasOwnProperty("minBytes")) {
                    if (typeof message.minBytes === "number")
                        object.minBytes = options.longs === String ? String(message.minBytes) : message.minBytes;
                    else
                        object.minBytes = options.longs === String ? $util.Long.prototype.toString.call(message.minBytes) : options.longs === Number ? new $util.LongBits(message.minBytes.low >>> 0, message.minBytes.high >>> 0).toNumber(true) : message.minBytes;
                    if (options.oneofs)
                        object._minBytes = "minBytes";
                }
                if (message.maxBytes != null && message.hasOwnProperty("maxBytes")) {
                    if (typeof message.maxBytes === "number")
                        object.maxBytes = options.longs === String ? String(message.maxBytes) : message.maxBytes;
                    else
                        object.maxBytes = options.longs === String ? $util.Long.prototype.toString.call(message.maxBytes) : options.longs === Number ? new $util.LongBits(message.maxBytes.low >>> 0, message.maxBytes.high >>> 0).toNumber(true) : message.maxBytes;
                    if (options.oneofs)
                        object._maxBytes = "maxBytes";
                }
                if (message.pattern != null && message.hasOwnProperty("pattern")) {
                    object.pattern = message.pattern;
                    if (options.oneofs)
                        object._pattern = "pattern";
                }
                if (message.prefix != null && message.hasOwnProperty("prefix")) {
                    object.prefix = message.prefix;
                    if (options.oneofs)
                        object._prefix = "prefix";
                }
                if (message.suffix != null && message.hasOwnProperty("suffix")) {
                    object.suffix = message.suffix;
                    if (options.oneofs)
                        object._suffix = "suffix";
                }
                if (message.contains != null && message.hasOwnProperty("contains")) {
                    object.contains = message.contains;
                    if (options.oneofs)
                        object._contains = "contains";
                }
                if (message["in"] && message["in"].length) {
                    object["in"] = [];
                    for (let j = 0; j < message["in"].length; ++j)
                        object["in"][j] = message["in"][j];
                }
                if (message.notIn && message.notIn.length) {
                    object.notIn = [];
                    for (let j = 0; j < message.notIn.length; ++j)
                        object.notIn[j] = message.notIn[j];
                }
                if (message.email != null && message.hasOwnProperty("email")) {
                    object.email = message.email;
                    if (options.oneofs)
                        object.wellKnown = "email";
                }
                if (message.hostname != null && message.hasOwnProperty("hostname")) {
                    object.hostname = message.hostname;
                    if (options.oneofs)
                        object.wellKnown = "hostname";
                }
                if (message.ip != null && message.hasOwnProperty("ip")) {
                    object.ip = message.ip;
                    if (options.oneofs)
                        object.wellKnown = "ip";
                }
                if (message.ipv4 != null && message.hasOwnProperty("ipv4")) {
                    object.ipv4 = message.ipv4;
                    if (options.oneofs)
                        object.wellKnown = "ipv4";
                }
                if (message.ipv6 != null && message.hasOwnProperty("ipv6")) {
                    object.ipv6 = message.ipv6;
                    if (options.oneofs)
                        object.wellKnown = "ipv6";
                }
                if (message.uri != null && message.hasOwnProperty("uri")) {
                    object.uri = message.uri;
                    if (options.oneofs)
                        object.wellKnown = "uri";
                }
                if (message.uriRef != null && message.hasOwnProperty("uriRef")) {
                    object.uriRef = message.uriRef;
                    if (options.oneofs)
                        object.wellKnown = "uriRef";
                }
                if (message.len != null && message.hasOwnProperty("len")) {
                    if (typeof message.len === "number")
                        object.len = options.longs === String ? String(message.len) : message.len;
                    else
                        object.len = options.longs === String ? $util.Long.prototype.toString.call(message.len) : options.longs === Number ? new $util.LongBits(message.len.low >>> 0, message.len.high >>> 0).toNumber(true) : message.len;
                    if (options.oneofs)
                        object._len = "len";
                }
                if (message.lenBytes != null && message.hasOwnProperty("lenBytes")) {
                    if (typeof message.lenBytes === "number")
                        object.lenBytes = options.longs === String ? String(message.lenBytes) : message.lenBytes;
                    else
                        object.lenBytes = options.longs === String ? $util.Long.prototype.toString.call(message.lenBytes) : options.longs === Number ? new $util.LongBits(message.lenBytes.low >>> 0, message.lenBytes.high >>> 0).toNumber(true) : message.lenBytes;
                    if (options.oneofs)
                        object._lenBytes = "lenBytes";
                }
                if (message.address != null && message.hasOwnProperty("address")) {
                    object.address = message.address;
                    if (options.oneofs)
                        object.wellKnown = "address";
                }
                if (message.uuid != null && message.hasOwnProperty("uuid")) {
                    object.uuid = message.uuid;
                    if (options.oneofs)
                        object.wellKnown = "uuid";
                }
                if (message.notContains != null && message.hasOwnProperty("notContains")) {
                    object.notContains = message.notContains;
                    if (options.oneofs)
                        object._notContains = "notContains";
                }
                if (message.wellKnownRegex != null && message.hasOwnProperty("wellKnownRegex")) {
                    object.wellKnownRegex = options.enums === String ? $root.buf.validate.KnownRegex[message.wellKnownRegex] === undefined ? message.wellKnownRegex : $root.buf.validate.KnownRegex[message.wellKnownRegex] : message.wellKnownRegex;
                    if (options.oneofs)
                        object.wellKnown = "wellKnownRegex";
                }
                if (message.strict != null && message.hasOwnProperty("strict")) {
                    object.strict = message.strict;
                    if (options.oneofs)
                        object._strict = "strict";
                }
                if (message.ipWithPrefixlen != null && message.hasOwnProperty("ipWithPrefixlen")) {
                    object.ipWithPrefixlen = message.ipWithPrefixlen;
                    if (options.oneofs)
                        object.wellKnown = "ipWithPrefixlen";
                }
                if (message.ipv4WithPrefixlen != null && message.hasOwnProperty("ipv4WithPrefixlen")) {
                    object.ipv4WithPrefixlen = message.ipv4WithPrefixlen;
                    if (options.oneofs)
                        object.wellKnown = "ipv4WithPrefixlen";
                }
                if (message.ipv6WithPrefixlen != null && message.hasOwnProperty("ipv6WithPrefixlen")) {
                    object.ipv6WithPrefixlen = message.ipv6WithPrefixlen;
                    if (options.oneofs)
                        object.wellKnown = "ipv6WithPrefixlen";
                }
                if (message.ipPrefix != null && message.hasOwnProperty("ipPrefix")) {
                    object.ipPrefix = message.ipPrefix;
                    if (options.oneofs)
                        object.wellKnown = "ipPrefix";
                }
                if (message.ipv4Prefix != null && message.hasOwnProperty("ipv4Prefix")) {
                    object.ipv4Prefix = message.ipv4Prefix;
                    if (options.oneofs)
                        object.wellKnown = "ipv4Prefix";
                }
                if (message.ipv6Prefix != null && message.hasOwnProperty("ipv6Prefix")) {
                    object.ipv6Prefix = message.ipv6Prefix;
                    if (options.oneofs)
                        object.wellKnown = "ipv6Prefix";
                }
                if (message.hostAndPort != null && message.hasOwnProperty("hostAndPort")) {
                    object.hostAndPort = message.hostAndPort;
                    if (options.oneofs)
                        object.wellKnown = "hostAndPort";
                }
                if (message.tuuid != null && message.hasOwnProperty("tuuid")) {
                    object.tuuid = message.tuuid;
                    if (options.oneofs)
                        object.wellKnown = "tuuid";
                }
                return object;
            };

            /**
             * Converts this StringRules to JSON.
             * @function toJSON
             * @memberof buf.validate.StringRules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            StringRules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for StringRules
             * @function getTypeUrl
             * @memberof buf.validate.StringRules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            StringRules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.StringRules";
            };

            return StringRules;
        })();

        /**
         * KnownRegex enum.
         * @name buf.validate.KnownRegex
         * @enum {number}
         * @property {number} KNOWN_REGEX_UNSPECIFIED=0 KNOWN_REGEX_UNSPECIFIED value
         * @property {number} KNOWN_REGEX_HTTP_HEADER_NAME=1 KNOWN_REGEX_HTTP_HEADER_NAME value
         * @property {number} KNOWN_REGEX_HTTP_HEADER_VALUE=2 KNOWN_REGEX_HTTP_HEADER_VALUE value
         */
        validate.KnownRegex = (function() {
            const valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "KNOWN_REGEX_UNSPECIFIED"] = 0;
            values[valuesById[1] = "KNOWN_REGEX_HTTP_HEADER_NAME"] = 1;
            values[valuesById[2] = "KNOWN_REGEX_HTTP_HEADER_VALUE"] = 2;
            return values;
        })();

        validate.BytesRules = (function() {

            /**
             * Properties of a BytesRules.
             * @memberof buf.validate
             * @interface IBytesRules
             * @property {Uint8Array|null} ["const"] BytesRules const
             * @property {number|Long|null} [len] BytesRules len
             * @property {number|Long|null} [minLen] BytesRules minLen
             * @property {number|Long|null} [maxLen] BytesRules maxLen
             * @property {string|null} [pattern] BytesRules pattern
             * @property {Uint8Array|null} [prefix] BytesRules prefix
             * @property {Uint8Array|null} [suffix] BytesRules suffix
             * @property {Uint8Array|null} [contains] BytesRules contains
             * @property {Array.<Uint8Array>|null} ["in"] BytesRules in
             * @property {Array.<Uint8Array>|null} [notIn] BytesRules notIn
             * @property {boolean|null} [ip] BytesRules ip
             * @property {boolean|null} [ipv4] BytesRules ipv4
             * @property {boolean|null} [ipv6] BytesRules ipv6
             */

            /**
             * Constructs a new BytesRules.
             * @memberof buf.validate
             * @classdesc Represents a BytesRules.
             * @implements IBytesRules
             * @constructor
             * @param {buf.validate.IBytesRules=} [properties] Properties to set
             */
            function BytesRules(properties) {
                this["in"] = [];
                this.notIn = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * BytesRules const.
             * @member {Uint8Array|null|undefined} const
             * @memberof buf.validate.BytesRules
             * @instance
             */
            BytesRules.prototype["const"] = null;

            /**
             * BytesRules len.
             * @member {number|Long|null|undefined} len
             * @memberof buf.validate.BytesRules
             * @instance
             */
            BytesRules.prototype.len = null;

            /**
             * BytesRules minLen.
             * @member {number|Long|null|undefined} minLen
             * @memberof buf.validate.BytesRules
             * @instance
             */
            BytesRules.prototype.minLen = null;

            /**
             * BytesRules maxLen.
             * @member {number|Long|null|undefined} maxLen
             * @memberof buf.validate.BytesRules
             * @instance
             */
            BytesRules.prototype.maxLen = null;

            /**
             * BytesRules pattern.
             * @member {string|null|undefined} pattern
             * @memberof buf.validate.BytesRules
             * @instance
             */
            BytesRules.prototype.pattern = null;

            /**
             * BytesRules prefix.
             * @member {Uint8Array|null|undefined} prefix
             * @memberof buf.validate.BytesRules
             * @instance
             */
            BytesRules.prototype.prefix = null;

            /**
             * BytesRules suffix.
             * @member {Uint8Array|null|undefined} suffix
             * @memberof buf.validate.BytesRules
             * @instance
             */
            BytesRules.prototype.suffix = null;

            /**
             * BytesRules contains.
             * @member {Uint8Array|null|undefined} contains
             * @memberof buf.validate.BytesRules
             * @instance
             */
            BytesRules.prototype.contains = null;

            /**
             * BytesRules in.
             * @member {Array.<Uint8Array>} in
             * @memberof buf.validate.BytesRules
             * @instance
             */
            BytesRules.prototype["in"] = $util.emptyArray;

            /**
             * BytesRules notIn.
             * @member {Array.<Uint8Array>} notIn
             * @memberof buf.validate.BytesRules
             * @instance
             */
            BytesRules.prototype.notIn = $util.emptyArray;

            /**
             * BytesRules ip.
             * @member {boolean|null|undefined} ip
             * @memberof buf.validate.BytesRules
             * @instance
             */
            BytesRules.prototype.ip = null;

            /**
             * BytesRules ipv4.
             * @member {boolean|null|undefined} ipv4
             * @memberof buf.validate.BytesRules
             * @instance
             */
            BytesRules.prototype.ipv4 = null;

            /**
             * BytesRules ipv6.
             * @member {boolean|null|undefined} ipv6
             * @memberof buf.validate.BytesRules
             * @instance
             */
            BytesRules.prototype.ipv6 = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * BytesRules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.BytesRules
             * @instance
             */
            Object.defineProperty(BytesRules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * BytesRules _len.
             * @member {"len"|undefined} _len
             * @memberof buf.validate.BytesRules
             * @instance
             */
            Object.defineProperty(BytesRules.prototype, "_len", {
                get: $util.oneOfGetter($oneOfFields = ["len"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * BytesRules _minLen.
             * @member {"minLen"|undefined} _minLen
             * @memberof buf.validate.BytesRules
             * @instance
             */
            Object.defineProperty(BytesRules.prototype, "_minLen", {
                get: $util.oneOfGetter($oneOfFields = ["minLen"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * BytesRules _maxLen.
             * @member {"maxLen"|undefined} _maxLen
             * @memberof buf.validate.BytesRules
             * @instance
             */
            Object.defineProperty(BytesRules.prototype, "_maxLen", {
                get: $util.oneOfGetter($oneOfFields = ["maxLen"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * BytesRules _pattern.
             * @member {"pattern"|undefined} _pattern
             * @memberof buf.validate.BytesRules
             * @instance
             */
            Object.defineProperty(BytesRules.prototype, "_pattern", {
                get: $util.oneOfGetter($oneOfFields = ["pattern"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * BytesRules _prefix.
             * @member {"prefix"|undefined} _prefix
             * @memberof buf.validate.BytesRules
             * @instance
             */
            Object.defineProperty(BytesRules.prototype, "_prefix", {
                get: $util.oneOfGetter($oneOfFields = ["prefix"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * BytesRules _suffix.
             * @member {"suffix"|undefined} _suffix
             * @memberof buf.validate.BytesRules
             * @instance
             */
            Object.defineProperty(BytesRules.prototype, "_suffix", {
                get: $util.oneOfGetter($oneOfFields = ["suffix"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * BytesRules _contains.
             * @member {"contains"|undefined} _contains
             * @memberof buf.validate.BytesRules
             * @instance
             */
            Object.defineProperty(BytesRules.prototype, "_contains", {
                get: $util.oneOfGetter($oneOfFields = ["contains"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * BytesRules wellKnown.
             * @member {"ip"|"ipv4"|"ipv6"|undefined} wellKnown
             * @memberof buf.validate.BytesRules
             * @instance
             */
            Object.defineProperty(BytesRules.prototype, "wellKnown", {
                get: $util.oneOfGetter($oneOfFields = ["ip", "ipv4", "ipv6"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new BytesRules instance using the specified properties.
             * @function create
             * @memberof buf.validate.BytesRules
             * @static
             * @param {buf.validate.IBytesRules=} [properties] Properties to set
             * @returns {buf.validate.BytesRules} BytesRules instance
             */
            BytesRules.create = function create(properties) {
                return new BytesRules(properties);
            };

            /**
             * Encodes the specified BytesRules message. Does not implicitly {@link buf.validate.BytesRules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.BytesRules
             * @static
             * @param {buf.validate.IBytesRules} message BytesRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BytesRules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    writer.uint32(/* id 1, wireType 2 =*/10).bytes(message["const"]);
                if (message.minLen != null && Object.hasOwnProperty.call(message, "minLen"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.minLen);
                if (message.maxLen != null && Object.hasOwnProperty.call(message, "maxLen"))
                    writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.maxLen);
                if (message.pattern != null && Object.hasOwnProperty.call(message, "pattern"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.pattern);
                if (message.prefix != null && Object.hasOwnProperty.call(message, "prefix"))
                    writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.prefix);
                if (message.suffix != null && Object.hasOwnProperty.call(message, "suffix"))
                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.suffix);
                if (message.contains != null && Object.hasOwnProperty.call(message, "contains"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.contains);
                if (message["in"] != null && message["in"].length)
                    for (let i = 0; i < message["in"].length; ++i)
                        writer.uint32(/* id 8, wireType 2 =*/66).bytes(message["in"][i]);
                if (message.notIn != null && message.notIn.length)
                    for (let i = 0; i < message.notIn.length; ++i)
                        writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.notIn[i]);
                if (message.ip != null && Object.hasOwnProperty.call(message, "ip"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.ip);
                if (message.ipv4 != null && Object.hasOwnProperty.call(message, "ipv4"))
                    writer.uint32(/* id 11, wireType 0 =*/88).bool(message.ipv4);
                if (message.ipv6 != null && Object.hasOwnProperty.call(message, "ipv6"))
                    writer.uint32(/* id 12, wireType 0 =*/96).bool(message.ipv6);
                if (message.len != null && Object.hasOwnProperty.call(message, "len"))
                    writer.uint32(/* id 13, wireType 0 =*/104).uint64(message.len);
                return writer;
            };

            /**
             * Encodes the specified BytesRules message, length delimited. Does not implicitly {@link buf.validate.BytesRules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.BytesRules
             * @static
             * @param {buf.validate.IBytesRules} message BytesRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            BytesRules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a BytesRules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.BytesRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.BytesRules} BytesRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BytesRules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.BytesRules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message["const"] = reader.bytes();
                            break;
                        }
                    case 13: {
                            message.len = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.minLen = reader.uint64();
                            break;
                        }
                    case 3: {
                            message.maxLen = reader.uint64();
                            break;
                        }
                    case 4: {
                            message.pattern = reader.string();
                            break;
                        }
                    case 5: {
                            message.prefix = reader.bytes();
                            break;
                        }
                    case 6: {
                            message.suffix = reader.bytes();
                            break;
                        }
                    case 7: {
                            message.contains = reader.bytes();
                            break;
                        }
                    case 8: {
                            if (!(message["in"] && message["in"].length))
                                message["in"] = [];
                            message["in"].push(reader.bytes());
                            break;
                        }
                    case 9: {
                            if (!(message.notIn && message.notIn.length))
                                message.notIn = [];
                            message.notIn.push(reader.bytes());
                            break;
                        }
                    case 10: {
                            message.ip = reader.bool();
                            break;
                        }
                    case 11: {
                            message.ipv4 = reader.bool();
                            break;
                        }
                    case 12: {
                            message.ipv6 = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a BytesRules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.BytesRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.BytesRules} BytesRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            BytesRules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a BytesRules message.
             * @function verify
             * @memberof buf.validate.BytesRules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            BytesRules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    if (!(message["const"] && typeof message["const"].length === "number" || $util.isString(message["const"])))
                        return "const: buffer expected";
                }
                if (message.len != null && message.hasOwnProperty("len")) {
                    properties._len = 1;
                    if (!$util.isInteger(message.len) && !(message.len && $util.isInteger(message.len.low) && $util.isInteger(message.len.high)))
                        return "len: integer|Long expected";
                }
                if (message.minLen != null && message.hasOwnProperty("minLen")) {
                    properties._minLen = 1;
                    if (!$util.isInteger(message.minLen) && !(message.minLen && $util.isInteger(message.minLen.low) && $util.isInteger(message.minLen.high)))
                        return "minLen: integer|Long expected";
                }
                if (message.maxLen != null && message.hasOwnProperty("maxLen")) {
                    properties._maxLen = 1;
                    if (!$util.isInteger(message.maxLen) && !(message.maxLen && $util.isInteger(message.maxLen.low) && $util.isInteger(message.maxLen.high)))
                        return "maxLen: integer|Long expected";
                }
                if (message.pattern != null && message.hasOwnProperty("pattern")) {
                    properties._pattern = 1;
                    if (!$util.isString(message.pattern))
                        return "pattern: string expected";
                }
                if (message.prefix != null && message.hasOwnProperty("prefix")) {
                    properties._prefix = 1;
                    if (!(message.prefix && typeof message.prefix.length === "number" || $util.isString(message.prefix)))
                        return "prefix: buffer expected";
                }
                if (message.suffix != null && message.hasOwnProperty("suffix")) {
                    properties._suffix = 1;
                    if (!(message.suffix && typeof message.suffix.length === "number" || $util.isString(message.suffix)))
                        return "suffix: buffer expected";
                }
                if (message.contains != null && message.hasOwnProperty("contains")) {
                    properties._contains = 1;
                    if (!(message.contains && typeof message.contains.length === "number" || $util.isString(message.contains)))
                        return "contains: buffer expected";
                }
                if (message["in"] != null && message.hasOwnProperty("in")) {
                    if (!Array.isArray(message["in"]))
                        return "in: array expected";
                    for (let i = 0; i < message["in"].length; ++i)
                        if (!(message["in"][i] && typeof message["in"][i].length === "number" || $util.isString(message["in"][i])))
                            return "in: buffer[] expected";
                }
                if (message.notIn != null && message.hasOwnProperty("notIn")) {
                    if (!Array.isArray(message.notIn))
                        return "notIn: array expected";
                    for (let i = 0; i < message.notIn.length; ++i)
                        if (!(message.notIn[i] && typeof message.notIn[i].length === "number" || $util.isString(message.notIn[i])))
                            return "notIn: buffer[] expected";
                }
                if (message.ip != null && message.hasOwnProperty("ip")) {
                    properties.wellKnown = 1;
                    if (typeof message.ip !== "boolean")
                        return "ip: boolean expected";
                }
                if (message.ipv4 != null && message.hasOwnProperty("ipv4")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.ipv4 !== "boolean")
                        return "ipv4: boolean expected";
                }
                if (message.ipv6 != null && message.hasOwnProperty("ipv6")) {
                    if (properties.wellKnown === 1)
                        return "wellKnown: multiple values";
                    properties.wellKnown = 1;
                    if (typeof message.ipv6 !== "boolean")
                        return "ipv6: boolean expected";
                }
                return null;
            };

            /**
             * Creates a BytesRules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.BytesRules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.BytesRules} BytesRules
             */
            BytesRules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.BytesRules)
                    return object;
                let message = new $root.buf.validate.BytesRules();
                if (object["const"] != null)
                    if (typeof object["const"] === "string")
                        $util.base64.decode(object["const"], message["const"] = $util.newBuffer($util.base64.length(object["const"])), 0);
                    else if (object["const"].length >= 0)
                        message["const"] = object["const"];
                if (object.len != null)
                    if ($util.Long)
                        (message.len = $util.Long.fromValue(object.len)).unsigned = true;
                    else if (typeof object.len === "string")
                        message.len = parseInt(object.len, 10);
                    else if (typeof object.len === "number")
                        message.len = object.len;
                    else if (typeof object.len === "object")
                        message.len = new $util.LongBits(object.len.low >>> 0, object.len.high >>> 0).toNumber(true);
                if (object.minLen != null)
                    if ($util.Long)
                        (message.minLen = $util.Long.fromValue(object.minLen)).unsigned = true;
                    else if (typeof object.minLen === "string")
                        message.minLen = parseInt(object.minLen, 10);
                    else if (typeof object.minLen === "number")
                        message.minLen = object.minLen;
                    else if (typeof object.minLen === "object")
                        message.minLen = new $util.LongBits(object.minLen.low >>> 0, object.minLen.high >>> 0).toNumber(true);
                if (object.maxLen != null)
                    if ($util.Long)
                        (message.maxLen = $util.Long.fromValue(object.maxLen)).unsigned = true;
                    else if (typeof object.maxLen === "string")
                        message.maxLen = parseInt(object.maxLen, 10);
                    else if (typeof object.maxLen === "number")
                        message.maxLen = object.maxLen;
                    else if (typeof object.maxLen === "object")
                        message.maxLen = new $util.LongBits(object.maxLen.low >>> 0, object.maxLen.high >>> 0).toNumber(true);
                if (object.pattern != null)
                    message.pattern = String(object.pattern);
                if (object.prefix != null)
                    if (typeof object.prefix === "string")
                        $util.base64.decode(object.prefix, message.prefix = $util.newBuffer($util.base64.length(object.prefix)), 0);
                    else if (object.prefix.length >= 0)
                        message.prefix = object.prefix;
                if (object.suffix != null)
                    if (typeof object.suffix === "string")
                        $util.base64.decode(object.suffix, message.suffix = $util.newBuffer($util.base64.length(object.suffix)), 0);
                    else if (object.suffix.length >= 0)
                        message.suffix = object.suffix;
                if (object.contains != null)
                    if (typeof object.contains === "string")
                        $util.base64.decode(object.contains, message.contains = $util.newBuffer($util.base64.length(object.contains)), 0);
                    else if (object.contains.length >= 0)
                        message.contains = object.contains;
                if (object["in"]) {
                    if (!Array.isArray(object["in"]))
                        throw TypeError(".buf.validate.BytesRules.in: array expected");
                    message["in"] = [];
                    for (let i = 0; i < object["in"].length; ++i)
                        if (typeof object["in"][i] === "string")
                            $util.base64.decode(object["in"][i], message["in"][i] = $util.newBuffer($util.base64.length(object["in"][i])), 0);
                        else if (object["in"][i].length >= 0)
                            message["in"][i] = object["in"][i];
                }
                if (object.notIn) {
                    if (!Array.isArray(object.notIn))
                        throw TypeError(".buf.validate.BytesRules.notIn: array expected");
                    message.notIn = [];
                    for (let i = 0; i < object.notIn.length; ++i)
                        if (typeof object.notIn[i] === "string")
                            $util.base64.decode(object.notIn[i], message.notIn[i] = $util.newBuffer($util.base64.length(object.notIn[i])), 0);
                        else if (object.notIn[i].length >= 0)
                            message.notIn[i] = object.notIn[i];
                }
                if (object.ip != null)
                    message.ip = Boolean(object.ip);
                if (object.ipv4 != null)
                    message.ipv4 = Boolean(object.ipv4);
                if (object.ipv6 != null)
                    message.ipv6 = Boolean(object.ipv6);
                return message;
            };

            /**
             * Creates a plain object from a BytesRules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.BytesRules
             * @static
             * @param {buf.validate.BytesRules} message BytesRules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            BytesRules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object["in"] = [];
                    object.notIn = [];
                }
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    object["const"] = options.bytes === String ? $util.base64.encode(message["const"], 0, message["const"].length) : options.bytes === Array ? Array.prototype.slice.call(message["const"]) : message["const"];
                    if (options.oneofs)
                        object._const = "const";
                }
                if (message.minLen != null && message.hasOwnProperty("minLen")) {
                    if (typeof message.minLen === "number")
                        object.minLen = options.longs === String ? String(message.minLen) : message.minLen;
                    else
                        object.minLen = options.longs === String ? $util.Long.prototype.toString.call(message.minLen) : options.longs === Number ? new $util.LongBits(message.minLen.low >>> 0, message.minLen.high >>> 0).toNumber(true) : message.minLen;
                    if (options.oneofs)
                        object._minLen = "minLen";
                }
                if (message.maxLen != null && message.hasOwnProperty("maxLen")) {
                    if (typeof message.maxLen === "number")
                        object.maxLen = options.longs === String ? String(message.maxLen) : message.maxLen;
                    else
                        object.maxLen = options.longs === String ? $util.Long.prototype.toString.call(message.maxLen) : options.longs === Number ? new $util.LongBits(message.maxLen.low >>> 0, message.maxLen.high >>> 0).toNumber(true) : message.maxLen;
                    if (options.oneofs)
                        object._maxLen = "maxLen";
                }
                if (message.pattern != null && message.hasOwnProperty("pattern")) {
                    object.pattern = message.pattern;
                    if (options.oneofs)
                        object._pattern = "pattern";
                }
                if (message.prefix != null && message.hasOwnProperty("prefix")) {
                    object.prefix = options.bytes === String ? $util.base64.encode(message.prefix, 0, message.prefix.length) : options.bytes === Array ? Array.prototype.slice.call(message.prefix) : message.prefix;
                    if (options.oneofs)
                        object._prefix = "prefix";
                }
                if (message.suffix != null && message.hasOwnProperty("suffix")) {
                    object.suffix = options.bytes === String ? $util.base64.encode(message.suffix, 0, message.suffix.length) : options.bytes === Array ? Array.prototype.slice.call(message.suffix) : message.suffix;
                    if (options.oneofs)
                        object._suffix = "suffix";
                }
                if (message.contains != null && message.hasOwnProperty("contains")) {
                    object.contains = options.bytes === String ? $util.base64.encode(message.contains, 0, message.contains.length) : options.bytes === Array ? Array.prototype.slice.call(message.contains) : message.contains;
                    if (options.oneofs)
                        object._contains = "contains";
                }
                if (message["in"] && message["in"].length) {
                    object["in"] = [];
                    for (let j = 0; j < message["in"].length; ++j)
                        object["in"][j] = options.bytes === String ? $util.base64.encode(message["in"][j], 0, message["in"][j].length) : options.bytes === Array ? Array.prototype.slice.call(message["in"][j]) : message["in"][j];
                }
                if (message.notIn && message.notIn.length) {
                    object.notIn = [];
                    for (let j = 0; j < message.notIn.length; ++j)
                        object.notIn[j] = options.bytes === String ? $util.base64.encode(message.notIn[j], 0, message.notIn[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.notIn[j]) : message.notIn[j];
                }
                if (message.ip != null && message.hasOwnProperty("ip")) {
                    object.ip = message.ip;
                    if (options.oneofs)
                        object.wellKnown = "ip";
                }
                if (message.ipv4 != null && message.hasOwnProperty("ipv4")) {
                    object.ipv4 = message.ipv4;
                    if (options.oneofs)
                        object.wellKnown = "ipv4";
                }
                if (message.ipv6 != null && message.hasOwnProperty("ipv6")) {
                    object.ipv6 = message.ipv6;
                    if (options.oneofs)
                        object.wellKnown = "ipv6";
                }
                if (message.len != null && message.hasOwnProperty("len")) {
                    if (typeof message.len === "number")
                        object.len = options.longs === String ? String(message.len) : message.len;
                    else
                        object.len = options.longs === String ? $util.Long.prototype.toString.call(message.len) : options.longs === Number ? new $util.LongBits(message.len.low >>> 0, message.len.high >>> 0).toNumber(true) : message.len;
                    if (options.oneofs)
                        object._len = "len";
                }
                return object;
            };

            /**
             * Converts this BytesRules to JSON.
             * @function toJSON
             * @memberof buf.validate.BytesRules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            BytesRules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for BytesRules
             * @function getTypeUrl
             * @memberof buf.validate.BytesRules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            BytesRules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.BytesRules";
            };

            return BytesRules;
        })();

        validate.EnumRules = (function() {

            /**
             * Properties of an EnumRules.
             * @memberof buf.validate
             * @interface IEnumRules
             * @property {number|null} ["const"] EnumRules const
             * @property {boolean|null} [definedOnly] EnumRules definedOnly
             * @property {Array.<number>|null} ["in"] EnumRules in
             * @property {Array.<number>|null} [notIn] EnumRules notIn
             */

            /**
             * Constructs a new EnumRules.
             * @memberof buf.validate
             * @classdesc Represents an EnumRules.
             * @implements IEnumRules
             * @constructor
             * @param {buf.validate.IEnumRules=} [properties] Properties to set
             */
            function EnumRules(properties) {
                this["in"] = [];
                this.notIn = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumRules const.
             * @member {number|null|undefined} const
             * @memberof buf.validate.EnumRules
             * @instance
             */
            EnumRules.prototype["const"] = null;

            /**
             * EnumRules definedOnly.
             * @member {boolean|null|undefined} definedOnly
             * @memberof buf.validate.EnumRules
             * @instance
             */
            EnumRules.prototype.definedOnly = null;

            /**
             * EnumRules in.
             * @member {Array.<number>} in
             * @memberof buf.validate.EnumRules
             * @instance
             */
            EnumRules.prototype["in"] = $util.emptyArray;

            /**
             * EnumRules notIn.
             * @member {Array.<number>} notIn
             * @memberof buf.validate.EnumRules
             * @instance
             */
            EnumRules.prototype.notIn = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * EnumRules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.EnumRules
             * @instance
             */
            Object.defineProperty(EnumRules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * EnumRules _definedOnly.
             * @member {"definedOnly"|undefined} _definedOnly
             * @memberof buf.validate.EnumRules
             * @instance
             */
            Object.defineProperty(EnumRules.prototype, "_definedOnly", {
                get: $util.oneOfGetter($oneOfFields = ["definedOnly"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new EnumRules instance using the specified properties.
             * @function create
             * @memberof buf.validate.EnumRules
             * @static
             * @param {buf.validate.IEnumRules=} [properties] Properties to set
             * @returns {buf.validate.EnumRules} EnumRules instance
             */
            EnumRules.create = function create(properties) {
                return new EnumRules(properties);
            };

            /**
             * Encodes the specified EnumRules message. Does not implicitly {@link buf.validate.EnumRules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.EnumRules
             * @static
             * @param {buf.validate.IEnumRules} message EnumRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumRules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message["const"]);
                if (message.definedOnly != null && Object.hasOwnProperty.call(message, "definedOnly"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.definedOnly);
                if (message["in"] != null && message["in"].length) {
                    writer.uint32(/* id 3, wireType 2 =*/26).fork();
                    for (let i = 0; i < message["in"].length; ++i)
                        writer.int32(message["in"][i]);
                    writer.ldelim();
                }
                if (message.notIn != null && message.notIn.length) {
                    writer.uint32(/* id 4, wireType 2 =*/34).fork();
                    for (let i = 0; i < message.notIn.length; ++i)
                        writer.int32(message.notIn[i]);
                    writer.ldelim();
                }
                return writer;
            };

            /**
             * Encodes the specified EnumRules message, length delimited. Does not implicitly {@link buf.validate.EnumRules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.EnumRules
             * @static
             * @param {buf.validate.IEnumRules} message EnumRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumRules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumRules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.EnumRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.EnumRules} EnumRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumRules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.EnumRules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message["const"] = reader.int32();
                            break;
                        }
                    case 2: {
                            message.definedOnly = reader.bool();
                            break;
                        }
                    case 3: {
                            if (!(message["in"] && message["in"].length))
                                message["in"] = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message["in"].push(reader.int32());
                            } else
                                message["in"].push(reader.int32());
                            break;
                        }
                    case 4: {
                            if (!(message.notIn && message.notIn.length))
                                message.notIn = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.notIn.push(reader.int32());
                            } else
                                message.notIn.push(reader.int32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumRules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.EnumRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.EnumRules} EnumRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumRules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumRules message.
             * @function verify
             * @memberof buf.validate.EnumRules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumRules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    if (!$util.isInteger(message["const"]))
                        return "const: integer expected";
                }
                if (message.definedOnly != null && message.hasOwnProperty("definedOnly")) {
                    properties._definedOnly = 1;
                    if (typeof message.definedOnly !== "boolean")
                        return "definedOnly: boolean expected";
                }
                if (message["in"] != null && message.hasOwnProperty("in")) {
                    if (!Array.isArray(message["in"]))
                        return "in: array expected";
                    for (let i = 0; i < message["in"].length; ++i)
                        if (!$util.isInteger(message["in"][i]))
                            return "in: integer[] expected";
                }
                if (message.notIn != null && message.hasOwnProperty("notIn")) {
                    if (!Array.isArray(message.notIn))
                        return "notIn: array expected";
                    for (let i = 0; i < message.notIn.length; ++i)
                        if (!$util.isInteger(message.notIn[i]))
                            return "notIn: integer[] expected";
                }
                return null;
            };

            /**
             * Creates an EnumRules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.EnumRules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.EnumRules} EnumRules
             */
            EnumRules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.EnumRules)
                    return object;
                let message = new $root.buf.validate.EnumRules();
                if (object["const"] != null)
                    message["const"] = object["const"] | 0;
                if (object.definedOnly != null)
                    message.definedOnly = Boolean(object.definedOnly);
                if (object["in"]) {
                    if (!Array.isArray(object["in"]))
                        throw TypeError(".buf.validate.EnumRules.in: array expected");
                    message["in"] = [];
                    for (let i = 0; i < object["in"].length; ++i)
                        message["in"][i] = object["in"][i] | 0;
                }
                if (object.notIn) {
                    if (!Array.isArray(object.notIn))
                        throw TypeError(".buf.validate.EnumRules.notIn: array expected");
                    message.notIn = [];
                    for (let i = 0; i < object.notIn.length; ++i)
                        message.notIn[i] = object.notIn[i] | 0;
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumRules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.EnumRules
             * @static
             * @param {buf.validate.EnumRules} message EnumRules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumRules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object["in"] = [];
                    object.notIn = [];
                }
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    object["const"] = message["const"];
                    if (options.oneofs)
                        object._const = "const";
                }
                if (message.definedOnly != null && message.hasOwnProperty("definedOnly")) {
                    object.definedOnly = message.definedOnly;
                    if (options.oneofs)
                        object._definedOnly = "definedOnly";
                }
                if (message["in"] && message["in"].length) {
                    object["in"] = [];
                    for (let j = 0; j < message["in"].length; ++j)
                        object["in"][j] = message["in"][j];
                }
                if (message.notIn && message.notIn.length) {
                    object.notIn = [];
                    for (let j = 0; j < message.notIn.length; ++j)
                        object.notIn[j] = message.notIn[j];
                }
                return object;
            };

            /**
             * Converts this EnumRules to JSON.
             * @function toJSON
             * @memberof buf.validate.EnumRules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumRules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for EnumRules
             * @function getTypeUrl
             * @memberof buf.validate.EnumRules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            EnumRules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.EnumRules";
            };

            return EnumRules;
        })();

        validate.RepeatedRules = (function() {

            /**
             * Properties of a RepeatedRules.
             * @memberof buf.validate
             * @interface IRepeatedRules
             * @property {number|Long|null} [minItems] RepeatedRules minItems
             * @property {number|Long|null} [maxItems] RepeatedRules maxItems
             * @property {boolean|null} [unique] RepeatedRules unique
             * @property {buf.validate.IFieldConstraints|null} [items] RepeatedRules items
             */

            /**
             * Constructs a new RepeatedRules.
             * @memberof buf.validate
             * @classdesc Represents a RepeatedRules.
             * @implements IRepeatedRules
             * @constructor
             * @param {buf.validate.IRepeatedRules=} [properties] Properties to set
             */
            function RepeatedRules(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * RepeatedRules minItems.
             * @member {number|Long|null|undefined} minItems
             * @memberof buf.validate.RepeatedRules
             * @instance
             */
            RepeatedRules.prototype.minItems = null;

            /**
             * RepeatedRules maxItems.
             * @member {number|Long|null|undefined} maxItems
             * @memberof buf.validate.RepeatedRules
             * @instance
             */
            RepeatedRules.prototype.maxItems = null;

            /**
             * RepeatedRules unique.
             * @member {boolean|null|undefined} unique
             * @memberof buf.validate.RepeatedRules
             * @instance
             */
            RepeatedRules.prototype.unique = null;

            /**
             * RepeatedRules items.
             * @member {buf.validate.IFieldConstraints|null|undefined} items
             * @memberof buf.validate.RepeatedRules
             * @instance
             */
            RepeatedRules.prototype.items = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * RepeatedRules _minItems.
             * @member {"minItems"|undefined} _minItems
             * @memberof buf.validate.RepeatedRules
             * @instance
             */
            Object.defineProperty(RepeatedRules.prototype, "_minItems", {
                get: $util.oneOfGetter($oneOfFields = ["minItems"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * RepeatedRules _maxItems.
             * @member {"maxItems"|undefined} _maxItems
             * @memberof buf.validate.RepeatedRules
             * @instance
             */
            Object.defineProperty(RepeatedRules.prototype, "_maxItems", {
                get: $util.oneOfGetter($oneOfFields = ["maxItems"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * RepeatedRules _unique.
             * @member {"unique"|undefined} _unique
             * @memberof buf.validate.RepeatedRules
             * @instance
             */
            Object.defineProperty(RepeatedRules.prototype, "_unique", {
                get: $util.oneOfGetter($oneOfFields = ["unique"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * RepeatedRules _items.
             * @member {"items"|undefined} _items
             * @memberof buf.validate.RepeatedRules
             * @instance
             */
            Object.defineProperty(RepeatedRules.prototype, "_items", {
                get: $util.oneOfGetter($oneOfFields = ["items"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new RepeatedRules instance using the specified properties.
             * @function create
             * @memberof buf.validate.RepeatedRules
             * @static
             * @param {buf.validate.IRepeatedRules=} [properties] Properties to set
             * @returns {buf.validate.RepeatedRules} RepeatedRules instance
             */
            RepeatedRules.create = function create(properties) {
                return new RepeatedRules(properties);
            };

            /**
             * Encodes the specified RepeatedRules message. Does not implicitly {@link buf.validate.RepeatedRules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.RepeatedRules
             * @static
             * @param {buf.validate.IRepeatedRules} message RepeatedRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RepeatedRules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.minItems != null && Object.hasOwnProperty.call(message, "minItems"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.minItems);
                if (message.maxItems != null && Object.hasOwnProperty.call(message, "maxItems"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.maxItems);
                if (message.unique != null && Object.hasOwnProperty.call(message, "unique"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.unique);
                if (message.items != null && Object.hasOwnProperty.call(message, "items"))
                    $root.buf.validate.FieldConstraints.encode(message.items, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified RepeatedRules message, length delimited. Does not implicitly {@link buf.validate.RepeatedRules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.RepeatedRules
             * @static
             * @param {buf.validate.IRepeatedRules} message RepeatedRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            RepeatedRules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a RepeatedRules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.RepeatedRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.RepeatedRules} RepeatedRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RepeatedRules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.RepeatedRules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.minItems = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.maxItems = reader.uint64();
                            break;
                        }
                    case 3: {
                            message.unique = reader.bool();
                            break;
                        }
                    case 4: {
                            message.items = $root.buf.validate.FieldConstraints.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a RepeatedRules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.RepeatedRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.RepeatedRules} RepeatedRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            RepeatedRules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a RepeatedRules message.
             * @function verify
             * @memberof buf.validate.RepeatedRules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            RepeatedRules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.minItems != null && message.hasOwnProperty("minItems")) {
                    properties._minItems = 1;
                    if (!$util.isInteger(message.minItems) && !(message.minItems && $util.isInteger(message.minItems.low) && $util.isInteger(message.minItems.high)))
                        return "minItems: integer|Long expected";
                }
                if (message.maxItems != null && message.hasOwnProperty("maxItems")) {
                    properties._maxItems = 1;
                    if (!$util.isInteger(message.maxItems) && !(message.maxItems && $util.isInteger(message.maxItems.low) && $util.isInteger(message.maxItems.high)))
                        return "maxItems: integer|Long expected";
                }
                if (message.unique != null && message.hasOwnProperty("unique")) {
                    properties._unique = 1;
                    if (typeof message.unique !== "boolean")
                        return "unique: boolean expected";
                }
                if (message.items != null && message.hasOwnProperty("items")) {
                    properties._items = 1;
                    {
                        let error = $root.buf.validate.FieldConstraints.verify(message.items);
                        if (error)
                            return "items." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a RepeatedRules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.RepeatedRules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.RepeatedRules} RepeatedRules
             */
            RepeatedRules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.RepeatedRules)
                    return object;
                let message = new $root.buf.validate.RepeatedRules();
                if (object.minItems != null)
                    if ($util.Long)
                        (message.minItems = $util.Long.fromValue(object.minItems)).unsigned = true;
                    else if (typeof object.minItems === "string")
                        message.minItems = parseInt(object.minItems, 10);
                    else if (typeof object.minItems === "number")
                        message.minItems = object.minItems;
                    else if (typeof object.minItems === "object")
                        message.minItems = new $util.LongBits(object.minItems.low >>> 0, object.minItems.high >>> 0).toNumber(true);
                if (object.maxItems != null)
                    if ($util.Long)
                        (message.maxItems = $util.Long.fromValue(object.maxItems)).unsigned = true;
                    else if (typeof object.maxItems === "string")
                        message.maxItems = parseInt(object.maxItems, 10);
                    else if (typeof object.maxItems === "number")
                        message.maxItems = object.maxItems;
                    else if (typeof object.maxItems === "object")
                        message.maxItems = new $util.LongBits(object.maxItems.low >>> 0, object.maxItems.high >>> 0).toNumber(true);
                if (object.unique != null)
                    message.unique = Boolean(object.unique);
                if (object.items != null) {
                    if (typeof object.items !== "object")
                        throw TypeError(".buf.validate.RepeatedRules.items: object expected");
                    message.items = $root.buf.validate.FieldConstraints.fromObject(object.items);
                }
                return message;
            };

            /**
             * Creates a plain object from a RepeatedRules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.RepeatedRules
             * @static
             * @param {buf.validate.RepeatedRules} message RepeatedRules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            RepeatedRules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.minItems != null && message.hasOwnProperty("minItems")) {
                    if (typeof message.minItems === "number")
                        object.minItems = options.longs === String ? String(message.minItems) : message.minItems;
                    else
                        object.minItems = options.longs === String ? $util.Long.prototype.toString.call(message.minItems) : options.longs === Number ? new $util.LongBits(message.minItems.low >>> 0, message.minItems.high >>> 0).toNumber(true) : message.minItems;
                    if (options.oneofs)
                        object._minItems = "minItems";
                }
                if (message.maxItems != null && message.hasOwnProperty("maxItems")) {
                    if (typeof message.maxItems === "number")
                        object.maxItems = options.longs === String ? String(message.maxItems) : message.maxItems;
                    else
                        object.maxItems = options.longs === String ? $util.Long.prototype.toString.call(message.maxItems) : options.longs === Number ? new $util.LongBits(message.maxItems.low >>> 0, message.maxItems.high >>> 0).toNumber(true) : message.maxItems;
                    if (options.oneofs)
                        object._maxItems = "maxItems";
                }
                if (message.unique != null && message.hasOwnProperty("unique")) {
                    object.unique = message.unique;
                    if (options.oneofs)
                        object._unique = "unique";
                }
                if (message.items != null && message.hasOwnProperty("items")) {
                    object.items = $root.buf.validate.FieldConstraints.toObject(message.items, options);
                    if (options.oneofs)
                        object._items = "items";
                }
                return object;
            };

            /**
             * Converts this RepeatedRules to JSON.
             * @function toJSON
             * @memberof buf.validate.RepeatedRules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            RepeatedRules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for RepeatedRules
             * @function getTypeUrl
             * @memberof buf.validate.RepeatedRules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            RepeatedRules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.RepeatedRules";
            };

            return RepeatedRules;
        })();

        validate.MapRules = (function() {

            /**
             * Properties of a MapRules.
             * @memberof buf.validate
             * @interface IMapRules
             * @property {number|Long|null} [minPairs] MapRules minPairs
             * @property {number|Long|null} [maxPairs] MapRules maxPairs
             * @property {buf.validate.IFieldConstraints|null} [keys] MapRules keys
             * @property {buf.validate.IFieldConstraints|null} [values] MapRules values
             */

            /**
             * Constructs a new MapRules.
             * @memberof buf.validate
             * @classdesc Represents a MapRules.
             * @implements IMapRules
             * @constructor
             * @param {buf.validate.IMapRules=} [properties] Properties to set
             */
            function MapRules(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MapRules minPairs.
             * @member {number|Long|null|undefined} minPairs
             * @memberof buf.validate.MapRules
             * @instance
             */
            MapRules.prototype.minPairs = null;

            /**
             * MapRules maxPairs.
             * @member {number|Long|null|undefined} maxPairs
             * @memberof buf.validate.MapRules
             * @instance
             */
            MapRules.prototype.maxPairs = null;

            /**
             * MapRules keys.
             * @member {buf.validate.IFieldConstraints|null|undefined} keys
             * @memberof buf.validate.MapRules
             * @instance
             */
            MapRules.prototype.keys = null;

            /**
             * MapRules values.
             * @member {buf.validate.IFieldConstraints|null|undefined} values
             * @memberof buf.validate.MapRules
             * @instance
             */
            MapRules.prototype.values = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * MapRules _minPairs.
             * @member {"minPairs"|undefined} _minPairs
             * @memberof buf.validate.MapRules
             * @instance
             */
            Object.defineProperty(MapRules.prototype, "_minPairs", {
                get: $util.oneOfGetter($oneOfFields = ["minPairs"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * MapRules _maxPairs.
             * @member {"maxPairs"|undefined} _maxPairs
             * @memberof buf.validate.MapRules
             * @instance
             */
            Object.defineProperty(MapRules.prototype, "_maxPairs", {
                get: $util.oneOfGetter($oneOfFields = ["maxPairs"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * MapRules _keys.
             * @member {"keys"|undefined} _keys
             * @memberof buf.validate.MapRules
             * @instance
             */
            Object.defineProperty(MapRules.prototype, "_keys", {
                get: $util.oneOfGetter($oneOfFields = ["keys"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * MapRules _values.
             * @member {"values"|undefined} _values
             * @memberof buf.validate.MapRules
             * @instance
             */
            Object.defineProperty(MapRules.prototype, "_values", {
                get: $util.oneOfGetter($oneOfFields = ["values"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new MapRules instance using the specified properties.
             * @function create
             * @memberof buf.validate.MapRules
             * @static
             * @param {buf.validate.IMapRules=} [properties] Properties to set
             * @returns {buf.validate.MapRules} MapRules instance
             */
            MapRules.create = function create(properties) {
                return new MapRules(properties);
            };

            /**
             * Encodes the specified MapRules message. Does not implicitly {@link buf.validate.MapRules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.MapRules
             * @static
             * @param {buf.validate.IMapRules} message MapRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MapRules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.minPairs != null && Object.hasOwnProperty.call(message, "minPairs"))
                    writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.minPairs);
                if (message.maxPairs != null && Object.hasOwnProperty.call(message, "maxPairs"))
                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.maxPairs);
                if (message.keys != null && Object.hasOwnProperty.call(message, "keys"))
                    $root.buf.validate.FieldConstraints.encode(message.keys, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.values != null && Object.hasOwnProperty.call(message, "values"))
                    $root.buf.validate.FieldConstraints.encode(message.values, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MapRules message, length delimited. Does not implicitly {@link buf.validate.MapRules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.MapRules
             * @static
             * @param {buf.validate.IMapRules} message MapRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MapRules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MapRules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.MapRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.MapRules} MapRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MapRules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.MapRules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.minPairs = reader.uint64();
                            break;
                        }
                    case 2: {
                            message.maxPairs = reader.uint64();
                            break;
                        }
                    case 4: {
                            message.keys = $root.buf.validate.FieldConstraints.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.values = $root.buf.validate.FieldConstraints.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MapRules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.MapRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.MapRules} MapRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MapRules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MapRules message.
             * @function verify
             * @memberof buf.validate.MapRules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MapRules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.minPairs != null && message.hasOwnProperty("minPairs")) {
                    properties._minPairs = 1;
                    if (!$util.isInteger(message.minPairs) && !(message.minPairs && $util.isInteger(message.minPairs.low) && $util.isInteger(message.minPairs.high)))
                        return "minPairs: integer|Long expected";
                }
                if (message.maxPairs != null && message.hasOwnProperty("maxPairs")) {
                    properties._maxPairs = 1;
                    if (!$util.isInteger(message.maxPairs) && !(message.maxPairs && $util.isInteger(message.maxPairs.low) && $util.isInteger(message.maxPairs.high)))
                        return "maxPairs: integer|Long expected";
                }
                if (message.keys != null && message.hasOwnProperty("keys")) {
                    properties._keys = 1;
                    {
                        let error = $root.buf.validate.FieldConstraints.verify(message.keys);
                        if (error)
                            return "keys." + error;
                    }
                }
                if (message.values != null && message.hasOwnProperty("values")) {
                    properties._values = 1;
                    {
                        let error = $root.buf.validate.FieldConstraints.verify(message.values);
                        if (error)
                            return "values." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a MapRules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.MapRules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.MapRules} MapRules
             */
            MapRules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.MapRules)
                    return object;
                let message = new $root.buf.validate.MapRules();
                if (object.minPairs != null)
                    if ($util.Long)
                        (message.minPairs = $util.Long.fromValue(object.minPairs)).unsigned = true;
                    else if (typeof object.minPairs === "string")
                        message.minPairs = parseInt(object.minPairs, 10);
                    else if (typeof object.minPairs === "number")
                        message.minPairs = object.minPairs;
                    else if (typeof object.minPairs === "object")
                        message.minPairs = new $util.LongBits(object.minPairs.low >>> 0, object.minPairs.high >>> 0).toNumber(true);
                if (object.maxPairs != null)
                    if ($util.Long)
                        (message.maxPairs = $util.Long.fromValue(object.maxPairs)).unsigned = true;
                    else if (typeof object.maxPairs === "string")
                        message.maxPairs = parseInt(object.maxPairs, 10);
                    else if (typeof object.maxPairs === "number")
                        message.maxPairs = object.maxPairs;
                    else if (typeof object.maxPairs === "object")
                        message.maxPairs = new $util.LongBits(object.maxPairs.low >>> 0, object.maxPairs.high >>> 0).toNumber(true);
                if (object.keys != null) {
                    if (typeof object.keys !== "object")
                        throw TypeError(".buf.validate.MapRules.keys: object expected");
                    message.keys = $root.buf.validate.FieldConstraints.fromObject(object.keys);
                }
                if (object.values != null) {
                    if (typeof object.values !== "object")
                        throw TypeError(".buf.validate.MapRules.values: object expected");
                    message.values = $root.buf.validate.FieldConstraints.fromObject(object.values);
                }
                return message;
            };

            /**
             * Creates a plain object from a MapRules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.MapRules
             * @static
             * @param {buf.validate.MapRules} message MapRules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MapRules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message.minPairs != null && message.hasOwnProperty("minPairs")) {
                    if (typeof message.minPairs === "number")
                        object.minPairs = options.longs === String ? String(message.minPairs) : message.minPairs;
                    else
                        object.minPairs = options.longs === String ? $util.Long.prototype.toString.call(message.minPairs) : options.longs === Number ? new $util.LongBits(message.minPairs.low >>> 0, message.minPairs.high >>> 0).toNumber(true) : message.minPairs;
                    if (options.oneofs)
                        object._minPairs = "minPairs";
                }
                if (message.maxPairs != null && message.hasOwnProperty("maxPairs")) {
                    if (typeof message.maxPairs === "number")
                        object.maxPairs = options.longs === String ? String(message.maxPairs) : message.maxPairs;
                    else
                        object.maxPairs = options.longs === String ? $util.Long.prototype.toString.call(message.maxPairs) : options.longs === Number ? new $util.LongBits(message.maxPairs.low >>> 0, message.maxPairs.high >>> 0).toNumber(true) : message.maxPairs;
                    if (options.oneofs)
                        object._maxPairs = "maxPairs";
                }
                if (message.keys != null && message.hasOwnProperty("keys")) {
                    object.keys = $root.buf.validate.FieldConstraints.toObject(message.keys, options);
                    if (options.oneofs)
                        object._keys = "keys";
                }
                if (message.values != null && message.hasOwnProperty("values")) {
                    object.values = $root.buf.validate.FieldConstraints.toObject(message.values, options);
                    if (options.oneofs)
                        object._values = "values";
                }
                return object;
            };

            /**
             * Converts this MapRules to JSON.
             * @function toJSON
             * @memberof buf.validate.MapRules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MapRules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for MapRules
             * @function getTypeUrl
             * @memberof buf.validate.MapRules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            MapRules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.MapRules";
            };

            return MapRules;
        })();

        validate.AnyRules = (function() {

            /**
             * Properties of an AnyRules.
             * @memberof buf.validate
             * @interface IAnyRules
             * @property {Array.<string>|null} ["in"] AnyRules in
             * @property {Array.<string>|null} [notIn] AnyRules notIn
             */

            /**
             * Constructs a new AnyRules.
             * @memberof buf.validate
             * @classdesc Represents an AnyRules.
             * @implements IAnyRules
             * @constructor
             * @param {buf.validate.IAnyRules=} [properties] Properties to set
             */
            function AnyRules(properties) {
                this["in"] = [];
                this.notIn = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * AnyRules in.
             * @member {Array.<string>} in
             * @memberof buf.validate.AnyRules
             * @instance
             */
            AnyRules.prototype["in"] = $util.emptyArray;

            /**
             * AnyRules notIn.
             * @member {Array.<string>} notIn
             * @memberof buf.validate.AnyRules
             * @instance
             */
            AnyRules.prototype.notIn = $util.emptyArray;

            /**
             * Creates a new AnyRules instance using the specified properties.
             * @function create
             * @memberof buf.validate.AnyRules
             * @static
             * @param {buf.validate.IAnyRules=} [properties] Properties to set
             * @returns {buf.validate.AnyRules} AnyRules instance
             */
            AnyRules.create = function create(properties) {
                return new AnyRules(properties);
            };

            /**
             * Encodes the specified AnyRules message. Does not implicitly {@link buf.validate.AnyRules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.AnyRules
             * @static
             * @param {buf.validate.IAnyRules} message AnyRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AnyRules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["in"] != null && message["in"].length)
                    for (let i = 0; i < message["in"].length; ++i)
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["in"][i]);
                if (message.notIn != null && message.notIn.length)
                    for (let i = 0; i < message.notIn.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.notIn[i]);
                return writer;
            };

            /**
             * Encodes the specified AnyRules message, length delimited. Does not implicitly {@link buf.validate.AnyRules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.AnyRules
             * @static
             * @param {buf.validate.IAnyRules} message AnyRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            AnyRules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an AnyRules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.AnyRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.AnyRules} AnyRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AnyRules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.AnyRules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2: {
                            if (!(message["in"] && message["in"].length))
                                message["in"] = [];
                            message["in"].push(reader.string());
                            break;
                        }
                    case 3: {
                            if (!(message.notIn && message.notIn.length))
                                message.notIn = [];
                            message.notIn.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an AnyRules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.AnyRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.AnyRules} AnyRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            AnyRules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an AnyRules message.
             * @function verify
             * @memberof buf.validate.AnyRules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            AnyRules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message["in"] != null && message.hasOwnProperty("in")) {
                    if (!Array.isArray(message["in"]))
                        return "in: array expected";
                    for (let i = 0; i < message["in"].length; ++i)
                        if (!$util.isString(message["in"][i]))
                            return "in: string[] expected";
                }
                if (message.notIn != null && message.hasOwnProperty("notIn")) {
                    if (!Array.isArray(message.notIn))
                        return "notIn: array expected";
                    for (let i = 0; i < message.notIn.length; ++i)
                        if (!$util.isString(message.notIn[i]))
                            return "notIn: string[] expected";
                }
                return null;
            };

            /**
             * Creates an AnyRules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.AnyRules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.AnyRules} AnyRules
             */
            AnyRules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.AnyRules)
                    return object;
                let message = new $root.buf.validate.AnyRules();
                if (object["in"]) {
                    if (!Array.isArray(object["in"]))
                        throw TypeError(".buf.validate.AnyRules.in: array expected");
                    message["in"] = [];
                    for (let i = 0; i < object["in"].length; ++i)
                        message["in"][i] = String(object["in"][i]);
                }
                if (object.notIn) {
                    if (!Array.isArray(object.notIn))
                        throw TypeError(".buf.validate.AnyRules.notIn: array expected");
                    message.notIn = [];
                    for (let i = 0; i < object.notIn.length; ++i)
                        message.notIn[i] = String(object.notIn[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from an AnyRules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.AnyRules
             * @static
             * @param {buf.validate.AnyRules} message AnyRules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            AnyRules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object["in"] = [];
                    object.notIn = [];
                }
                if (message["in"] && message["in"].length) {
                    object["in"] = [];
                    for (let j = 0; j < message["in"].length; ++j)
                        object["in"][j] = message["in"][j];
                }
                if (message.notIn && message.notIn.length) {
                    object.notIn = [];
                    for (let j = 0; j < message.notIn.length; ++j)
                        object.notIn[j] = message.notIn[j];
                }
                return object;
            };

            /**
             * Converts this AnyRules to JSON.
             * @function toJSON
             * @memberof buf.validate.AnyRules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            AnyRules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for AnyRules
             * @function getTypeUrl
             * @memberof buf.validate.AnyRules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            AnyRules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.AnyRules";
            };

            return AnyRules;
        })();

        validate.DurationRules = (function() {

            /**
             * Properties of a DurationRules.
             * @memberof buf.validate
             * @interface IDurationRules
             * @property {google.protobuf.IDuration|null} ["const"] DurationRules const
             * @property {google.protobuf.IDuration|null} [lt] DurationRules lt
             * @property {google.protobuf.IDuration|null} [lte] DurationRules lte
             * @property {google.protobuf.IDuration|null} [gt] DurationRules gt
             * @property {google.protobuf.IDuration|null} [gte] DurationRules gte
             * @property {Array.<google.protobuf.IDuration>|null} ["in"] DurationRules in
             * @property {Array.<google.protobuf.IDuration>|null} [notIn] DurationRules notIn
             */

            /**
             * Constructs a new DurationRules.
             * @memberof buf.validate
             * @classdesc Represents a DurationRules.
             * @implements IDurationRules
             * @constructor
             * @param {buf.validate.IDurationRules=} [properties] Properties to set
             */
            function DurationRules(properties) {
                this["in"] = [];
                this.notIn = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DurationRules const.
             * @member {google.protobuf.IDuration|null|undefined} const
             * @memberof buf.validate.DurationRules
             * @instance
             */
            DurationRules.prototype["const"] = null;

            /**
             * DurationRules lt.
             * @member {google.protobuf.IDuration|null|undefined} lt
             * @memberof buf.validate.DurationRules
             * @instance
             */
            DurationRules.prototype.lt = null;

            /**
             * DurationRules lte.
             * @member {google.protobuf.IDuration|null|undefined} lte
             * @memberof buf.validate.DurationRules
             * @instance
             */
            DurationRules.prototype.lte = null;

            /**
             * DurationRules gt.
             * @member {google.protobuf.IDuration|null|undefined} gt
             * @memberof buf.validate.DurationRules
             * @instance
             */
            DurationRules.prototype.gt = null;

            /**
             * DurationRules gte.
             * @member {google.protobuf.IDuration|null|undefined} gte
             * @memberof buf.validate.DurationRules
             * @instance
             */
            DurationRules.prototype.gte = null;

            /**
             * DurationRules in.
             * @member {Array.<google.protobuf.IDuration>} in
             * @memberof buf.validate.DurationRules
             * @instance
             */
            DurationRules.prototype["in"] = $util.emptyArray;

            /**
             * DurationRules notIn.
             * @member {Array.<google.protobuf.IDuration>} notIn
             * @memberof buf.validate.DurationRules
             * @instance
             */
            DurationRules.prototype.notIn = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * DurationRules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.DurationRules
             * @instance
             */
            Object.defineProperty(DurationRules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * DurationRules lessThan.
             * @member {"lt"|"lte"|undefined} lessThan
             * @memberof buf.validate.DurationRules
             * @instance
             */
            Object.defineProperty(DurationRules.prototype, "lessThan", {
                get: $util.oneOfGetter($oneOfFields = ["lt", "lte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * DurationRules greaterThan.
             * @member {"gt"|"gte"|undefined} greaterThan
             * @memberof buf.validate.DurationRules
             * @instance
             */
            Object.defineProperty(DurationRules.prototype, "greaterThan", {
                get: $util.oneOfGetter($oneOfFields = ["gt", "gte"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new DurationRules instance using the specified properties.
             * @function create
             * @memberof buf.validate.DurationRules
             * @static
             * @param {buf.validate.IDurationRules=} [properties] Properties to set
             * @returns {buf.validate.DurationRules} DurationRules instance
             */
            DurationRules.create = function create(properties) {
                return new DurationRules(properties);
            };

            /**
             * Encodes the specified DurationRules message. Does not implicitly {@link buf.validate.DurationRules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.DurationRules
             * @static
             * @param {buf.validate.IDurationRules} message DurationRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DurationRules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    $root.google.protobuf.Duration.encode(message["const"], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.lt != null && Object.hasOwnProperty.call(message, "lt"))
                    $root.google.protobuf.Duration.encode(message.lt, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.lte != null && Object.hasOwnProperty.call(message, "lte"))
                    $root.google.protobuf.Duration.encode(message.lte, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.gt != null && Object.hasOwnProperty.call(message, "gt"))
                    $root.google.protobuf.Duration.encode(message.gt, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.gte != null && Object.hasOwnProperty.call(message, "gte"))
                    $root.google.protobuf.Duration.encode(message.gte, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message["in"] != null && message["in"].length)
                    for (let i = 0; i < message["in"].length; ++i)
                        $root.google.protobuf.Duration.encode(message["in"][i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.notIn != null && message.notIn.length)
                    for (let i = 0; i < message.notIn.length; ++i)
                        $root.google.protobuf.Duration.encode(message.notIn[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified DurationRules message, length delimited. Does not implicitly {@link buf.validate.DurationRules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.DurationRules
             * @static
             * @param {buf.validate.IDurationRules} message DurationRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DurationRules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DurationRules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.DurationRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.DurationRules} DurationRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DurationRules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.DurationRules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2: {
                            message["const"] = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.lt = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.lte = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.gt = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.gte = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            if (!(message["in"] && message["in"].length))
                                message["in"] = [];
                            message["in"].push($root.google.protobuf.Duration.decode(reader, reader.uint32()));
                            break;
                        }
                    case 8: {
                            if (!(message.notIn && message.notIn.length))
                                message.notIn = [];
                            message.notIn.push($root.google.protobuf.Duration.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DurationRules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.DurationRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.DurationRules} DurationRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DurationRules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DurationRules message.
             * @function verify
             * @memberof buf.validate.DurationRules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DurationRules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    {
                        let error = $root.google.protobuf.Duration.verify(message["const"]);
                        if (error)
                            return "const." + error;
                    }
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    properties.lessThan = 1;
                    {
                        let error = $root.google.protobuf.Duration.verify(message.lt);
                        if (error)
                            return "lt." + error;
                    }
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (properties.lessThan === 1)
                        return "lessThan: multiple values";
                    properties.lessThan = 1;
                    {
                        let error = $root.google.protobuf.Duration.verify(message.lte);
                        if (error)
                            return "lte." + error;
                    }
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    properties.greaterThan = 1;
                    {
                        let error = $root.google.protobuf.Duration.verify(message.gt);
                        if (error)
                            return "gt." + error;
                    }
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (properties.greaterThan === 1)
                        return "greaterThan: multiple values";
                    properties.greaterThan = 1;
                    {
                        let error = $root.google.protobuf.Duration.verify(message.gte);
                        if (error)
                            return "gte." + error;
                    }
                }
                if (message["in"] != null && message.hasOwnProperty("in")) {
                    if (!Array.isArray(message["in"]))
                        return "in: array expected";
                    for (let i = 0; i < message["in"].length; ++i) {
                        let error = $root.google.protobuf.Duration.verify(message["in"][i]);
                        if (error)
                            return "in." + error;
                    }
                }
                if (message.notIn != null && message.hasOwnProperty("notIn")) {
                    if (!Array.isArray(message.notIn))
                        return "notIn: array expected";
                    for (let i = 0; i < message.notIn.length; ++i) {
                        let error = $root.google.protobuf.Duration.verify(message.notIn[i]);
                        if (error)
                            return "notIn." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a DurationRules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.DurationRules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.DurationRules} DurationRules
             */
            DurationRules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.DurationRules)
                    return object;
                let message = new $root.buf.validate.DurationRules();
                if (object["const"] != null) {
                    if (typeof object["const"] !== "object")
                        throw TypeError(".buf.validate.DurationRules.const: object expected");
                    message["const"] = $root.google.protobuf.Duration.fromObject(object["const"]);
                }
                if (object.lt != null) {
                    if (typeof object.lt !== "object")
                        throw TypeError(".buf.validate.DurationRules.lt: object expected");
                    message.lt = $root.google.protobuf.Duration.fromObject(object.lt);
                }
                if (object.lte != null) {
                    if (typeof object.lte !== "object")
                        throw TypeError(".buf.validate.DurationRules.lte: object expected");
                    message.lte = $root.google.protobuf.Duration.fromObject(object.lte);
                }
                if (object.gt != null) {
                    if (typeof object.gt !== "object")
                        throw TypeError(".buf.validate.DurationRules.gt: object expected");
                    message.gt = $root.google.protobuf.Duration.fromObject(object.gt);
                }
                if (object.gte != null) {
                    if (typeof object.gte !== "object")
                        throw TypeError(".buf.validate.DurationRules.gte: object expected");
                    message.gte = $root.google.protobuf.Duration.fromObject(object.gte);
                }
                if (object["in"]) {
                    if (!Array.isArray(object["in"]))
                        throw TypeError(".buf.validate.DurationRules.in: array expected");
                    message["in"] = [];
                    for (let i = 0; i < object["in"].length; ++i) {
                        if (typeof object["in"][i] !== "object")
                            throw TypeError(".buf.validate.DurationRules.in: object expected");
                        message["in"][i] = $root.google.protobuf.Duration.fromObject(object["in"][i]);
                    }
                }
                if (object.notIn) {
                    if (!Array.isArray(object.notIn))
                        throw TypeError(".buf.validate.DurationRules.notIn: array expected");
                    message.notIn = [];
                    for (let i = 0; i < object.notIn.length; ++i) {
                        if (typeof object.notIn[i] !== "object")
                            throw TypeError(".buf.validate.DurationRules.notIn: object expected");
                        message.notIn[i] = $root.google.protobuf.Duration.fromObject(object.notIn[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a DurationRules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.DurationRules
             * @static
             * @param {buf.validate.DurationRules} message DurationRules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DurationRules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object["in"] = [];
                    object.notIn = [];
                }
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    object["const"] = $root.google.protobuf.Duration.toObject(message["const"], options);
                    if (options.oneofs)
                        object._const = "const";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    object.lt = $root.google.protobuf.Duration.toObject(message.lt, options);
                    if (options.oneofs)
                        object.lessThan = "lt";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    object.lte = $root.google.protobuf.Duration.toObject(message.lte, options);
                    if (options.oneofs)
                        object.lessThan = "lte";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    object.gt = $root.google.protobuf.Duration.toObject(message.gt, options);
                    if (options.oneofs)
                        object.greaterThan = "gt";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    object.gte = $root.google.protobuf.Duration.toObject(message.gte, options);
                    if (options.oneofs)
                        object.greaterThan = "gte";
                }
                if (message["in"] && message["in"].length) {
                    object["in"] = [];
                    for (let j = 0; j < message["in"].length; ++j)
                        object["in"][j] = $root.google.protobuf.Duration.toObject(message["in"][j], options);
                }
                if (message.notIn && message.notIn.length) {
                    object.notIn = [];
                    for (let j = 0; j < message.notIn.length; ++j)
                        object.notIn[j] = $root.google.protobuf.Duration.toObject(message.notIn[j], options);
                }
                return object;
            };

            /**
             * Converts this DurationRules to JSON.
             * @function toJSON
             * @memberof buf.validate.DurationRules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DurationRules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for DurationRules
             * @function getTypeUrl
             * @memberof buf.validate.DurationRules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            DurationRules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.DurationRules";
            };

            return DurationRules;
        })();

        validate.TimestampRules = (function() {

            /**
             * Properties of a TimestampRules.
             * @memberof buf.validate
             * @interface ITimestampRules
             * @property {google.protobuf.ITimestamp|null} ["const"] TimestampRules const
             * @property {google.protobuf.ITimestamp|null} [lt] TimestampRules lt
             * @property {google.protobuf.ITimestamp|null} [lte] TimestampRules lte
             * @property {boolean|null} [ltNow] TimestampRules ltNow
             * @property {google.protobuf.ITimestamp|null} [gt] TimestampRules gt
             * @property {google.protobuf.ITimestamp|null} [gte] TimestampRules gte
             * @property {boolean|null} [gtNow] TimestampRules gtNow
             * @property {google.protobuf.IDuration|null} [within] TimestampRules within
             */

            /**
             * Constructs a new TimestampRules.
             * @memberof buf.validate
             * @classdesc Represents a TimestampRules.
             * @implements ITimestampRules
             * @constructor
             * @param {buf.validate.ITimestampRules=} [properties] Properties to set
             */
            function TimestampRules(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * TimestampRules const.
             * @member {google.protobuf.ITimestamp|null|undefined} const
             * @memberof buf.validate.TimestampRules
             * @instance
             */
            TimestampRules.prototype["const"] = null;

            /**
             * TimestampRules lt.
             * @member {google.protobuf.ITimestamp|null|undefined} lt
             * @memberof buf.validate.TimestampRules
             * @instance
             */
            TimestampRules.prototype.lt = null;

            /**
             * TimestampRules lte.
             * @member {google.protobuf.ITimestamp|null|undefined} lte
             * @memberof buf.validate.TimestampRules
             * @instance
             */
            TimestampRules.prototype.lte = null;

            /**
             * TimestampRules ltNow.
             * @member {boolean|null|undefined} ltNow
             * @memberof buf.validate.TimestampRules
             * @instance
             */
            TimestampRules.prototype.ltNow = null;

            /**
             * TimestampRules gt.
             * @member {google.protobuf.ITimestamp|null|undefined} gt
             * @memberof buf.validate.TimestampRules
             * @instance
             */
            TimestampRules.prototype.gt = null;

            /**
             * TimestampRules gte.
             * @member {google.protobuf.ITimestamp|null|undefined} gte
             * @memberof buf.validate.TimestampRules
             * @instance
             */
            TimestampRules.prototype.gte = null;

            /**
             * TimestampRules gtNow.
             * @member {boolean|null|undefined} gtNow
             * @memberof buf.validate.TimestampRules
             * @instance
             */
            TimestampRules.prototype.gtNow = null;

            /**
             * TimestampRules within.
             * @member {google.protobuf.IDuration|null|undefined} within
             * @memberof buf.validate.TimestampRules
             * @instance
             */
            TimestampRules.prototype.within = null;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * TimestampRules _const.
             * @member {"const"|undefined} _const
             * @memberof buf.validate.TimestampRules
             * @instance
             */
            Object.defineProperty(TimestampRules.prototype, "_const", {
                get: $util.oneOfGetter($oneOfFields = ["const"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * TimestampRules lessThan.
             * @member {"lt"|"lte"|"ltNow"|undefined} lessThan
             * @memberof buf.validate.TimestampRules
             * @instance
             */
            Object.defineProperty(TimestampRules.prototype, "lessThan", {
                get: $util.oneOfGetter($oneOfFields = ["lt", "lte", "ltNow"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * TimestampRules greaterThan.
             * @member {"gt"|"gte"|"gtNow"|undefined} greaterThan
             * @memberof buf.validate.TimestampRules
             * @instance
             */
            Object.defineProperty(TimestampRules.prototype, "greaterThan", {
                get: $util.oneOfGetter($oneOfFields = ["gt", "gte", "gtNow"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * TimestampRules _within.
             * @member {"within"|undefined} _within
             * @memberof buf.validate.TimestampRules
             * @instance
             */
            Object.defineProperty(TimestampRules.prototype, "_within", {
                get: $util.oneOfGetter($oneOfFields = ["within"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new TimestampRules instance using the specified properties.
             * @function create
             * @memberof buf.validate.TimestampRules
             * @static
             * @param {buf.validate.ITimestampRules=} [properties] Properties to set
             * @returns {buf.validate.TimestampRules} TimestampRules instance
             */
            TimestampRules.create = function create(properties) {
                return new TimestampRules(properties);
            };

            /**
             * Encodes the specified TimestampRules message. Does not implicitly {@link buf.validate.TimestampRules.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.TimestampRules
             * @static
             * @param {buf.validate.ITimestampRules} message TimestampRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TimestampRules.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message["const"] != null && Object.hasOwnProperty.call(message, "const"))
                    $root.google.protobuf.Timestamp.encode(message["const"], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.lt != null && Object.hasOwnProperty.call(message, "lt"))
                    $root.google.protobuf.Timestamp.encode(message.lt, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.lte != null && Object.hasOwnProperty.call(message, "lte"))
                    $root.google.protobuf.Timestamp.encode(message.lte, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.gt != null && Object.hasOwnProperty.call(message, "gt"))
                    $root.google.protobuf.Timestamp.encode(message.gt, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.gte != null && Object.hasOwnProperty.call(message, "gte"))
                    $root.google.protobuf.Timestamp.encode(message.gte, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.ltNow != null && Object.hasOwnProperty.call(message, "ltNow"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.ltNow);
                if (message.gtNow != null && Object.hasOwnProperty.call(message, "gtNow"))
                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.gtNow);
                if (message.within != null && Object.hasOwnProperty.call(message, "within"))
                    $root.google.protobuf.Duration.encode(message.within, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified TimestampRules message, length delimited. Does not implicitly {@link buf.validate.TimestampRules.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.TimestampRules
             * @static
             * @param {buf.validate.ITimestampRules} message TimestampRules message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            TimestampRules.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a TimestampRules message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.TimestampRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.TimestampRules} TimestampRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TimestampRules.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.TimestampRules();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2: {
                            message["const"] = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        }
                    case 3: {
                            message.lt = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            message.lte = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            message.ltNow = reader.bool();
                            break;
                        }
                    case 5: {
                            message.gt = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        }
                    case 6: {
                            message.gte = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        }
                    case 8: {
                            message.gtNow = reader.bool();
                            break;
                        }
                    case 9: {
                            message.within = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a TimestampRules message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.TimestampRules
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.TimestampRules} TimestampRules
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            TimestampRules.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a TimestampRules message.
             * @function verify
             * @memberof buf.validate.TimestampRules
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            TimestampRules.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    properties._const = 1;
                    {
                        let error = $root.google.protobuf.Timestamp.verify(message["const"]);
                        if (error)
                            return "const." + error;
                    }
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    properties.lessThan = 1;
                    {
                        let error = $root.google.protobuf.Timestamp.verify(message.lt);
                        if (error)
                            return "lt." + error;
                    }
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    if (properties.lessThan === 1)
                        return "lessThan: multiple values";
                    properties.lessThan = 1;
                    {
                        let error = $root.google.protobuf.Timestamp.verify(message.lte);
                        if (error)
                            return "lte." + error;
                    }
                }
                if (message.ltNow != null && message.hasOwnProperty("ltNow")) {
                    if (properties.lessThan === 1)
                        return "lessThan: multiple values";
                    properties.lessThan = 1;
                    if (typeof message.ltNow !== "boolean")
                        return "ltNow: boolean expected";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    properties.greaterThan = 1;
                    {
                        let error = $root.google.protobuf.Timestamp.verify(message.gt);
                        if (error)
                            return "gt." + error;
                    }
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    if (properties.greaterThan === 1)
                        return "greaterThan: multiple values";
                    properties.greaterThan = 1;
                    {
                        let error = $root.google.protobuf.Timestamp.verify(message.gte);
                        if (error)
                            return "gte." + error;
                    }
                }
                if (message.gtNow != null && message.hasOwnProperty("gtNow")) {
                    if (properties.greaterThan === 1)
                        return "greaterThan: multiple values";
                    properties.greaterThan = 1;
                    if (typeof message.gtNow !== "boolean")
                        return "gtNow: boolean expected";
                }
                if (message.within != null && message.hasOwnProperty("within")) {
                    properties._within = 1;
                    {
                        let error = $root.google.protobuf.Duration.verify(message.within);
                        if (error)
                            return "within." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a TimestampRules message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.TimestampRules
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.TimestampRules} TimestampRules
             */
            TimestampRules.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.TimestampRules)
                    return object;
                let message = new $root.buf.validate.TimestampRules();
                if (object["const"] != null) {
                    if (typeof object["const"] !== "object")
                        throw TypeError(".buf.validate.TimestampRules.const: object expected");
                    message["const"] = $root.google.protobuf.Timestamp.fromObject(object["const"]);
                }
                if (object.lt != null) {
                    if (typeof object.lt !== "object")
                        throw TypeError(".buf.validate.TimestampRules.lt: object expected");
                    message.lt = $root.google.protobuf.Timestamp.fromObject(object.lt);
                }
                if (object.lte != null) {
                    if (typeof object.lte !== "object")
                        throw TypeError(".buf.validate.TimestampRules.lte: object expected");
                    message.lte = $root.google.protobuf.Timestamp.fromObject(object.lte);
                }
                if (object.ltNow != null)
                    message.ltNow = Boolean(object.ltNow);
                if (object.gt != null) {
                    if (typeof object.gt !== "object")
                        throw TypeError(".buf.validate.TimestampRules.gt: object expected");
                    message.gt = $root.google.protobuf.Timestamp.fromObject(object.gt);
                }
                if (object.gte != null) {
                    if (typeof object.gte !== "object")
                        throw TypeError(".buf.validate.TimestampRules.gte: object expected");
                    message.gte = $root.google.protobuf.Timestamp.fromObject(object.gte);
                }
                if (object.gtNow != null)
                    message.gtNow = Boolean(object.gtNow);
                if (object.within != null) {
                    if (typeof object.within !== "object")
                        throw TypeError(".buf.validate.TimestampRules.within: object expected");
                    message.within = $root.google.protobuf.Duration.fromObject(object.within);
                }
                return message;
            };

            /**
             * Creates a plain object from a TimestampRules message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.TimestampRules
             * @static
             * @param {buf.validate.TimestampRules} message TimestampRules
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            TimestampRules.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (message["const"] != null && message.hasOwnProperty("const")) {
                    object["const"] = $root.google.protobuf.Timestamp.toObject(message["const"], options);
                    if (options.oneofs)
                        object._const = "const";
                }
                if (message.lt != null && message.hasOwnProperty("lt")) {
                    object.lt = $root.google.protobuf.Timestamp.toObject(message.lt, options);
                    if (options.oneofs)
                        object.lessThan = "lt";
                }
                if (message.lte != null && message.hasOwnProperty("lte")) {
                    object.lte = $root.google.protobuf.Timestamp.toObject(message.lte, options);
                    if (options.oneofs)
                        object.lessThan = "lte";
                }
                if (message.gt != null && message.hasOwnProperty("gt")) {
                    object.gt = $root.google.protobuf.Timestamp.toObject(message.gt, options);
                    if (options.oneofs)
                        object.greaterThan = "gt";
                }
                if (message.gte != null && message.hasOwnProperty("gte")) {
                    object.gte = $root.google.protobuf.Timestamp.toObject(message.gte, options);
                    if (options.oneofs)
                        object.greaterThan = "gte";
                }
                if (message.ltNow != null && message.hasOwnProperty("ltNow")) {
                    object.ltNow = message.ltNow;
                    if (options.oneofs)
                        object.lessThan = "ltNow";
                }
                if (message.gtNow != null && message.hasOwnProperty("gtNow")) {
                    object.gtNow = message.gtNow;
                    if (options.oneofs)
                        object.greaterThan = "gtNow";
                }
                if (message.within != null && message.hasOwnProperty("within")) {
                    object.within = $root.google.protobuf.Duration.toObject(message.within, options);
                    if (options.oneofs)
                        object._within = "within";
                }
                return object;
            };

            /**
             * Converts this TimestampRules to JSON.
             * @function toJSON
             * @memberof buf.validate.TimestampRules
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            TimestampRules.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for TimestampRules
             * @function getTypeUrl
             * @memberof buf.validate.TimestampRules
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            TimestampRules.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.TimestampRules";
            };

            return TimestampRules;
        })();

        validate.Constraint = (function() {

            /**
             * Properties of a Constraint.
             * @memberof buf.validate
             * @interface IConstraint
             * @property {string|null} [id] Constraint id
             * @property {string|null} [message] Constraint message
             * @property {string|null} [expression] Constraint expression
             */

            /**
             * Constructs a new Constraint.
             * @memberof buf.validate
             * @classdesc Represents a Constraint.
             * @implements IConstraint
             * @constructor
             * @param {buf.validate.IConstraint=} [properties] Properties to set
             */
            function Constraint(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Constraint id.
             * @member {string} id
             * @memberof buf.validate.Constraint
             * @instance
             */
            Constraint.prototype.id = "";

            /**
             * Constraint message.
             * @member {string} message
             * @memberof buf.validate.Constraint
             * @instance
             */
            Constraint.prototype.message = "";

            /**
             * Constraint expression.
             * @member {string} expression
             * @memberof buf.validate.Constraint
             * @instance
             */
            Constraint.prototype.expression = "";

            /**
             * Creates a new Constraint instance using the specified properties.
             * @function create
             * @memberof buf.validate.Constraint
             * @static
             * @param {buf.validate.IConstraint=} [properties] Properties to set
             * @returns {buf.validate.Constraint} Constraint instance
             */
            Constraint.create = function create(properties) {
                return new Constraint(properties);
            };

            /**
             * Encodes the specified Constraint message. Does not implicitly {@link buf.validate.Constraint.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.Constraint
             * @static
             * @param {buf.validate.IConstraint} message Constraint message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Constraint.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                if (message.expression != null && Object.hasOwnProperty.call(message, "expression"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.expression);
                return writer;
            };

            /**
             * Encodes the specified Constraint message, length delimited. Does not implicitly {@link buf.validate.Constraint.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.Constraint
             * @static
             * @param {buf.validate.IConstraint} message Constraint message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Constraint.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Constraint message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.Constraint
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.Constraint} Constraint
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Constraint.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.Constraint();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.id = reader.string();
                            break;
                        }
                    case 2: {
                            message.message = reader.string();
                            break;
                        }
                    case 3: {
                            message.expression = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Constraint message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.Constraint
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.Constraint} Constraint
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Constraint.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Constraint message.
             * @function verify
             * @memberof buf.validate.Constraint
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Constraint.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.id != null && message.hasOwnProperty("id"))
                    if (!$util.isString(message.id))
                        return "id: string expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                if (message.expression != null && message.hasOwnProperty("expression"))
                    if (!$util.isString(message.expression))
                        return "expression: string expected";
                return null;
            };

            /**
             * Creates a Constraint message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.Constraint
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.Constraint} Constraint
             */
            Constraint.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.Constraint)
                    return object;
                let message = new $root.buf.validate.Constraint();
                if (object.id != null)
                    message.id = String(object.id);
                if (object.message != null)
                    message.message = String(object.message);
                if (object.expression != null)
                    message.expression = String(object.expression);
                return message;
            };

            /**
             * Creates a plain object from a Constraint message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.Constraint
             * @static
             * @param {buf.validate.Constraint} message Constraint
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Constraint.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.id = "";
                    object.message = "";
                    object.expression = "";
                }
                if (message.id != null && message.hasOwnProperty("id"))
                    object.id = message.id;
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                if (message.expression != null && message.hasOwnProperty("expression"))
                    object.expression = message.expression;
                return object;
            };

            /**
             * Converts this Constraint to JSON.
             * @function toJSON
             * @memberof buf.validate.Constraint
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Constraint.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Constraint
             * @function getTypeUrl
             * @memberof buf.validate.Constraint
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Constraint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.Constraint";
            };

            return Constraint;
        })();

        validate.Violations = (function() {

            /**
             * Properties of a Violations.
             * @memberof buf.validate
             * @interface IViolations
             * @property {Array.<buf.validate.IViolation>|null} [violations] Violations violations
             */

            /**
             * Constructs a new Violations.
             * @memberof buf.validate
             * @classdesc Represents a Violations.
             * @implements IViolations
             * @constructor
             * @param {buf.validate.IViolations=} [properties] Properties to set
             */
            function Violations(properties) {
                this.violations = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Violations violations.
             * @member {Array.<buf.validate.IViolation>} violations
             * @memberof buf.validate.Violations
             * @instance
             */
            Violations.prototype.violations = $util.emptyArray;

            /**
             * Creates a new Violations instance using the specified properties.
             * @function create
             * @memberof buf.validate.Violations
             * @static
             * @param {buf.validate.IViolations=} [properties] Properties to set
             * @returns {buf.validate.Violations} Violations instance
             */
            Violations.create = function create(properties) {
                return new Violations(properties);
            };

            /**
             * Encodes the specified Violations message. Does not implicitly {@link buf.validate.Violations.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.Violations
             * @static
             * @param {buf.validate.IViolations} message Violations message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Violations.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.violations != null && message.violations.length)
                    for (let i = 0; i < message.violations.length; ++i)
                        $root.buf.validate.Violation.encode(message.violations[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified Violations message, length delimited. Does not implicitly {@link buf.validate.Violations.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.Violations
             * @static
             * @param {buf.validate.IViolations} message Violations message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Violations.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Violations message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.Violations
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.Violations} Violations
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Violations.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.Violations();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.violations && message.violations.length))
                                message.violations = [];
                            message.violations.push($root.buf.validate.Violation.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Violations message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.Violations
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.Violations} Violations
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Violations.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Violations message.
             * @function verify
             * @memberof buf.validate.Violations
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Violations.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.violations != null && message.hasOwnProperty("violations")) {
                    if (!Array.isArray(message.violations))
                        return "violations: array expected";
                    for (let i = 0; i < message.violations.length; ++i) {
                        let error = $root.buf.validate.Violation.verify(message.violations[i]);
                        if (error)
                            return "violations." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a Violations message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.Violations
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.Violations} Violations
             */
            Violations.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.Violations)
                    return object;
                let message = new $root.buf.validate.Violations();
                if (object.violations) {
                    if (!Array.isArray(object.violations))
                        throw TypeError(".buf.validate.Violations.violations: array expected");
                    message.violations = [];
                    for (let i = 0; i < object.violations.length; ++i) {
                        if (typeof object.violations[i] !== "object")
                            throw TypeError(".buf.validate.Violations.violations: object expected");
                        message.violations[i] = $root.buf.validate.Violation.fromObject(object.violations[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a Violations message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.Violations
             * @static
             * @param {buf.validate.Violations} message Violations
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Violations.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.violations = [];
                if (message.violations && message.violations.length) {
                    object.violations = [];
                    for (let j = 0; j < message.violations.length; ++j)
                        object.violations[j] = $root.buf.validate.Violation.toObject(message.violations[j], options);
                }
                return object;
            };

            /**
             * Converts this Violations to JSON.
             * @function toJSON
             * @memberof buf.validate.Violations
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Violations.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Violations
             * @function getTypeUrl
             * @memberof buf.validate.Violations
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Violations.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.Violations";
            };

            return Violations;
        })();

        validate.Violation = (function() {

            /**
             * Properties of a Violation.
             * @memberof buf.validate
             * @interface IViolation
             * @property {string|null} [fieldPath] Violation fieldPath
             * @property {string|null} [constraintId] Violation constraintId
             * @property {string|null} [message] Violation message
             * @property {boolean|null} [forKey] Violation forKey
             */

            /**
             * Constructs a new Violation.
             * @memberof buf.validate
             * @classdesc Represents a Violation.
             * @implements IViolation
             * @constructor
             * @param {buf.validate.IViolation=} [properties] Properties to set
             */
            function Violation(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Violation fieldPath.
             * @member {string} fieldPath
             * @memberof buf.validate.Violation
             * @instance
             */
            Violation.prototype.fieldPath = "";

            /**
             * Violation constraintId.
             * @member {string} constraintId
             * @memberof buf.validate.Violation
             * @instance
             */
            Violation.prototype.constraintId = "";

            /**
             * Violation message.
             * @member {string} message
             * @memberof buf.validate.Violation
             * @instance
             */
            Violation.prototype.message = "";

            /**
             * Violation forKey.
             * @member {boolean} forKey
             * @memberof buf.validate.Violation
             * @instance
             */
            Violation.prototype.forKey = false;

            /**
             * Creates a new Violation instance using the specified properties.
             * @function create
             * @memberof buf.validate.Violation
             * @static
             * @param {buf.validate.IViolation=} [properties] Properties to set
             * @returns {buf.validate.Violation} Violation instance
             */
            Violation.create = function create(properties) {
                return new Violation(properties);
            };

            /**
             * Encodes the specified Violation message. Does not implicitly {@link buf.validate.Violation.verify|verify} messages.
             * @function encode
             * @memberof buf.validate.Violation
             * @static
             * @param {buf.validate.IViolation} message Violation message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Violation.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.fieldPath != null && Object.hasOwnProperty.call(message, "fieldPath"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.fieldPath);
                if (message.constraintId != null && Object.hasOwnProperty.call(message, "constraintId"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.constraintId);
                if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.message);
                if (message.forKey != null && Object.hasOwnProperty.call(message, "forKey"))
                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.forKey);
                return writer;
            };

            /**
             * Encodes the specified Violation message, length delimited. Does not implicitly {@link buf.validate.Violation.verify|verify} messages.
             * @function encodeDelimited
             * @memberof buf.validate.Violation
             * @static
             * @param {buf.validate.IViolation} message Violation message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Violation.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Violation message from the specified reader or buffer.
             * @function decode
             * @memberof buf.validate.Violation
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {buf.validate.Violation} Violation
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Violation.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.Violation();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.fieldPath = reader.string();
                            break;
                        }
                    case 2: {
                            message.constraintId = reader.string();
                            break;
                        }
                    case 3: {
                            message.message = reader.string();
                            break;
                        }
                    case 4: {
                            message.forKey = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Violation message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof buf.validate.Violation
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {buf.validate.Violation} Violation
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Violation.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Violation message.
             * @function verify
             * @memberof buf.validate.Violation
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Violation.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.fieldPath != null && message.hasOwnProperty("fieldPath"))
                    if (!$util.isString(message.fieldPath))
                        return "fieldPath: string expected";
                if (message.constraintId != null && message.hasOwnProperty("constraintId"))
                    if (!$util.isString(message.constraintId))
                        return "constraintId: string expected";
                if (message.message != null && message.hasOwnProperty("message"))
                    if (!$util.isString(message.message))
                        return "message: string expected";
                if (message.forKey != null && message.hasOwnProperty("forKey"))
                    if (typeof message.forKey !== "boolean")
                        return "forKey: boolean expected";
                return null;
            };

            /**
             * Creates a Violation message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof buf.validate.Violation
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {buf.validate.Violation} Violation
             */
            Violation.fromObject = function fromObject(object) {
                if (object instanceof $root.buf.validate.Violation)
                    return object;
                let message = new $root.buf.validate.Violation();
                if (object.fieldPath != null)
                    message.fieldPath = String(object.fieldPath);
                if (object.constraintId != null)
                    message.constraintId = String(object.constraintId);
                if (object.message != null)
                    message.message = String(object.message);
                if (object.forKey != null)
                    message.forKey = Boolean(object.forKey);
                return message;
            };

            /**
             * Creates a plain object from a Violation message. Also converts values to other types if specified.
             * @function toObject
             * @memberof buf.validate.Violation
             * @static
             * @param {buf.validate.Violation} message Violation
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Violation.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.fieldPath = "";
                    object.constraintId = "";
                    object.message = "";
                    object.forKey = false;
                }
                if (message.fieldPath != null && message.hasOwnProperty("fieldPath"))
                    object.fieldPath = message.fieldPath;
                if (message.constraintId != null && message.hasOwnProperty("constraintId"))
                    object.constraintId = message.constraintId;
                if (message.message != null && message.hasOwnProperty("message"))
                    object.message = message.message;
                if (message.forKey != null && message.hasOwnProperty("forKey"))
                    object.forKey = message.forKey;
                return object;
            };

            /**
             * Converts this Violation to JSON.
             * @function toJSON
             * @memberof buf.validate.Violation
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Violation.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Violation
             * @function getTypeUrl
             * @memberof buf.validate.Violation
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Violation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/buf.validate.Violation";
            };

            return Violation;
        })();

        validate.priv = (function() {

            /**
             * Namespace priv.
             * @memberof buf.validate
             * @namespace
             */
            const priv = {};

            priv.FieldConstraints = (function() {

                /**
                 * Properties of a FieldConstraints.
                 * @memberof buf.validate.priv
                 * @interface IFieldConstraints
                 * @property {Array.<buf.validate.priv.IConstraint>|null} [cel] FieldConstraints cel
                 */

                /**
                 * Constructs a new FieldConstraints.
                 * @memberof buf.validate.priv
                 * @classdesc Represents a FieldConstraints.
                 * @implements IFieldConstraints
                 * @constructor
                 * @param {buf.validate.priv.IFieldConstraints=} [properties] Properties to set
                 */
                function FieldConstraints(properties) {
                    this.cel = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * FieldConstraints cel.
                 * @member {Array.<buf.validate.priv.IConstraint>} cel
                 * @memberof buf.validate.priv.FieldConstraints
                 * @instance
                 */
                FieldConstraints.prototype.cel = $util.emptyArray;

                /**
                 * Creates a new FieldConstraints instance using the specified properties.
                 * @function create
                 * @memberof buf.validate.priv.FieldConstraints
                 * @static
                 * @param {buf.validate.priv.IFieldConstraints=} [properties] Properties to set
                 * @returns {buf.validate.priv.FieldConstraints} FieldConstraints instance
                 */
                FieldConstraints.create = function create(properties) {
                    return new FieldConstraints(properties);
                };

                /**
                 * Encodes the specified FieldConstraints message. Does not implicitly {@link buf.validate.priv.FieldConstraints.verify|verify} messages.
                 * @function encode
                 * @memberof buf.validate.priv.FieldConstraints
                 * @static
                 * @param {buf.validate.priv.IFieldConstraints} message FieldConstraints message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldConstraints.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.cel != null && message.cel.length)
                        for (let i = 0; i < message.cel.length; ++i)
                            $root.buf.validate.priv.Constraint.encode(message.cel[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified FieldConstraints message, length delimited. Does not implicitly {@link buf.validate.priv.FieldConstraints.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof buf.validate.priv.FieldConstraints
                 * @static
                 * @param {buf.validate.priv.IFieldConstraints} message FieldConstraints message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldConstraints.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a FieldConstraints message from the specified reader or buffer.
                 * @function decode
                 * @memberof buf.validate.priv.FieldConstraints
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {buf.validate.priv.FieldConstraints} FieldConstraints
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldConstraints.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.priv.FieldConstraints();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.cel && message.cel.length))
                                    message.cel = [];
                                message.cel.push($root.buf.validate.priv.Constraint.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a FieldConstraints message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof buf.validate.priv.FieldConstraints
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {buf.validate.priv.FieldConstraints} FieldConstraints
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldConstraints.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a FieldConstraints message.
                 * @function verify
                 * @memberof buf.validate.priv.FieldConstraints
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldConstraints.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.cel != null && message.hasOwnProperty("cel")) {
                        if (!Array.isArray(message.cel))
                            return "cel: array expected";
                        for (let i = 0; i < message.cel.length; ++i) {
                            let error = $root.buf.validate.priv.Constraint.verify(message.cel[i]);
                            if (error)
                                return "cel." + error;
                        }
                    }
                    return null;
                };

                /**
                 * Creates a FieldConstraints message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof buf.validate.priv.FieldConstraints
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {buf.validate.priv.FieldConstraints} FieldConstraints
                 */
                FieldConstraints.fromObject = function fromObject(object) {
                    if (object instanceof $root.buf.validate.priv.FieldConstraints)
                        return object;
                    let message = new $root.buf.validate.priv.FieldConstraints();
                    if (object.cel) {
                        if (!Array.isArray(object.cel))
                            throw TypeError(".buf.validate.priv.FieldConstraints.cel: array expected");
                        message.cel = [];
                        for (let i = 0; i < object.cel.length; ++i) {
                            if (typeof object.cel[i] !== "object")
                                throw TypeError(".buf.validate.priv.FieldConstraints.cel: object expected");
                            message.cel[i] = $root.buf.validate.priv.Constraint.fromObject(object.cel[i]);
                        }
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a FieldConstraints message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof buf.validate.priv.FieldConstraints
                 * @static
                 * @param {buf.validate.priv.FieldConstraints} message FieldConstraints
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldConstraints.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.cel = [];
                    if (message.cel && message.cel.length) {
                        object.cel = [];
                        for (let j = 0; j < message.cel.length; ++j)
                            object.cel[j] = $root.buf.validate.priv.Constraint.toObject(message.cel[j], options);
                    }
                    return object;
                };

                /**
                 * Converts this FieldConstraints to JSON.
                 * @function toJSON
                 * @memberof buf.validate.priv.FieldConstraints
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldConstraints.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for FieldConstraints
                 * @function getTypeUrl
                 * @memberof buf.validate.priv.FieldConstraints
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldConstraints.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/buf.validate.priv.FieldConstraints";
                };

                return FieldConstraints;
            })();

            priv.Constraint = (function() {

                /**
                 * Properties of a Constraint.
                 * @memberof buf.validate.priv
                 * @interface IConstraint
                 * @property {string|null} [id] Constraint id
                 * @property {string|null} [message] Constraint message
                 * @property {string|null} [expression] Constraint expression
                 */

                /**
                 * Constructs a new Constraint.
                 * @memberof buf.validate.priv
                 * @classdesc Represents a Constraint.
                 * @implements IConstraint
                 * @constructor
                 * @param {buf.validate.priv.IConstraint=} [properties] Properties to set
                 */
                function Constraint(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Constraint id.
                 * @member {string} id
                 * @memberof buf.validate.priv.Constraint
                 * @instance
                 */
                Constraint.prototype.id = "";

                /**
                 * Constraint message.
                 * @member {string} message
                 * @memberof buf.validate.priv.Constraint
                 * @instance
                 */
                Constraint.prototype.message = "";

                /**
                 * Constraint expression.
                 * @member {string} expression
                 * @memberof buf.validate.priv.Constraint
                 * @instance
                 */
                Constraint.prototype.expression = "";

                /**
                 * Creates a new Constraint instance using the specified properties.
                 * @function create
                 * @memberof buf.validate.priv.Constraint
                 * @static
                 * @param {buf.validate.priv.IConstraint=} [properties] Properties to set
                 * @returns {buf.validate.priv.Constraint} Constraint instance
                 */
                Constraint.create = function create(properties) {
                    return new Constraint(properties);
                };

                /**
                 * Encodes the specified Constraint message. Does not implicitly {@link buf.validate.priv.Constraint.verify|verify} messages.
                 * @function encode
                 * @memberof buf.validate.priv.Constraint
                 * @static
                 * @param {buf.validate.priv.IConstraint} message Constraint message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Constraint.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);
                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.message);
                    if (message.expression != null && Object.hasOwnProperty.call(message, "expression"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.expression);
                    return writer;
                };

                /**
                 * Encodes the specified Constraint message, length delimited. Does not implicitly {@link buf.validate.priv.Constraint.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof buf.validate.priv.Constraint
                 * @static
                 * @param {buf.validate.priv.IConstraint} message Constraint message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Constraint.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Constraint message from the specified reader or buffer.
                 * @function decode
                 * @memberof buf.validate.priv.Constraint
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {buf.validate.priv.Constraint} Constraint
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Constraint.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.buf.validate.priv.Constraint();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.id = reader.string();
                                break;
                            }
                        case 2: {
                                message.message = reader.string();
                                break;
                            }
                        case 3: {
                                message.expression = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Constraint message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof buf.validate.priv.Constraint
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {buf.validate.priv.Constraint} Constraint
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Constraint.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Constraint message.
                 * @function verify
                 * @memberof buf.validate.priv.Constraint
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Constraint.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isString(message.id))
                            return "id: string expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    if (message.expression != null && message.hasOwnProperty("expression"))
                        if (!$util.isString(message.expression))
                            return "expression: string expected";
                    return null;
                };

                /**
                 * Creates a Constraint message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof buf.validate.priv.Constraint
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {buf.validate.priv.Constraint} Constraint
                 */
                Constraint.fromObject = function fromObject(object) {
                    if (object instanceof $root.buf.validate.priv.Constraint)
                        return object;
                    let message = new $root.buf.validate.priv.Constraint();
                    if (object.id != null)
                        message.id = String(object.id);
                    if (object.message != null)
                        message.message = String(object.message);
                    if (object.expression != null)
                        message.expression = String(object.expression);
                    return message;
                };

                /**
                 * Creates a plain object from a Constraint message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof buf.validate.priv.Constraint
                 * @static
                 * @param {buf.validate.priv.Constraint} message Constraint
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Constraint.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.id = "";
                        object.message = "";
                        object.expression = "";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        object.id = message.id;
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    if (message.expression != null && message.hasOwnProperty("expression"))
                        object.expression = message.expression;
                    return object;
                };

                /**
                 * Converts this Constraint to JSON.
                 * @function toJSON
                 * @memberof buf.validate.priv.Constraint
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Constraint.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Constraint
                 * @function getTypeUrl
                 * @memberof buf.validate.priv.Constraint
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Constraint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/buf.validate.priv.Constraint";
                };

                return Constraint;
            })();

            return priv;
        })();

        return validate;
    })();

    return buf;
})();

export const google = $root.google = (() => {

    /**
     * Namespace google.
     * @exports google
     * @namespace
     */
    const google = {};

    google.protobuf = (function() {

        /**
         * Namespace protobuf.
         * @memberof google
         * @namespace
         */
        const protobuf = {};

        protobuf.Empty = (function() {

            /**
             * Properties of an Empty.
             * @memberof google.protobuf
             * @interface IEmpty
             */

            /**
             * Constructs a new Empty.
             * @memberof google.protobuf
             * @classdesc Represents an Empty.
             * @implements IEmpty
             * @constructor
             * @param {google.protobuf.IEmpty=} [properties] Properties to set
             */
            function Empty(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Creates a new Empty instance using the specified properties.
             * @function create
             * @memberof google.protobuf.Empty
             * @static
             * @param {google.protobuf.IEmpty=} [properties] Properties to set
             * @returns {google.protobuf.Empty} Empty instance
             */
            Empty.create = function create(properties) {
                return new Empty(properties);
            };

            /**
             * Encodes the specified Empty message. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Empty
             * @static
             * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Empty.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                return writer;
            };

            /**
             * Encodes the specified Empty message, length delimited. Does not implicitly {@link google.protobuf.Empty.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Empty
             * @static
             * @param {google.protobuf.IEmpty} message Empty message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Empty.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an Empty message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Empty
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Empty} Empty
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Empty.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Empty();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an Empty message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Empty
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Empty} Empty
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Empty.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an Empty message.
             * @function verify
             * @memberof google.protobuf.Empty
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Empty.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                return null;
            };

            /**
             * Creates an Empty message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Empty
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Empty} Empty
             */
            Empty.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Empty)
                    return object;
                return new $root.google.protobuf.Empty();
            };

            /**
             * Creates a plain object from an Empty message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Empty
             * @static
             * @param {google.protobuf.Empty} message Empty
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Empty.toObject = function toObject() {
                return {};
            };

            /**
             * Converts this Empty to JSON.
             * @function toJSON
             * @memberof google.protobuf.Empty
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Empty.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Empty
             * @function getTypeUrl
             * @memberof google.protobuf.Empty
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Empty.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.Empty";
            };

            return Empty;
        })();

        protobuf.FileDescriptorSet = (function() {

            /**
             * Properties of a FileDescriptorSet.
             * @memberof google.protobuf
             * @interface IFileDescriptorSet
             * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
             */

            /**
             * Constructs a new FileDescriptorSet.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorSet.
             * @implements IFileDescriptorSet
             * @constructor
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             */
            function FileDescriptorSet(properties) {
                this.file = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorSet file.
             * @member {Array.<google.protobuf.IFileDescriptorProto>} file
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             */
            FileDescriptorSet.prototype.file = $util.emptyArray;

            /**
             * Creates a new FileDescriptorSet instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
             */
            FileDescriptorSet.create = function create(properties) {
                return new FileDescriptorSet(properties);
            };

            /**
             * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.file != null && message.file.length)
                    for (let i = 0; i < message.file.length; ++i)
                        $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.file && message.file.length))
                                message.file = [];
                            message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorSet message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorSet.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.file != null && message.hasOwnProperty("file")) {
                    if (!Array.isArray(message.file))
                        return "file: array expected";
                    for (let i = 0; i < message.file.length; ++i) {
                        let error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                        if (error)
                            return "file." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
             */
            FileDescriptorSet.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorSet)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorSet();
                if (object.file) {
                    if (!Array.isArray(object.file))
                        throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                    message.file = [];
                    for (let i = 0; i < object.file.length; ++i) {
                        if (typeof object.file[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                        message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorSet.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.file = [];
                if (message.file && message.file.length) {
                    object.file = [];
                    for (let j = 0; j < message.file.length; ++j)
                        object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                }
                return object;
            };

            /**
             * Converts this FileDescriptorSet to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorSet
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorSet.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FileDescriptorSet
             * @function getTypeUrl
             * @memberof google.protobuf.FileDescriptorSet
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FileDescriptorSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.FileDescriptorSet";
            };

            return FileDescriptorSet;
        })();

        protobuf.FileDescriptorProto = (function() {

            /**
             * Properties of a FileDescriptorProto.
             * @memberof google.protobuf
             * @interface IFileDescriptorProto
             * @property {string|null} [name] FileDescriptorProto name
             * @property {string|null} ["package"] FileDescriptorProto package
             * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
             * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
             * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
             * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
             * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
             * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
             * @property {string|null} [syntax] FileDescriptorProto syntax
             */

            /**
             * Constructs a new FileDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FileDescriptorProto.
             * @implements IFileDescriptorProto
             * @constructor
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             */
            function FileDescriptorProto(properties) {
                this.dependency = [];
                this.publicDependency = [];
                this.weakDependency = [];
                this.messageType = [];
                this.enumType = [];
                this.service = [];
                this.extension = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.name = "";

            /**
             * FileDescriptorProto package.
             * @member {string} package
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype["package"] = "";

            /**
             * FileDescriptorProto dependency.
             * @member {Array.<string>} dependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.dependency = $util.emptyArray;

            /**
             * FileDescriptorProto publicDependency.
             * @member {Array.<number>} publicDependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.publicDependency = $util.emptyArray;

            /**
             * FileDescriptorProto weakDependency.
             * @member {Array.<number>} weakDependency
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.weakDependency = $util.emptyArray;

            /**
             * FileDescriptorProto messageType.
             * @member {Array.<google.protobuf.IDescriptorProto>} messageType
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.messageType = $util.emptyArray;

            /**
             * FileDescriptorProto enumType.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.enumType = $util.emptyArray;

            /**
             * FileDescriptorProto service.
             * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.service = $util.emptyArray;

            /**
             * FileDescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * FileDescriptorProto options.
             * @member {google.protobuf.IFileOptions|null|undefined} options
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.options = null;

            /**
             * FileDescriptorProto sourceCodeInfo.
             * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.sourceCodeInfo = null;

            /**
             * FileDescriptorProto syntax.
             * @member {string} syntax
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             */
            FileDescriptorProto.prototype.syntax = "";

            /**
             * Creates a new FileDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
             */
            FileDescriptorProto.create = function create(properties) {
                return new FileDescriptorProto(properties);
            };

            /**
             * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                if (message.dependency != null && message.dependency.length)
                    for (let i = 0; i < message.dependency.length; ++i)
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                if (message.messageType != null && message.messageType.length)
                    for (let i = 0; i < message.messageType.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.enumType != null && message.enumType.length)
                    for (let i = 0; i < message.enumType.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.service != null && message.service.length)
                    for (let i = 0; i < message.service.length; ++i)
                        $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (let i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                    $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.publicDependency != null && message.publicDependency.length)
                    for (let i = 0; i < message.publicDependency.length; ++i)
                        writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                if (message.weakDependency != null && message.weakDependency.length)
                    for (let i = 0; i < message.weakDependency.length; ++i)
                        writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                return writer;
            };

            /**
             * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            message["package"] = reader.string();
                            break;
                        }
                    case 3: {
                            if (!(message.dependency && message.dependency.length))
                                message.dependency = [];
                            message.dependency.push(reader.string());
                            break;
                        }
                    case 10: {
                            if (!(message.publicDependency && message.publicDependency.length))
                                message.publicDependency = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.publicDependency.push(reader.int32());
                            } else
                                message.publicDependency.push(reader.int32());
                            break;
                        }
                    case 11: {
                            if (!(message.weakDependency && message.weakDependency.length))
                                message.weakDependency = [];
                            if ((tag & 7) === 2) {
                                let end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.weakDependency.push(reader.int32());
                            } else
                                message.weakDependency.push(reader.int32());
                            break;
                        }
                    case 4: {
                            if (!(message.messageType && message.messageType.length))
                                message.messageType = [];
                            message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 5: {
                            if (!(message.enumType && message.enumType.length))
                                message.enumType = [];
                            message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 6: {
                            if (!(message.service && message.service.length))
                                message.service = [];
                            message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 7: {
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 8: {
                            message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                            break;
                        }
                    case 12: {
                            message.syntax = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message["package"] != null && message.hasOwnProperty("package"))
                    if (!$util.isString(message["package"]))
                        return "package: string expected";
                if (message.dependency != null && message.hasOwnProperty("dependency")) {
                    if (!Array.isArray(message.dependency))
                        return "dependency: array expected";
                    for (let i = 0; i < message.dependency.length; ++i)
                        if (!$util.isString(message.dependency[i]))
                            return "dependency: string[] expected";
                }
                if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                    if (!Array.isArray(message.publicDependency))
                        return "publicDependency: array expected";
                    for (let i = 0; i < message.publicDependency.length; ++i)
                        if (!$util.isInteger(message.publicDependency[i]))
                            return "publicDependency: integer[] expected";
                }
                if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                    if (!Array.isArray(message.weakDependency))
                        return "weakDependency: array expected";
                    for (let i = 0; i < message.weakDependency.length; ++i)
                        if (!$util.isInteger(message.weakDependency[i]))
                            return "weakDependency: integer[] expected";
                }
                if (message.messageType != null && message.hasOwnProperty("messageType")) {
                    if (!Array.isArray(message.messageType))
                        return "messageType: array expected";
                    for (let i = 0; i < message.messageType.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                        if (error)
                            return "messageType." + error;
                    }
                }
                if (message.enumType != null && message.hasOwnProperty("enumType")) {
                    if (!Array.isArray(message.enumType))
                        return "enumType: array expected";
                    for (let i = 0; i < message.enumType.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                        if (error)
                            return "enumType." + error;
                    }
                }
                if (message.service != null && message.hasOwnProperty("service")) {
                    if (!Array.isArray(message.service))
                        return "service: array expected";
                    for (let i = 0; i < message.service.length; ++i) {
                        let error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                        if (error)
                            return "service." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FileOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                    let error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                    if (error)
                        return "sourceCodeInfo." + error;
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    if (!$util.isString(message.syntax))
                        return "syntax: string expected";
                return null;
            };

            /**
             * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
             */
            FileDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FileDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object["package"] != null)
                    message["package"] = String(object["package"]);
                if (object.dependency) {
                    if (!Array.isArray(object.dependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                    message.dependency = [];
                    for (let i = 0; i < object.dependency.length; ++i)
                        message.dependency[i] = String(object.dependency[i]);
                }
                if (object.publicDependency) {
                    if (!Array.isArray(object.publicDependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                    message.publicDependency = [];
                    for (let i = 0; i < object.publicDependency.length; ++i)
                        message.publicDependency[i] = object.publicDependency[i] | 0;
                }
                if (object.weakDependency) {
                    if (!Array.isArray(object.weakDependency))
                        throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                    message.weakDependency = [];
                    for (let i = 0; i < object.weakDependency.length; ++i)
                        message.weakDependency[i] = object.weakDependency[i] | 0;
                }
                if (object.messageType) {
                    if (!Array.isArray(object.messageType))
                        throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                    message.messageType = [];
                    for (let i = 0; i < object.messageType.length; ++i) {
                        if (typeof object.messageType[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                        message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                    }
                }
                if (object.enumType) {
                    if (!Array.isArray(object.enumType))
                        throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                    message.enumType = [];
                    for (let i = 0; i < object.enumType.length; ++i) {
                        if (typeof object.enumType[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                        message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                    }
                }
                if (object.service) {
                    if (!Array.isArray(object.service))
                        throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                    message.service = [];
                    for (let i = 0; i < object.service.length; ++i) {
                        if (typeof object.service[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                        message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                }
                if (object.sourceCodeInfo != null) {
                    if (typeof object.sourceCodeInfo !== "object")
                        throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                    message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                }
                if (object.syntax != null)
                    message.syntax = String(object.syntax);
                return message;
            };

            /**
             * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.dependency = [];
                    object.messageType = [];
                    object.enumType = [];
                    object.service = [];
                    object.extension = [];
                    object.publicDependency = [];
                    object.weakDependency = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object["package"] = "";
                    object.options = null;
                    object.sourceCodeInfo = null;
                    object.syntax = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message["package"] != null && message.hasOwnProperty("package"))
                    object["package"] = message["package"];
                if (message.dependency && message.dependency.length) {
                    object.dependency = [];
                    for (let j = 0; j < message.dependency.length; ++j)
                        object.dependency[j] = message.dependency[j];
                }
                if (message.messageType && message.messageType.length) {
                    object.messageType = [];
                    for (let j = 0; j < message.messageType.length; ++j)
                        object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                }
                if (message.enumType && message.enumType.length) {
                    object.enumType = [];
                    for (let j = 0; j < message.enumType.length; ++j)
                        object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                }
                if (message.service && message.service.length) {
                    object.service = [];
                    for (let j = 0; j < message.service.length; ++j)
                        object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                    object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                if (message.publicDependency && message.publicDependency.length) {
                    object.publicDependency = [];
                    for (let j = 0; j < message.publicDependency.length; ++j)
                        object.publicDependency[j] = message.publicDependency[j];
                }
                if (message.weakDependency && message.weakDependency.length) {
                    object.weakDependency = [];
                    for (let j = 0; j < message.weakDependency.length; ++j)
                        object.weakDependency[j] = message.weakDependency[j];
                }
                if (message.syntax != null && message.hasOwnProperty("syntax"))
                    object.syntax = message.syntax;
                return object;
            };

            /**
             * Converts this FileDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FileDescriptorProto
             * @function getTypeUrl
             * @memberof google.protobuf.FileDescriptorProto
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FileDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.FileDescriptorProto";
            };

            return FileDescriptorProto;
        })();

        protobuf.DescriptorProto = (function() {

            /**
             * Properties of a DescriptorProto.
             * @memberof google.protobuf
             * @interface IDescriptorProto
             * @property {string|null} [name] DescriptorProto name
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
             * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
             * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
             * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
             * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
             * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
             * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
             * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
             * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
             */

            /**
             * Constructs a new DescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a DescriptorProto.
             * @implements IDescriptorProto
             * @constructor
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             */
            function DescriptorProto(properties) {
                this.field = [];
                this.extension = [];
                this.nestedType = [];
                this.enumType = [];
                this.extensionRange = [];
                this.oneofDecl = [];
                this.reservedRange = [];
                this.reservedName = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * DescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.name = "";

            /**
             * DescriptorProto field.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.field = $util.emptyArray;

            /**
             * DescriptorProto extension.
             * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extension = $util.emptyArray;

            /**
             * DescriptorProto nestedType.
             * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.nestedType = $util.emptyArray;

            /**
             * DescriptorProto enumType.
             * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.enumType = $util.emptyArray;

            /**
             * DescriptorProto extensionRange.
             * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.extensionRange = $util.emptyArray;

            /**
             * DescriptorProto oneofDecl.
             * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.oneofDecl = $util.emptyArray;

            /**
             * DescriptorProto options.
             * @member {google.protobuf.IMessageOptions|null|undefined} options
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.options = null;

            /**
             * DescriptorProto reservedRange.
             * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reservedRange = $util.emptyArray;

            /**
             * DescriptorProto reservedName.
             * @member {Array.<string>} reservedName
             * @memberof google.protobuf.DescriptorProto
             * @instance
             */
            DescriptorProto.prototype.reservedName = $util.emptyArray;

            /**
             * Creates a new DescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
             */
            DescriptorProto.create = function create(properties) {
                return new DescriptorProto(properties);
            };

            /**
             * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.field != null && message.field.length)
                    for (let i = 0; i < message.field.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.nestedType != null && message.nestedType.length)
                    for (let i = 0; i < message.nestedType.length; ++i)
                        $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.enumType != null && message.enumType.length)
                    for (let i = 0; i < message.enumType.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.extensionRange != null && message.extensionRange.length)
                    for (let i = 0; i < message.extensionRange.length; ++i)
                        $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                if (message.extension != null && message.extension.length)
                    for (let i = 0; i < message.extension.length; ++i)
                        $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                if (message.oneofDecl != null && message.oneofDecl.length)
                    for (let i = 0; i < message.oneofDecl.length; ++i)
                        $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.reservedRange != null && message.reservedRange.length)
                    for (let i = 0; i < message.reservedRange.length; ++i)
                        $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                if (message.reservedName != null && message.reservedName.length)
                    for (let i = 0; i < message.reservedName.length; ++i)
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                return writer;
            };

            /**
             * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            if (!(message.field && message.field.length))
                                message.field = [];
                            message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 6: {
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            if (!(message.nestedType && message.nestedType.length))
                                message.nestedType = [];
                            message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 4: {
                            if (!(message.enumType && message.enumType.length))
                                message.enumType = [];
                            message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 5: {
                            if (!(message.extensionRange && message.extensionRange.length))
                                message.extensionRange = [];
                            message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                            break;
                        }
                    case 8: {
                            if (!(message.oneofDecl && message.oneofDecl.length))
                                message.oneofDecl = [];
                            message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 7: {
                            message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                            break;
                        }
                    case 9: {
                            if (!(message.reservedRange && message.reservedRange.length))
                                message.reservedRange = [];
                            message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                            break;
                        }
                    case 10: {
                            if (!(message.reservedName && message.reservedName.length))
                                message.reservedName = [];
                            message.reservedName.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a DescriptorProto message.
             * @function verify
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            DescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.field != null && message.hasOwnProperty("field")) {
                    if (!Array.isArray(message.field))
                        return "field: array expected";
                    for (let i = 0; i < message.field.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                        if (error)
                            return "field." + error;
                    }
                }
                if (message.extension != null && message.hasOwnProperty("extension")) {
                    if (!Array.isArray(message.extension))
                        return "extension: array expected";
                    for (let i = 0; i < message.extension.length; ++i) {
                        let error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                        if (error)
                            return "extension." + error;
                    }
                }
                if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                    if (!Array.isArray(message.nestedType))
                        return "nestedType: array expected";
                    for (let i = 0; i < message.nestedType.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                        if (error)
                            return "nestedType." + error;
                    }
                }
                if (message.enumType != null && message.hasOwnProperty("enumType")) {
                    if (!Array.isArray(message.enumType))
                        return "enumType: array expected";
                    for (let i = 0; i < message.enumType.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                        if (error)
                            return "enumType." + error;
                    }
                }
                if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                    if (!Array.isArray(message.extensionRange))
                        return "extensionRange: array expected";
                    for (let i = 0; i < message.extensionRange.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                        if (error)
                            return "extensionRange." + error;
                    }
                }
                if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                    if (!Array.isArray(message.oneofDecl))
                        return "oneofDecl: array expected";
                    for (let i = 0; i < message.oneofDecl.length; ++i) {
                        let error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                        if (error)
                            return "oneofDecl." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MessageOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                    if (!Array.isArray(message.reservedRange))
                        return "reservedRange: array expected";
                    for (let i = 0; i < message.reservedRange.length; ++i) {
                        let error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                        if (error)
                            return "reservedRange." + error;
                    }
                }
                if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                    if (!Array.isArray(message.reservedName))
                        return "reservedName: array expected";
                    for (let i = 0; i < message.reservedName.length; ++i)
                        if (!$util.isString(message.reservedName[i]))
                            return "reservedName: string[] expected";
                }
                return null;
            };

            /**
             * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.DescriptorProto} DescriptorProto
             */
            DescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.DescriptorProto)
                    return object;
                let message = new $root.google.protobuf.DescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.field) {
                    if (!Array.isArray(object.field))
                        throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                    message.field = [];
                    for (let i = 0; i < object.field.length; ++i) {
                        if (typeof object.field[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                        message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                    }
                }
                if (object.extension) {
                    if (!Array.isArray(object.extension))
                        throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                    message.extension = [];
                    for (let i = 0; i < object.extension.length; ++i) {
                        if (typeof object.extension[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                        message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                    }
                }
                if (object.nestedType) {
                    if (!Array.isArray(object.nestedType))
                        throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                    message.nestedType = [];
                    for (let i = 0; i < object.nestedType.length; ++i) {
                        if (typeof object.nestedType[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                        message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                    }
                }
                if (object.enumType) {
                    if (!Array.isArray(object.enumType))
                        throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                    message.enumType = [];
                    for (let i = 0; i < object.enumType.length; ++i) {
                        if (typeof object.enumType[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                        message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                    }
                }
                if (object.extensionRange) {
                    if (!Array.isArray(object.extensionRange))
                        throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                    message.extensionRange = [];
                    for (let i = 0; i < object.extensionRange.length; ++i) {
                        if (typeof object.extensionRange[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                        message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                    }
                }
                if (object.oneofDecl) {
                    if (!Array.isArray(object.oneofDecl))
                        throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                    message.oneofDecl = [];
                    for (let i = 0; i < object.oneofDecl.length; ++i) {
                        if (typeof object.oneofDecl[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                        message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                }
                if (object.reservedRange) {
                    if (!Array.isArray(object.reservedRange))
                        throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                    message.reservedRange = [];
                    for (let i = 0; i < object.reservedRange.length; ++i) {
                        if (typeof object.reservedRange[i] !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                        message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                    }
                }
                if (object.reservedName) {
                    if (!Array.isArray(object.reservedName))
                        throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                    message.reservedName = [];
                    for (let i = 0; i < object.reservedName.length; ++i)
                        message.reservedName[i] = String(object.reservedName[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {google.protobuf.DescriptorProto} message DescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            DescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.field = [];
                    object.nestedType = [];
                    object.enumType = [];
                    object.extensionRange = [];
                    object.extension = [];
                    object.oneofDecl = [];
                    object.reservedRange = [];
                    object.reservedName = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.field && message.field.length) {
                    object.field = [];
                    for (let j = 0; j < message.field.length; ++j)
                        object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                }
                if (message.nestedType && message.nestedType.length) {
                    object.nestedType = [];
                    for (let j = 0; j < message.nestedType.length; ++j)
                        object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                }
                if (message.enumType && message.enumType.length) {
                    object.enumType = [];
                    for (let j = 0; j < message.enumType.length; ++j)
                        object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                }
                if (message.extensionRange && message.extensionRange.length) {
                    object.extensionRange = [];
                    for (let j = 0; j < message.extensionRange.length; ++j)
                        object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                }
                if (message.extension && message.extension.length) {
                    object.extension = [];
                    for (let j = 0; j < message.extension.length; ++j)
                        object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                if (message.oneofDecl && message.oneofDecl.length) {
                    object.oneofDecl = [];
                    for (let j = 0; j < message.oneofDecl.length; ++j)
                        object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                }
                if (message.reservedRange && message.reservedRange.length) {
                    object.reservedRange = [];
                    for (let j = 0; j < message.reservedRange.length; ++j)
                        object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                }
                if (message.reservedName && message.reservedName.length) {
                    object.reservedName = [];
                    for (let j = 0; j < message.reservedName.length; ++j)
                        object.reservedName[j] = message.reservedName[j];
                }
                return object;
            };

            /**
             * Converts this DescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.DescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            DescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for DescriptorProto
             * @function getTypeUrl
             * @memberof google.protobuf.DescriptorProto
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            DescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.DescriptorProto";
            };

            DescriptorProto.ExtensionRange = (function() {

                /**
                 * Properties of an ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IExtensionRange
                 * @property {number|null} [start] ExtensionRange start
                 * @property {number|null} [end] ExtensionRange end
                 * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                 */

                /**
                 * Constructs a new ExtensionRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents an ExtensionRange.
                 * @implements IExtensionRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 */
                function ExtensionRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ExtensionRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.start = 0;

                /**
                 * ExtensionRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.end = 0;

                /**
                 * ExtensionRange options.
                 * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 */
                ExtensionRange.prototype.options = null;

                /**
                 * Creates a new ExtensionRange instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                 */
                ExtensionRange.create = function create(properties) {
                    return new ExtensionRange(properties);
                };

                /**
                 * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };

                /**
                 * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.start = reader.int32();
                                break;
                            }
                        case 2: {
                                message.end = reader.int32();
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an ExtensionRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        let error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };

                /**
                 * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                 */
                ExtensionRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                        message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                        object.options = null;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                    return object;
                };

                /**
                 * Converts this ExtensionRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for ExtensionRange
                 * @function getTypeUrl
                 * @memberof google.protobuf.DescriptorProto.ExtensionRange
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ExtensionRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.DescriptorProto.ExtensionRange";
                };

                return ExtensionRange;
            })();

            DescriptorProto.ReservedRange = (function() {

                /**
                 * Properties of a ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @interface IReservedRange
                 * @property {number|null} [start] ReservedRange start
                 * @property {number|null} [end] ReservedRange end
                 */

                /**
                 * Constructs a new ReservedRange.
                 * @memberof google.protobuf.DescriptorProto
                 * @classdesc Represents a ReservedRange.
                 * @implements IReservedRange
                 * @constructor
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 */
                function ReservedRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * ReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.start = 0;

                /**
                 * ReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 */
                ReservedRange.prototype.end = 0;

                /**
                 * Creates a new ReservedRange instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                 */
                ReservedRange.create = function create(properties) {
                    return new ReservedRange(properties);
                };

                /**
                 * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.start = reader.int32();
                                break;
                            }
                        case 2: {
                                message.end = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a ReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                 */
                ReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                        return object;
                    let message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this ReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for ReservedRange
                 * @function getTypeUrl
                 * @memberof google.protobuf.DescriptorProto.ReservedRange
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.DescriptorProto.ReservedRange";
                };

                return ReservedRange;
            })();

            return DescriptorProto;
        })();

        protobuf.ExtensionRangeOptions = (function() {

            /**
             * Properties of an ExtensionRangeOptions.
             * @memberof google.protobuf
             * @interface IExtensionRangeOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
             */

            /**
             * Constructs a new ExtensionRangeOptions.
             * @memberof google.protobuf
             * @classdesc Represents an ExtensionRangeOptions.
             * @implements IExtensionRangeOptions
             * @constructor
             * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
             */
            function ExtensionRangeOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ExtensionRangeOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.ExtensionRangeOptions
             * @instance
             */
            ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new ExtensionRangeOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
             */
            ExtensionRangeOptions.create = function create(properties) {
                return new ExtensionRangeOptions(properties);
            };

            /**
             * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExtensionRangeOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (let i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExtensionRangeOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 999: {
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an ExtensionRangeOptions message.
             * @function verify
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ExtensionRangeOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
             */
            ExtensionRangeOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                    return object;
                let message = new $root.google.protobuf.ExtensionRangeOptions();
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ExtensionRangeOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this ExtensionRangeOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ExtensionRangeOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ExtensionRangeOptions
             * @function getTypeUrl
             * @memberof google.protobuf.ExtensionRangeOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ExtensionRangeOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions";
            };

            return ExtensionRangeOptions;
        })();

        protobuf.FieldDescriptorProto = (function() {

            /**
             * Properties of a FieldDescriptorProto.
             * @memberof google.protobuf
             * @interface IFieldDescriptorProto
             * @property {string|null} [name] FieldDescriptorProto name
             * @property {number|null} [number] FieldDescriptorProto number
             * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
             * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
             * @property {string|null} [typeName] FieldDescriptorProto typeName
             * @property {string|null} [extendee] FieldDescriptorProto extendee
             * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
             * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
             * @property {string|null} [jsonName] FieldDescriptorProto jsonName
             * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
             * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
             */

            /**
             * Constructs a new FieldDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a FieldDescriptorProto.
             * @implements IFieldDescriptorProto
             * @constructor
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             */
            function FieldDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.name = "";

            /**
             * FieldDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.number = 0;

            /**
             * FieldDescriptorProto label.
             * @member {google.protobuf.FieldDescriptorProto.Label} label
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.label = 1;

            /**
             * FieldDescriptorProto type.
             * @member {google.protobuf.FieldDescriptorProto.Type} type
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.type = 1;

            /**
             * FieldDescriptorProto typeName.
             * @member {string} typeName
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.typeName = "";

            /**
             * FieldDescriptorProto extendee.
             * @member {string} extendee
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.extendee = "";

            /**
             * FieldDescriptorProto defaultValue.
             * @member {string} defaultValue
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.defaultValue = "";

            /**
             * FieldDescriptorProto oneofIndex.
             * @member {number} oneofIndex
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.oneofIndex = 0;

            /**
             * FieldDescriptorProto jsonName.
             * @member {string} jsonName
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.jsonName = "";

            /**
             * FieldDescriptorProto options.
             * @member {google.protobuf.IFieldOptions|null|undefined} options
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.options = null;

            /**
             * FieldDescriptorProto proto3Optional.
             * @member {boolean} proto3Optional
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             */
            FieldDescriptorProto.prototype.proto3Optional = false;

            /**
             * Creates a new FieldDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
             */
            FieldDescriptorProto.create = function create(properties) {
                return new FieldDescriptorProto(properties);
            };

            /**
             * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                    writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.proto3Optional);
                return writer;
            };

            /**
             * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 3: {
                            message.number = reader.int32();
                            break;
                        }
                    case 4: {
                            message.label = reader.int32();
                            break;
                        }
                    case 5: {
                            message.type = reader.int32();
                            break;
                        }
                    case 6: {
                            message.typeName = reader.string();
                            break;
                        }
                    case 2: {
                            message.extendee = reader.string();
                            break;
                        }
                    case 7: {
                            message.defaultValue = reader.string();
                            break;
                        }
                    case 9: {
                            message.oneofIndex = reader.int32();
                            break;
                        }
                    case 10: {
                            message.jsonName = reader.string();
                            break;
                        }
                    case 8: {
                            message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                            break;
                        }
                    case 17: {
                            message.proto3Optional = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.label != null && message.hasOwnProperty("label"))
                    switch (message.label) {
                    default:
                        return "label: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.type != null && message.hasOwnProperty("type"))
                    switch (message.type) {
                    default:
                        return "type: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                        break;
                    }
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    if (!$util.isString(message.typeName))
                        return "typeName: string expected";
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    if (!$util.isString(message.extendee))
                        return "extendee: string expected";
                if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                    if (!$util.isString(message.defaultValue))
                        return "defaultValue: string expected";
                if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                    if (!$util.isInteger(message.oneofIndex))
                        return "oneofIndex: integer expected";
                if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                    if (!$util.isString(message.jsonName))
                        return "jsonName: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.FieldOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                    if (typeof message.proto3Optional !== "boolean")
                        return "proto3Optional: boolean expected";
                return null;
            };

            /**
             * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
             */
            FieldDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.FieldDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                switch (object.label) {
                default:
                    if (typeof object.label === "number") {
                        message.label = object.label;
                        break;
                    }
                    break;
                case "LABEL_OPTIONAL":
                case 1:
                    message.label = 1;
                    break;
                case "LABEL_REQUIRED":
                case 2:
                    message.label = 2;
                    break;
                case "LABEL_REPEATED":
                case 3:
                    message.label = 3;
                    break;
                }
                switch (object.type) {
                default:
                    if (typeof object.type === "number") {
                        message.type = object.type;
                        break;
                    }
                    break;
                case "TYPE_DOUBLE":
                case 1:
                    message.type = 1;
                    break;
                case "TYPE_FLOAT":
                case 2:
                    message.type = 2;
                    break;
                case "TYPE_INT64":
                case 3:
                    message.type = 3;
                    break;
                case "TYPE_UINT64":
                case 4:
                    message.type = 4;
                    break;
                case "TYPE_INT32":
                case 5:
                    message.type = 5;
                    break;
                case "TYPE_FIXED64":
                case 6:
                    message.type = 6;
                    break;
                case "TYPE_FIXED32":
                case 7:
                    message.type = 7;
                    break;
                case "TYPE_BOOL":
                case 8:
                    message.type = 8;
                    break;
                case "TYPE_STRING":
                case 9:
                    message.type = 9;
                    break;
                case "TYPE_GROUP":
                case 10:
                    message.type = 10;
                    break;
                case "TYPE_MESSAGE":
                case 11:
                    message.type = 11;
                    break;
                case "TYPE_BYTES":
                case 12:
                    message.type = 12;
                    break;
                case "TYPE_UINT32":
                case 13:
                    message.type = 13;
                    break;
                case "TYPE_ENUM":
                case 14:
                    message.type = 14;
                    break;
                case "TYPE_SFIXED32":
                case 15:
                    message.type = 15;
                    break;
                case "TYPE_SFIXED64":
                case 16:
                    message.type = 16;
                    break;
                case "TYPE_SINT32":
                case 17:
                    message.type = 17;
                    break;
                case "TYPE_SINT64":
                case 18:
                    message.type = 18;
                    break;
                }
                if (object.typeName != null)
                    message.typeName = String(object.typeName);
                if (object.extendee != null)
                    message.extendee = String(object.extendee);
                if (object.defaultValue != null)
                    message.defaultValue = String(object.defaultValue);
                if (object.oneofIndex != null)
                    message.oneofIndex = object.oneofIndex | 0;
                if (object.jsonName != null)
                    message.jsonName = String(object.jsonName);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                }
                if (object.proto3Optional != null)
                    message.proto3Optional = Boolean(object.proto3Optional);
                return message;
            };

            /**
             * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.extendee = "";
                    object.number = 0;
                    object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                    object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                    object.typeName = "";
                    object.defaultValue = "";
                    object.options = null;
                    object.oneofIndex = 0;
                    object.jsonName = "";
                    object.proto3Optional = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.extendee != null && message.hasOwnProperty("extendee"))
                    object.extendee = message.extendee;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.label != null && message.hasOwnProperty("label"))
                    object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] === undefined ? message.label : $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                if (message.type != null && message.hasOwnProperty("type"))
                    object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] === undefined ? message.type : $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                if (message.typeName != null && message.hasOwnProperty("typeName"))
                    object.typeName = message.typeName;
                if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                    object.defaultValue = message.defaultValue;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                    object.oneofIndex = message.oneofIndex;
                if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                    object.jsonName = message.jsonName;
                if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                    object.proto3Optional = message.proto3Optional;
                return object;
            };

            /**
             * Converts this FieldDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FieldDescriptorProto
             * @function getTypeUrl
             * @memberof google.protobuf.FieldDescriptorProto
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FieldDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.FieldDescriptorProto";
            };

            /**
             * Type enum.
             * @name google.protobuf.FieldDescriptorProto.Type
             * @enum {number}
             * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
             * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
             * @property {number} TYPE_INT64=3 TYPE_INT64 value
             * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
             * @property {number} TYPE_INT32=5 TYPE_INT32 value
             * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
             * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
             * @property {number} TYPE_BOOL=8 TYPE_BOOL value
             * @property {number} TYPE_STRING=9 TYPE_STRING value
             * @property {number} TYPE_GROUP=10 TYPE_GROUP value
             * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
             * @property {number} TYPE_BYTES=12 TYPE_BYTES value
             * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
             * @property {number} TYPE_ENUM=14 TYPE_ENUM value
             * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
             * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
             * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
             * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
             */
            FieldDescriptorProto.Type = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                values[valuesById[2] = "TYPE_FLOAT"] = 2;
                values[valuesById[3] = "TYPE_INT64"] = 3;
                values[valuesById[4] = "TYPE_UINT64"] = 4;
                values[valuesById[5] = "TYPE_INT32"] = 5;
                values[valuesById[6] = "TYPE_FIXED64"] = 6;
                values[valuesById[7] = "TYPE_FIXED32"] = 7;
                values[valuesById[8] = "TYPE_BOOL"] = 8;
                values[valuesById[9] = "TYPE_STRING"] = 9;
                values[valuesById[10] = "TYPE_GROUP"] = 10;
                values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                values[valuesById[12] = "TYPE_BYTES"] = 12;
                values[valuesById[13] = "TYPE_UINT32"] = 13;
                values[valuesById[14] = "TYPE_ENUM"] = 14;
                values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                values[valuesById[17] = "TYPE_SINT32"] = 17;
                values[valuesById[18] = "TYPE_SINT64"] = 18;
                return values;
            })();

            /**
             * Label enum.
             * @name google.protobuf.FieldDescriptorProto.Label
             * @enum {number}
             * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
             * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
             * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
             */
            FieldDescriptorProto.Label = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                values[valuesById[3] = "LABEL_REPEATED"] = 3;
                return values;
            })();

            return FieldDescriptorProto;
        })();

        protobuf.OneofDescriptorProto = (function() {

            /**
             * Properties of an OneofDescriptorProto.
             * @memberof google.protobuf
             * @interface IOneofDescriptorProto
             * @property {string|null} [name] OneofDescriptorProto name
             * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
             */

            /**
             * Constructs a new OneofDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an OneofDescriptorProto.
             * @implements IOneofDescriptorProto
             * @constructor
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             */
            function OneofDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.name = "";

            /**
             * OneofDescriptorProto options.
             * @member {google.protobuf.IOneofOptions|null|undefined} options
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             */
            OneofDescriptorProto.prototype.options = null;

            /**
             * Creates a new OneofDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
             */
            OneofDescriptorProto.create = function create(properties) {
                return new OneofDescriptorProto(properties);
            };

            /**
             * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.OneofOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
             */
            OneofDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.OneofDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this OneofDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for OneofDescriptorProto
             * @function getTypeUrl
             * @memberof google.protobuf.OneofDescriptorProto
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            OneofDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.OneofDescriptorProto";
            };

            return OneofDescriptorProto;
        })();

        protobuf.EnumDescriptorProto = (function() {

            /**
             * Properties of an EnumDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumDescriptorProto
             * @property {string|null} [name] EnumDescriptorProto name
             * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
             * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
             * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
             * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
             */

            /**
             * Constructs a new EnumDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumDescriptorProto.
             * @implements IEnumDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             */
            function EnumDescriptorProto(properties) {
                this.value = [];
                this.reservedRange = [];
                this.reservedName = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.name = "";

            /**
             * EnumDescriptorProto value.
             * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.value = $util.emptyArray;

            /**
             * EnumDescriptorProto options.
             * @member {google.protobuf.IEnumOptions|null|undefined} options
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.options = null;

            /**
             * EnumDescriptorProto reservedRange.
             * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;

            /**
             * EnumDescriptorProto reservedName.
             * @member {Array.<string>} reservedName
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             */
            EnumDescriptorProto.prototype.reservedName = $util.emptyArray;

            /**
             * Creates a new EnumDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
             */
            EnumDescriptorProto.create = function create(properties) {
                return new EnumDescriptorProto(properties);
            };

            /**
             * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.value != null && message.value.length)
                    for (let i = 0; i < message.value.length; ++i)
                        $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                if (message.reservedRange != null && message.reservedRange.length)
                    for (let i = 0; i < message.reservedRange.length; ++i)
                        $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.reservedName != null && message.reservedName.length)
                    for (let i = 0; i < message.reservedName.length; ++i)
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                return writer;
            };

            /**
             * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            if (!(message.value && message.value.length))
                                message.value = [];
                            message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                            break;
                        }
                    case 4: {
                            if (!(message.reservedRange && message.reservedRange.length))
                                message.reservedRange = [];
                            message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                            break;
                        }
                    case 5: {
                            if (!(message.reservedName && message.reservedName.length))
                                message.reservedName = [];
                            message.reservedName.push(reader.string());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.value != null && message.hasOwnProperty("value")) {
                    if (!Array.isArray(message.value))
                        return "value: array expected";
                    for (let i = 0; i < message.value.length; ++i) {
                        let error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                        if (error)
                            return "value." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                    if (!Array.isArray(message.reservedRange))
                        return "reservedRange: array expected";
                    for (let i = 0; i < message.reservedRange.length; ++i) {
                        let error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                        if (error)
                            return "reservedRange." + error;
                    }
                }
                if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                    if (!Array.isArray(message.reservedName))
                        return "reservedName: array expected";
                    for (let i = 0; i < message.reservedName.length; ++i)
                        if (!$util.isString(message.reservedName[i]))
                            return "reservedName: string[] expected";
                }
                return null;
            };

            /**
             * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
             */
            EnumDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.value) {
                    if (!Array.isArray(object.value))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                    message.value = [];
                    for (let i = 0; i < object.value.length; ++i) {
                        if (typeof object.value[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                        message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                }
                if (object.reservedRange) {
                    if (!Array.isArray(object.reservedRange))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                    message.reservedRange = [];
                    for (let i = 0; i < object.reservedRange.length; ++i) {
                        if (typeof object.reservedRange[i] !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                        message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                    }
                }
                if (object.reservedName) {
                    if (!Array.isArray(object.reservedName))
                        throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                    message.reservedName = [];
                    for (let i = 0; i < object.reservedName.length; ++i)
                        message.reservedName[i] = String(object.reservedName[i]);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults) {
                    object.value = [];
                    object.reservedRange = [];
                    object.reservedName = [];
                }
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.value && message.value.length) {
                    object.value = [];
                    for (let j = 0; j < message.value.length; ++j)
                        object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                if (message.reservedRange && message.reservedRange.length) {
                    object.reservedRange = [];
                    for (let j = 0; j < message.reservedRange.length; ++j)
                        object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                }
                if (message.reservedName && message.reservedName.length) {
                    object.reservedName = [];
                    for (let j = 0; j < message.reservedName.length; ++j)
                        object.reservedName[j] = message.reservedName[j];
                }
                return object;
            };

            /**
             * Converts this EnumDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for EnumDescriptorProto
             * @function getTypeUrl
             * @memberof google.protobuf.EnumDescriptorProto
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            EnumDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto";
            };

            EnumDescriptorProto.EnumReservedRange = (function() {

                /**
                 * Properties of an EnumReservedRange.
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @interface IEnumReservedRange
                 * @property {number|null} [start] EnumReservedRange start
                 * @property {number|null} [end] EnumReservedRange end
                 */

                /**
                 * Constructs a new EnumReservedRange.
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @classdesc Represents an EnumReservedRange.
                 * @implements IEnumReservedRange
                 * @constructor
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                 */
                function EnumReservedRange(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * EnumReservedRange start.
                 * @member {number} start
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 */
                EnumReservedRange.prototype.start = 0;

                /**
                 * EnumReservedRange end.
                 * @member {number} end
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 */
                EnumReservedRange.prototype.end = 0;

                /**
                 * Creates a new EnumReservedRange instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                 */
                EnumReservedRange.create = function create(properties) {
                    return new EnumReservedRange(properties);
                };

                /**
                 * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumReservedRange.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an EnumReservedRange message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumReservedRange.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.start = reader.int32();
                                break;
                            }
                        case 2: {
                                message.end = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an EnumReservedRange message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumReservedRange.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.start != null && message.hasOwnProperty("start"))
                        if (!$util.isInteger(message.start))
                            return "start: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                 */
                EnumReservedRange.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                        return object;
                    let message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                    if (object.start != null)
                        message.start = object.start | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumReservedRange.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.start = 0;
                        object.end = 0;
                    }
                    if (message.start != null && message.hasOwnProperty("start"))
                        object.start = message.start;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this EnumReservedRange to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumReservedRange.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for EnumReservedRange
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto.EnumReservedRange";
                };

                return EnumReservedRange;
            })();

            return EnumDescriptorProto;
        })();

        protobuf.EnumValueDescriptorProto = (function() {

            /**
             * Properties of an EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @interface IEnumValueDescriptorProto
             * @property {string|null} [name] EnumValueDescriptorProto name
             * @property {number|null} [number] EnumValueDescriptorProto number
             * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
             */

            /**
             * Constructs a new EnumValueDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueDescriptorProto.
             * @implements IEnumValueDescriptorProto
             * @constructor
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             */
            function EnumValueDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.name = "";

            /**
             * EnumValueDescriptorProto number.
             * @member {number} number
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.number = 0;

            /**
             * EnumValueDescriptorProto options.
             * @member {google.protobuf.IEnumValueOptions|null|undefined} options
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             */
            EnumValueDescriptorProto.prototype.options = null;

            /**
             * Creates a new EnumValueDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
             */
            EnumValueDescriptorProto.create = function create(properties) {
                return new EnumValueDescriptorProto(properties);
            };

            /**
             * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            message.number = reader.int32();
                            break;
                        }
                    case 3: {
                            message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.number != null && message.hasOwnProperty("number"))
                    if (!$util.isInteger(message.number))
                        return "number: integer expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
             */
            EnumValueDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.EnumValueDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.number != null)
                    message.number = object.number | 0;
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.number = 0;
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.number != null && message.hasOwnProperty("number"))
                    object.number = message.number;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this EnumValueDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for EnumValueDescriptorProto
             * @function getTypeUrl
             * @memberof google.protobuf.EnumValueDescriptorProto
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            EnumValueDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.EnumValueDescriptorProto";
            };

            return EnumValueDescriptorProto;
        })();

        protobuf.ServiceDescriptorProto = (function() {

            /**
             * Properties of a ServiceDescriptorProto.
             * @memberof google.protobuf
             * @interface IServiceDescriptorProto
             * @property {string|null} [name] ServiceDescriptorProto name
             * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
             * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
             */

            /**
             * Constructs a new ServiceDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceDescriptorProto.
             * @implements IServiceDescriptorProto
             * @constructor
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             */
            function ServiceDescriptorProto(properties) {
                this.method = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.name = "";

            /**
             * ServiceDescriptorProto method.
             * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.method = $util.emptyArray;

            /**
             * ServiceDescriptorProto options.
             * @member {google.protobuf.IServiceOptions|null|undefined} options
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             */
            ServiceDescriptorProto.prototype.options = null;

            /**
             * Creates a new ServiceDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
             */
            ServiceDescriptorProto.create = function create(properties) {
                return new ServiceDescriptorProto(properties);
            };

            /**
             * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.method != null && message.method.length)
                    for (let i = 0; i < message.method.length; ++i)
                        $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            if (!(message.method && message.method.length))
                                message.method = [];
                            message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.method != null && message.hasOwnProperty("method")) {
                    if (!Array.isArray(message.method))
                        return "method: array expected";
                    for (let i = 0; i < message.method.length; ++i) {
                        let error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                        if (error)
                            return "method." + error;
                    }
                }
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.ServiceOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                return null;
            };

            /**
             * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
             */
            ServiceDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.ServiceDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.method) {
                    if (!Array.isArray(object.method))
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                    message.method = [];
                    for (let i = 0; i < object.method.length; ++i) {
                        if (typeof object.method[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                        message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                    }
                }
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.method = [];
                if (options.defaults) {
                    object.name = "";
                    object.options = null;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.method && message.method.length) {
                    object.method = [];
                    for (let j = 0; j < message.method.length; ++j)
                        object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                }
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                return object;
            };

            /**
             * Converts this ServiceDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ServiceDescriptorProto
             * @function getTypeUrl
             * @memberof google.protobuf.ServiceDescriptorProto
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ServiceDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.ServiceDescriptorProto";
            };

            return ServiceDescriptorProto;
        })();

        protobuf.MethodDescriptorProto = (function() {

            /**
             * Properties of a MethodDescriptorProto.
             * @memberof google.protobuf
             * @interface IMethodDescriptorProto
             * @property {string|null} [name] MethodDescriptorProto name
             * @property {string|null} [inputType] MethodDescriptorProto inputType
             * @property {string|null} [outputType] MethodDescriptorProto outputType
             * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
             * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
             * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
             */

            /**
             * Constructs a new MethodDescriptorProto.
             * @memberof google.protobuf
             * @classdesc Represents a MethodDescriptorProto.
             * @implements IMethodDescriptorProto
             * @constructor
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             */
            function MethodDescriptorProto(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodDescriptorProto name.
             * @member {string} name
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.name = "";

            /**
             * MethodDescriptorProto inputType.
             * @member {string} inputType
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.inputType = "";

            /**
             * MethodDescriptorProto outputType.
             * @member {string} outputType
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.outputType = "";

            /**
             * MethodDescriptorProto options.
             * @member {google.protobuf.IMethodOptions|null|undefined} options
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.options = null;

            /**
             * MethodDescriptorProto clientStreaming.
             * @member {boolean} clientStreaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.clientStreaming = false;

            /**
             * MethodDescriptorProto serverStreaming.
             * @member {boolean} serverStreaming
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             */
            MethodDescriptorProto.prototype.serverStreaming = false;

            /**
             * Creates a new MethodDescriptorProto instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
             */
            MethodDescriptorProto.create = function create(properties) {
                return new MethodDescriptorProto(properties);
            };

            /**
             * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                    $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                return writer;
            };

            /**
             * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.name = reader.string();
                            break;
                        }
                    case 2: {
                            message.inputType = reader.string();
                            break;
                        }
                    case 3: {
                            message.outputType = reader.string();
                            break;
                        }
                    case 4: {
                            message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                            break;
                        }
                    case 5: {
                            message.clientStreaming = reader.bool();
                            break;
                        }
                    case 6: {
                            message.serverStreaming = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodDescriptorProto message.
             * @function verify
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodDescriptorProto.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.inputType != null && message.hasOwnProperty("inputType"))
                    if (!$util.isString(message.inputType))
                        return "inputType: string expected";
                if (message.outputType != null && message.hasOwnProperty("outputType"))
                    if (!$util.isString(message.outputType))
                        return "outputType: string expected";
                if (message.options != null && message.hasOwnProperty("options")) {
                    let error = $root.google.protobuf.MethodOptions.verify(message.options);
                    if (error)
                        return "options." + error;
                }
                if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                    if (typeof message.clientStreaming !== "boolean")
                        return "clientStreaming: boolean expected";
                if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                    if (typeof message.serverStreaming !== "boolean")
                        return "serverStreaming: boolean expected";
                return null;
            };

            /**
             * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
             */
            MethodDescriptorProto.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                    return object;
                let message = new $root.google.protobuf.MethodDescriptorProto();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.inputType != null)
                    message.inputType = String(object.inputType);
                if (object.outputType != null)
                    message.outputType = String(object.outputType);
                if (object.options != null) {
                    if (typeof object.options !== "object")
                        throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                    message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                }
                if (object.clientStreaming != null)
                    message.clientStreaming = Boolean(object.clientStreaming);
                if (object.serverStreaming != null)
                    message.serverStreaming = Boolean(object.serverStreaming);
                return message;
            };

            /**
             * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodDescriptorProto.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.name = "";
                    object.inputType = "";
                    object.outputType = "";
                    object.options = null;
                    object.clientStreaming = false;
                    object.serverStreaming = false;
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.inputType != null && message.hasOwnProperty("inputType"))
                    object.inputType = message.inputType;
                if (message.outputType != null && message.hasOwnProperty("outputType"))
                    object.outputType = message.outputType;
                if (message.options != null && message.hasOwnProperty("options"))
                    object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                    object.clientStreaming = message.clientStreaming;
                if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                    object.serverStreaming = message.serverStreaming;
                return object;
            };

            /**
             * Converts this MethodDescriptorProto to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodDescriptorProto
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodDescriptorProto.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for MethodDescriptorProto
             * @function getTypeUrl
             * @memberof google.protobuf.MethodDescriptorProto
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            MethodDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.MethodDescriptorProto";
            };

            return MethodDescriptorProto;
        })();

        protobuf.FileOptions = (function() {

            /**
             * Properties of a FileOptions.
             * @memberof google.protobuf
             * @interface IFileOptions
             * @property {string|null} [javaPackage] FileOptions javaPackage
             * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
             * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
             * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
             * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
             * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
             * @property {string|null} [goPackage] FileOptions goPackage
             * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
             * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
             * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
             * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
             * @property {boolean|null} [deprecated] FileOptions deprecated
             * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
             * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
             * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
             * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
             * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
             * @property {string|null} [phpNamespace] FileOptions phpNamespace
             * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
             * @property {string|null} [rubyPackage] FileOptions rubyPackage
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
             */

            /**
             * Constructs a new FileOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FileOptions.
             * @implements IFileOptions
             * @constructor
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             */
            function FileOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FileOptions javaPackage.
             * @member {string} javaPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaPackage = "";

            /**
             * FileOptions javaOuterClassname.
             * @member {string} javaOuterClassname
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaOuterClassname = "";

            /**
             * FileOptions javaMultipleFiles.
             * @member {boolean} javaMultipleFiles
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaMultipleFiles = false;

            /**
             * FileOptions javaGenerateEqualsAndHash.
             * @member {boolean} javaGenerateEqualsAndHash
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaGenerateEqualsAndHash = false;

            /**
             * FileOptions javaStringCheckUtf8.
             * @member {boolean} javaStringCheckUtf8
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaStringCheckUtf8 = false;

            /**
             * FileOptions optimizeFor.
             * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.optimizeFor = 1;

            /**
             * FileOptions goPackage.
             * @member {string} goPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.goPackage = "";

            /**
             * FileOptions ccGenericServices.
             * @member {boolean} ccGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.ccGenericServices = false;

            /**
             * FileOptions javaGenericServices.
             * @member {boolean} javaGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.javaGenericServices = false;

            /**
             * FileOptions pyGenericServices.
             * @member {boolean} pyGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.pyGenericServices = false;

            /**
             * FileOptions phpGenericServices.
             * @member {boolean} phpGenericServices
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpGenericServices = false;

            /**
             * FileOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.deprecated = false;

            /**
             * FileOptions ccEnableArenas.
             * @member {boolean} ccEnableArenas
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.ccEnableArenas = true;

            /**
             * FileOptions objcClassPrefix.
             * @member {string} objcClassPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.objcClassPrefix = "";

            /**
             * FileOptions csharpNamespace.
             * @member {string} csharpNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.csharpNamespace = "";

            /**
             * FileOptions swiftPrefix.
             * @member {string} swiftPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.swiftPrefix = "";

            /**
             * FileOptions phpClassPrefix.
             * @member {string} phpClassPrefix
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpClassPrefix = "";

            /**
             * FileOptions phpNamespace.
             * @member {string} phpNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpNamespace = "";

            /**
             * FileOptions phpMetadataNamespace.
             * @member {string} phpMetadataNamespace
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.phpMetadataNamespace = "";

            /**
             * FileOptions rubyPackage.
             * @member {string} rubyPackage
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.rubyPackage = "";

            /**
             * FileOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.FileOptions
             * @instance
             */
            FileOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new FileOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions=} [properties] Properties to set
             * @returns {google.protobuf.FileOptions} FileOptions instance
             */
            FileOptions.create = function create(properties) {
                return new FileOptions(properties);
            };

            /**
             * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                    writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                    writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                    writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                    writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                    writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                    writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                    writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                    writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                    writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                    writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                    writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                    writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                    writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                    writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                    writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                    writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (let i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.javaPackage = reader.string();
                            break;
                        }
                    case 8: {
                            message.javaOuterClassname = reader.string();
                            break;
                        }
                    case 10: {
                            message.javaMultipleFiles = reader.bool();
                            break;
                        }
                    case 20: {
                            message.javaGenerateEqualsAndHash = reader.bool();
                            break;
                        }
                    case 27: {
                            message.javaStringCheckUtf8 = reader.bool();
                            break;
                        }
                    case 9: {
                            message.optimizeFor = reader.int32();
                            break;
                        }
                    case 11: {
                            message.goPackage = reader.string();
                            break;
                        }
                    case 16: {
                            message.ccGenericServices = reader.bool();
                            break;
                        }
                    case 17: {
                            message.javaGenericServices = reader.bool();
                            break;
                        }
                    case 18: {
                            message.pyGenericServices = reader.bool();
                            break;
                        }
                    case 42: {
                            message.phpGenericServices = reader.bool();
                            break;
                        }
                    case 23: {
                            message.deprecated = reader.bool();
                            break;
                        }
                    case 31: {
                            message.ccEnableArenas = reader.bool();
                            break;
                        }
                    case 36: {
                            message.objcClassPrefix = reader.string();
                            break;
                        }
                    case 37: {
                            message.csharpNamespace = reader.string();
                            break;
                        }
                    case 39: {
                            message.swiftPrefix = reader.string();
                            break;
                        }
                    case 40: {
                            message.phpClassPrefix = reader.string();
                            break;
                        }
                    case 41: {
                            message.phpNamespace = reader.string();
                            break;
                        }
                    case 44: {
                            message.phpMetadataNamespace = reader.string();
                            break;
                        }
                    case 45: {
                            message.rubyPackage = reader.string();
                            break;
                        }
                    case 999: {
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FileOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FileOptions} FileOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FileOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FileOptions message.
             * @function verify
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FileOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                    if (!$util.isString(message.javaPackage))
                        return "javaPackage: string expected";
                if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                    if (!$util.isString(message.javaOuterClassname))
                        return "javaOuterClassname: string expected";
                if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                    if (typeof message.javaMultipleFiles !== "boolean")
                        return "javaMultipleFiles: boolean expected";
                if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                    if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                        return "javaGenerateEqualsAndHash: boolean expected";
                if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                    if (typeof message.javaStringCheckUtf8 !== "boolean")
                        return "javaStringCheckUtf8: boolean expected";
                if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                    switch (message.optimizeFor) {
                    default:
                        return "optimizeFor: enum value expected";
                    case 1:
                    case 2:
                    case 3:
                        break;
                    }
                if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                    if (!$util.isString(message.goPackage))
                        return "goPackage: string expected";
                if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                    if (typeof message.ccGenericServices !== "boolean")
                        return "ccGenericServices: boolean expected";
                if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                    if (typeof message.javaGenericServices !== "boolean")
                        return "javaGenericServices: boolean expected";
                if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                    if (typeof message.pyGenericServices !== "boolean")
                        return "pyGenericServices: boolean expected";
                if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                    if (typeof message.phpGenericServices !== "boolean")
                        return "phpGenericServices: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                    if (typeof message.ccEnableArenas !== "boolean")
                        return "ccEnableArenas: boolean expected";
                if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                    if (!$util.isString(message.objcClassPrefix))
                        return "objcClassPrefix: string expected";
                if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                    if (!$util.isString(message.csharpNamespace))
                        return "csharpNamespace: string expected";
                if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                    if (!$util.isString(message.swiftPrefix))
                        return "swiftPrefix: string expected";
                if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                    if (!$util.isString(message.phpClassPrefix))
                        return "phpClassPrefix: string expected";
                if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                    if (!$util.isString(message.phpNamespace))
                        return "phpNamespace: string expected";
                if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                    if (!$util.isString(message.phpMetadataNamespace))
                        return "phpMetadataNamespace: string expected";
                if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                    if (!$util.isString(message.rubyPackage))
                        return "rubyPackage: string expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FileOptions} FileOptions
             */
            FileOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FileOptions)
                    return object;
                let message = new $root.google.protobuf.FileOptions();
                if (object.javaPackage != null)
                    message.javaPackage = String(object.javaPackage);
                if (object.javaOuterClassname != null)
                    message.javaOuterClassname = String(object.javaOuterClassname);
                if (object.javaMultipleFiles != null)
                    message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                if (object.javaGenerateEqualsAndHash != null)
                    message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                if (object.javaStringCheckUtf8 != null)
                    message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                switch (object.optimizeFor) {
                default:
                    if (typeof object.optimizeFor === "number") {
                        message.optimizeFor = object.optimizeFor;
                        break;
                    }
                    break;
                case "SPEED":
                case 1:
                    message.optimizeFor = 1;
                    break;
                case "CODE_SIZE":
                case 2:
                    message.optimizeFor = 2;
                    break;
                case "LITE_RUNTIME":
                case 3:
                    message.optimizeFor = 3;
                    break;
                }
                if (object.goPackage != null)
                    message.goPackage = String(object.goPackage);
                if (object.ccGenericServices != null)
                    message.ccGenericServices = Boolean(object.ccGenericServices);
                if (object.javaGenericServices != null)
                    message.javaGenericServices = Boolean(object.javaGenericServices);
                if (object.pyGenericServices != null)
                    message.pyGenericServices = Boolean(object.pyGenericServices);
                if (object.phpGenericServices != null)
                    message.phpGenericServices = Boolean(object.phpGenericServices);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.ccEnableArenas != null)
                    message.ccEnableArenas = Boolean(object.ccEnableArenas);
                if (object.objcClassPrefix != null)
                    message.objcClassPrefix = String(object.objcClassPrefix);
                if (object.csharpNamespace != null)
                    message.csharpNamespace = String(object.csharpNamespace);
                if (object.swiftPrefix != null)
                    message.swiftPrefix = String(object.swiftPrefix);
                if (object.phpClassPrefix != null)
                    message.phpClassPrefix = String(object.phpClassPrefix);
                if (object.phpNamespace != null)
                    message.phpNamespace = String(object.phpNamespace);
                if (object.phpMetadataNamespace != null)
                    message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                if (object.rubyPackage != null)
                    message.rubyPackage = String(object.rubyPackage);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {google.protobuf.FileOptions} message FileOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FileOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.javaPackage = "";
                    object.javaOuterClassname = "";
                    object.optimizeFor = options.enums === String ? "SPEED" : 1;
                    object.javaMultipleFiles = false;
                    object.goPackage = "";
                    object.ccGenericServices = false;
                    object.javaGenericServices = false;
                    object.pyGenericServices = false;
                    object.javaGenerateEqualsAndHash = false;
                    object.deprecated = false;
                    object.javaStringCheckUtf8 = false;
                    object.ccEnableArenas = true;
                    object.objcClassPrefix = "";
                    object.csharpNamespace = "";
                    object.swiftPrefix = "";
                    object.phpClassPrefix = "";
                    object.phpNamespace = "";
                    object.phpGenericServices = false;
                    object.phpMetadataNamespace = "";
                    object.rubyPackage = "";
                }
                if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                    object.javaPackage = message.javaPackage;
                if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                    object.javaOuterClassname = message.javaOuterClassname;
                if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                    object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] === undefined ? message.optimizeFor : $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                    object.javaMultipleFiles = message.javaMultipleFiles;
                if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                    object.goPackage = message.goPackage;
                if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                    object.ccGenericServices = message.ccGenericServices;
                if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                    object.javaGenericServices = message.javaGenericServices;
                if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                    object.pyGenericServices = message.pyGenericServices;
                if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                    object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                    object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                    object.ccEnableArenas = message.ccEnableArenas;
                if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                    object.objcClassPrefix = message.objcClassPrefix;
                if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                    object.csharpNamespace = message.csharpNamespace;
                if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                    object.swiftPrefix = message.swiftPrefix;
                if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                    object.phpClassPrefix = message.phpClassPrefix;
                if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                    object.phpNamespace = message.phpNamespace;
                if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                    object.phpGenericServices = message.phpGenericServices;
                if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                    object.phpMetadataNamespace = message.phpMetadataNamespace;
                if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                    object.rubyPackage = message.rubyPackage;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this FileOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FileOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FileOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FileOptions
             * @function getTypeUrl
             * @memberof google.protobuf.FileOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FileOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.FileOptions";
            };

            /**
             * OptimizeMode enum.
             * @name google.protobuf.FileOptions.OptimizeMode
             * @enum {number}
             * @property {number} SPEED=1 SPEED value
             * @property {number} CODE_SIZE=2 CODE_SIZE value
             * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
             */
            FileOptions.OptimizeMode = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[1] = "SPEED"] = 1;
                values[valuesById[2] = "CODE_SIZE"] = 2;
                values[valuesById[3] = "LITE_RUNTIME"] = 3;
                return values;
            })();

            return FileOptions;
        })();

        protobuf.MessageOptions = (function() {

            /**
             * Properties of a MessageOptions.
             * @memberof google.protobuf
             * @interface IMessageOptions
             * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
             * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
             * @property {boolean|null} [deprecated] MessageOptions deprecated
             * @property {boolean|null} [mapEntry] MessageOptions mapEntry
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
             * @property {buf.validate.IMessageConstraints|null} [".buf.validate.message"] MessageOptions .buf.validate.message
             */

            /**
             * Constructs a new MessageOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MessageOptions.
             * @implements IMessageOptions
             * @constructor
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             */
            function MessageOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MessageOptions messageSetWireFormat.
             * @member {boolean} messageSetWireFormat
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.messageSetWireFormat = false;

            /**
             * MessageOptions noStandardDescriptorAccessor.
             * @member {boolean} noStandardDescriptorAccessor
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.noStandardDescriptorAccessor = false;

            /**
             * MessageOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.deprecated = false;

            /**
             * MessageOptions mapEntry.
             * @member {boolean} mapEntry
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.mapEntry = false;

            /**
             * MessageOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * MessageOptions .buf.validate.message.
             * @member {buf.validate.IMessageConstraints|null|undefined} .buf.validate.message
             * @memberof google.protobuf.MessageOptions
             * @instance
             */
            MessageOptions.prototype[".buf.validate.message"] = null;

            /**
             * Creates a new MessageOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
             * @returns {google.protobuf.MessageOptions} MessageOptions instance
             */
            MessageOptions.create = function create(properties) {
                return new MessageOptions(properties);
            };

            /**
             * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                    writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (let i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".buf.validate.message"] != null && Object.hasOwnProperty.call(message, ".buf.validate.message"))
                    $root.buf.validate.MessageConstraints.encode(message[".buf.validate.message"], writer.uint32(/* id 1159, wireType 2 =*/9274).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.messageSetWireFormat = reader.bool();
                            break;
                        }
                    case 2: {
                            message.noStandardDescriptorAccessor = reader.bool();
                            break;
                        }
                    case 3: {
                            message.deprecated = reader.bool();
                            break;
                        }
                    case 7: {
                            message.mapEntry = reader.bool();
                            break;
                        }
                    case 999: {
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    case 1159: {
                            message[".buf.validate.message"] = $root.buf.validate.MessageConstraints.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MessageOptions} MessageOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MessageOptions message.
             * @function verify
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MessageOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                    if (typeof message.messageSetWireFormat !== "boolean")
                        return "messageSetWireFormat: boolean expected";
                if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                    if (typeof message.noStandardDescriptorAccessor !== "boolean")
                        return "noStandardDescriptorAccessor: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                    if (typeof message.mapEntry !== "boolean")
                        return "mapEntry: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".buf.validate.message"] != null && message.hasOwnProperty(".buf.validate.message")) {
                    let error = $root.buf.validate.MessageConstraints.verify(message[".buf.validate.message"]);
                    if (error)
                        return ".buf.validate.message." + error;
                }
                return null;
            };

            /**
             * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MessageOptions} MessageOptions
             */
            MessageOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MessageOptions)
                    return object;
                let message = new $root.google.protobuf.MessageOptions();
                if (object.messageSetWireFormat != null)
                    message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                if (object.noStandardDescriptorAccessor != null)
                    message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.mapEntry != null)
                    message.mapEntry = Boolean(object.mapEntry);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".buf.validate.message"] != null) {
                    if (typeof object[".buf.validate.message"] !== "object")
                        throw TypeError(".google.protobuf.MessageOptions..buf.validate.message: object expected");
                    message[".buf.validate.message"] = $root.buf.validate.MessageConstraints.fromObject(object[".buf.validate.message"]);
                }
                return message;
            };

            /**
             * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {google.protobuf.MessageOptions} message MessageOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MessageOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.messageSetWireFormat = false;
                    object.noStandardDescriptorAccessor = false;
                    object.deprecated = false;
                    object.mapEntry = false;
                    object[".buf.validate.message"] = null;
                }
                if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                    object.messageSetWireFormat = message.messageSetWireFormat;
                if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                    object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                    object.mapEntry = message.mapEntry;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".buf.validate.message"] != null && message.hasOwnProperty(".buf.validate.message"))
                    object[".buf.validate.message"] = $root.buf.validate.MessageConstraints.toObject(message[".buf.validate.message"], options);
                return object;
            };

            /**
             * Converts this MessageOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MessageOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MessageOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for MessageOptions
             * @function getTypeUrl
             * @memberof google.protobuf.MessageOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            MessageOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.MessageOptions";
            };

            return MessageOptions;
        })();

        protobuf.FieldOptions = (function() {

            /**
             * Properties of a FieldOptions.
             * @memberof google.protobuf
             * @interface IFieldOptions
             * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
             * @property {boolean|null} [packed] FieldOptions packed
             * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
             * @property {boolean|null} [lazy] FieldOptions lazy
             * @property {boolean|null} [unverifiedLazy] FieldOptions unverifiedLazy
             * @property {boolean|null} [deprecated] FieldOptions deprecated
             * @property {boolean|null} [weak] FieldOptions weak
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
             * @property {buf.validate.IFieldConstraints|null} [".buf.validate.field"] FieldOptions .buf.validate.field
             * @property {buf.validate.priv.IFieldConstraints|null} [".buf.validate.priv.field"] FieldOptions .buf.validate.priv.field
             */

            /**
             * Constructs a new FieldOptions.
             * @memberof google.protobuf
             * @classdesc Represents a FieldOptions.
             * @implements IFieldOptions
             * @constructor
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             */
            function FieldOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * FieldOptions ctype.
             * @member {google.protobuf.FieldOptions.CType} ctype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.ctype = 0;

            /**
             * FieldOptions packed.
             * @member {boolean} packed
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.packed = false;

            /**
             * FieldOptions jstype.
             * @member {google.protobuf.FieldOptions.JSType} jstype
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.jstype = 0;

            /**
             * FieldOptions lazy.
             * @member {boolean} lazy
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.lazy = false;

            /**
             * FieldOptions unverifiedLazy.
             * @member {boolean} unverifiedLazy
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.unverifiedLazy = false;

            /**
             * FieldOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.deprecated = false;

            /**
             * FieldOptions weak.
             * @member {boolean} weak
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.weak = false;

            /**
             * FieldOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * FieldOptions .buf.validate.field.
             * @member {buf.validate.IFieldConstraints|null|undefined} .buf.validate.field
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".buf.validate.field"] = null;

            /**
             * FieldOptions .buf.validate.priv.field.
             * @member {buf.validate.priv.IFieldConstraints|null|undefined} .buf.validate.priv.field
             * @memberof google.protobuf.FieldOptions
             * @instance
             */
            FieldOptions.prototype[".buf.validate.priv.field"] = null;

            /**
             * Creates a new FieldOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
             * @returns {google.protobuf.FieldOptions} FieldOptions instance
             */
            FieldOptions.create = function create(properties) {
                return new FieldOptions(properties);
            };

            /**
             * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                    writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                if (message.unverifiedLazy != null && Object.hasOwnProperty.call(message, "unverifiedLazy"))
                    writer.uint32(/* id 15, wireType 0 =*/120).bool(message.unverifiedLazy);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (let i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".buf.validate.field"] != null && Object.hasOwnProperty.call(message, ".buf.validate.field"))
                    $root.buf.validate.FieldConstraints.encode(message[".buf.validate.field"], writer.uint32(/* id 1159, wireType 2 =*/9274).fork()).ldelim();
                if (message[".buf.validate.priv.field"] != null && Object.hasOwnProperty.call(message, ".buf.validate.priv.field"))
                    $root.buf.validate.priv.FieldConstraints.encode(message[".buf.validate.priv.field"], writer.uint32(/* id 1160, wireType 2 =*/9282).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.ctype = reader.int32();
                            break;
                        }
                    case 2: {
                            message.packed = reader.bool();
                            break;
                        }
                    case 6: {
                            message.jstype = reader.int32();
                            break;
                        }
                    case 5: {
                            message.lazy = reader.bool();
                            break;
                        }
                    case 15: {
                            message.unverifiedLazy = reader.bool();
                            break;
                        }
                    case 3: {
                            message.deprecated = reader.bool();
                            break;
                        }
                    case 10: {
                            message.weak = reader.bool();
                            break;
                        }
                    case 999: {
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    case 1159: {
                            message[".buf.validate.field"] = $root.buf.validate.FieldConstraints.decode(reader, reader.uint32());
                            break;
                        }
                    case 1160: {
                            message[".buf.validate.priv.field"] = $root.buf.validate.priv.FieldConstraints.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.FieldOptions} FieldOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a FieldOptions message.
             * @function verify
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            FieldOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    switch (message.ctype) {
                    default:
                        return "ctype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.packed != null && message.hasOwnProperty("packed"))
                    if (typeof message.packed !== "boolean")
                        return "packed: boolean expected";
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    switch (message.jstype) {
                    default:
                        return "jstype: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    if (typeof message.lazy !== "boolean")
                        return "lazy: boolean expected";
                if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                    if (typeof message.unverifiedLazy !== "boolean")
                        return "unverifiedLazy: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.weak != null && message.hasOwnProperty("weak"))
                    if (typeof message.weak !== "boolean")
                        return "weak: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".buf.validate.field"] != null && message.hasOwnProperty(".buf.validate.field")) {
                    let error = $root.buf.validate.FieldConstraints.verify(message[".buf.validate.field"]);
                    if (error)
                        return ".buf.validate.field." + error;
                }
                if (message[".buf.validate.priv.field"] != null && message.hasOwnProperty(".buf.validate.priv.field")) {
                    let error = $root.buf.validate.priv.FieldConstraints.verify(message[".buf.validate.priv.field"]);
                    if (error)
                        return ".buf.validate.priv.field." + error;
                }
                return null;
            };

            /**
             * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.FieldOptions} FieldOptions
             */
            FieldOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.FieldOptions)
                    return object;
                let message = new $root.google.protobuf.FieldOptions();
                switch (object.ctype) {
                default:
                    if (typeof object.ctype === "number") {
                        message.ctype = object.ctype;
                        break;
                    }
                    break;
                case "STRING":
                case 0:
                    message.ctype = 0;
                    break;
                case "CORD":
                case 1:
                    message.ctype = 1;
                    break;
                case "STRING_PIECE":
                case 2:
                    message.ctype = 2;
                    break;
                }
                if (object.packed != null)
                    message.packed = Boolean(object.packed);
                switch (object.jstype) {
                default:
                    if (typeof object.jstype === "number") {
                        message.jstype = object.jstype;
                        break;
                    }
                    break;
                case "JS_NORMAL":
                case 0:
                    message.jstype = 0;
                    break;
                case "JS_STRING":
                case 1:
                    message.jstype = 1;
                    break;
                case "JS_NUMBER":
                case 2:
                    message.jstype = 2;
                    break;
                }
                if (object.lazy != null)
                    message.lazy = Boolean(object.lazy);
                if (object.unverifiedLazy != null)
                    message.unverifiedLazy = Boolean(object.unverifiedLazy);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.weak != null)
                    message.weak = Boolean(object.weak);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".buf.validate.field"] != null) {
                    if (typeof object[".buf.validate.field"] !== "object")
                        throw TypeError(".google.protobuf.FieldOptions..buf.validate.field: object expected");
                    message[".buf.validate.field"] = $root.buf.validate.FieldConstraints.fromObject(object[".buf.validate.field"]);
                }
                if (object[".buf.validate.priv.field"] != null) {
                    if (typeof object[".buf.validate.priv.field"] !== "object")
                        throw TypeError(".google.protobuf.FieldOptions..buf.validate.priv.field: object expected");
                    message[".buf.validate.priv.field"] = $root.buf.validate.priv.FieldConstraints.fromObject(object[".buf.validate.priv.field"]);
                }
                return message;
            };

            /**
             * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {google.protobuf.FieldOptions} message FieldOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            FieldOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.ctype = options.enums === String ? "STRING" : 0;
                    object.packed = false;
                    object.deprecated = false;
                    object.lazy = false;
                    object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                    object.weak = false;
                    object.unverifiedLazy = false;
                    object[".buf.validate.field"] = null;
                    object[".buf.validate.priv.field"] = null;
                }
                if (message.ctype != null && message.hasOwnProperty("ctype"))
                    object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] === undefined ? message.ctype : $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                if (message.packed != null && message.hasOwnProperty("packed"))
                    object.packed = message.packed;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.lazy != null && message.hasOwnProperty("lazy"))
                    object.lazy = message.lazy;
                if (message.jstype != null && message.hasOwnProperty("jstype"))
                    object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] === undefined ? message.jstype : $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                if (message.weak != null && message.hasOwnProperty("weak"))
                    object.weak = message.weak;
                if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                    object.unverifiedLazy = message.unverifiedLazy;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".buf.validate.field"] != null && message.hasOwnProperty(".buf.validate.field"))
                    object[".buf.validate.field"] = $root.buf.validate.FieldConstraints.toObject(message[".buf.validate.field"], options);
                if (message[".buf.validate.priv.field"] != null && message.hasOwnProperty(".buf.validate.priv.field"))
                    object[".buf.validate.priv.field"] = $root.buf.validate.priv.FieldConstraints.toObject(message[".buf.validate.priv.field"], options);
                return object;
            };

            /**
             * Converts this FieldOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.FieldOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            FieldOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for FieldOptions
             * @function getTypeUrl
             * @memberof google.protobuf.FieldOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            FieldOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.FieldOptions";
            };

            /**
             * CType enum.
             * @name google.protobuf.FieldOptions.CType
             * @enum {number}
             * @property {number} STRING=0 STRING value
             * @property {number} CORD=1 CORD value
             * @property {number} STRING_PIECE=2 STRING_PIECE value
             */
            FieldOptions.CType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "STRING"] = 0;
                values[valuesById[1] = "CORD"] = 1;
                values[valuesById[2] = "STRING_PIECE"] = 2;
                return values;
            })();

            /**
             * JSType enum.
             * @name google.protobuf.FieldOptions.JSType
             * @enum {number}
             * @property {number} JS_NORMAL=0 JS_NORMAL value
             * @property {number} JS_STRING=1 JS_STRING value
             * @property {number} JS_NUMBER=2 JS_NUMBER value
             */
            FieldOptions.JSType = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "JS_NORMAL"] = 0;
                values[valuesById[1] = "JS_STRING"] = 1;
                values[valuesById[2] = "JS_NUMBER"] = 2;
                return values;
            })();

            return FieldOptions;
        })();

        protobuf.OneofOptions = (function() {

            /**
             * Properties of an OneofOptions.
             * @memberof google.protobuf
             * @interface IOneofOptions
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
             * @property {buf.validate.IOneofConstraints|null} [".buf.validate.oneof"] OneofOptions .buf.validate.oneof
             */

            /**
             * Constructs a new OneofOptions.
             * @memberof google.protobuf
             * @classdesc Represents an OneofOptions.
             * @implements IOneofOptions
             * @constructor
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             */
            function OneofOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * OneofOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * OneofOptions .buf.validate.oneof.
             * @member {buf.validate.IOneofConstraints|null|undefined} .buf.validate.oneof
             * @memberof google.protobuf.OneofOptions
             * @instance
             */
            OneofOptions.prototype[".buf.validate.oneof"] = null;

            /**
             * Creates a new OneofOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
             * @returns {google.protobuf.OneofOptions} OneofOptions instance
             */
            OneofOptions.create = function create(properties) {
                return new OneofOptions(properties);
            };

            /**
             * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (let i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".buf.validate.oneof"] != null && Object.hasOwnProperty.call(message, ".buf.validate.oneof"))
                    $root.buf.validate.OneofConstraints.encode(message[".buf.validate.oneof"], writer.uint32(/* id 1159, wireType 2 =*/9274).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 999: {
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    case 1159: {
                            message[".buf.validate.oneof"] = $root.buf.validate.OneofConstraints.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.OneofOptions} OneofOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an OneofOptions message.
             * @function verify
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            OneofOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".buf.validate.oneof"] != null && message.hasOwnProperty(".buf.validate.oneof")) {
                    let error = $root.buf.validate.OneofConstraints.verify(message[".buf.validate.oneof"]);
                    if (error)
                        return ".buf.validate.oneof." + error;
                }
                return null;
            };

            /**
             * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.OneofOptions} OneofOptions
             */
            OneofOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.OneofOptions)
                    return object;
                let message = new $root.google.protobuf.OneofOptions();
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".buf.validate.oneof"] != null) {
                    if (typeof object[".buf.validate.oneof"] !== "object")
                        throw TypeError(".google.protobuf.OneofOptions..buf.validate.oneof: object expected");
                    message[".buf.validate.oneof"] = $root.buf.validate.OneofConstraints.fromObject(object[".buf.validate.oneof"]);
                }
                return message;
            };

            /**
             * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {google.protobuf.OneofOptions} message OneofOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            OneofOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults)
                    object[".buf.validate.oneof"] = null;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".buf.validate.oneof"] != null && message.hasOwnProperty(".buf.validate.oneof"))
                    object[".buf.validate.oneof"] = $root.buf.validate.OneofConstraints.toObject(message[".buf.validate.oneof"], options);
                return object;
            };

            /**
             * Converts this OneofOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.OneofOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            OneofOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for OneofOptions
             * @function getTypeUrl
             * @memberof google.protobuf.OneofOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            OneofOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.OneofOptions";
            };

            return OneofOptions;
        })();

        protobuf.EnumOptions = (function() {

            /**
             * Properties of an EnumOptions.
             * @memberof google.protobuf
             * @interface IEnumOptions
             * @property {boolean|null} [allowAlias] EnumOptions allowAlias
             * @property {boolean|null} [deprecated] EnumOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
             */

            /**
             * Constructs a new EnumOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumOptions.
             * @implements IEnumOptions
             * @constructor
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             */
            function EnumOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumOptions allowAlias.
             * @member {boolean} allowAlias
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.allowAlias = false;

            /**
             * EnumOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.deprecated = false;

            /**
             * EnumOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.EnumOptions
             * @instance
             */
            EnumOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new EnumOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
             * @returns {google.protobuf.EnumOptions} EnumOptions instance
             */
            EnumOptions.create = function create(properties) {
                return new EnumOptions(properties);
            };

            /**
             * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (let i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2: {
                            message.allowAlias = reader.bool();
                            break;
                        }
                    case 3: {
                            message.deprecated = reader.bool();
                            break;
                        }
                    case 999: {
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumOptions} EnumOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumOptions message.
             * @function verify
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                    if (typeof message.allowAlias !== "boolean")
                        return "allowAlias: boolean expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumOptions} EnumOptions
             */
            EnumOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumOptions)
                    return object;
                let message = new $root.google.protobuf.EnumOptions();
                if (object.allowAlias != null)
                    message.allowAlias = Boolean(object.allowAlias);
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {google.protobuf.EnumOptions} message EnumOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.allowAlias = false;
                    object.deprecated = false;
                }
                if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                    object.allowAlias = message.allowAlias;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for EnumOptions
             * @function getTypeUrl
             * @memberof google.protobuf.EnumOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            EnumOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.EnumOptions";
            };

            return EnumOptions;
        })();

        protobuf.EnumValueOptions = (function() {

            /**
             * Properties of an EnumValueOptions.
             * @memberof google.protobuf
             * @interface IEnumValueOptions
             * @property {boolean|null} [deprecated] EnumValueOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
             */

            /**
             * Constructs a new EnumValueOptions.
             * @memberof google.protobuf
             * @classdesc Represents an EnumValueOptions.
             * @implements IEnumValueOptions
             * @constructor
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             */
            function EnumValueOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * EnumValueOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.deprecated = false;

            /**
             * EnumValueOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             */
            EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new EnumValueOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
             */
            EnumValueOptions.create = function create(properties) {
                return new EnumValueOptions(properties);
            };

            /**
             * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (let i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.deprecated = reader.bool();
                            break;
                        }
                    case 999: {
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an EnumValueOptions message.
             * @function verify
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            EnumValueOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
             */
            EnumValueOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.EnumValueOptions)
                    return object;
                let message = new $root.google.protobuf.EnumValueOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            EnumValueOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this EnumValueOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.EnumValueOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            EnumValueOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for EnumValueOptions
             * @function getTypeUrl
             * @memberof google.protobuf.EnumValueOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            EnumValueOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.EnumValueOptions";
            };

            return EnumValueOptions;
        })();

        protobuf.ServiceOptions = (function() {

            /**
             * Properties of a ServiceOptions.
             * @memberof google.protobuf
             * @interface IServiceOptions
             * @property {boolean|null} [deprecated] ServiceOptions deprecated
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
             */

            /**
             * Constructs a new ServiceOptions.
             * @memberof google.protobuf
             * @classdesc Represents a ServiceOptions.
             * @implements IServiceOptions
             * @constructor
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             */
            function ServiceOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * ServiceOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.deprecated = false;

            /**
             * ServiceOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.ServiceOptions
             * @instance
             */
            ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * Creates a new ServiceOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
             * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
             */
            ServiceOptions.create = function create(properties) {
                return new ServiceOptions(properties);
            };

            /**
             * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (let i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33: {
                            message.deprecated = reader.bool();
                            break;
                        }
                    case 999: {
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a ServiceOptions message.
             * @function verify
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ServiceOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.ServiceOptions} ServiceOptions
             */
            ServiceOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.ServiceOptions)
                    return object;
                let message = new $root.google.protobuf.ServiceOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {google.protobuf.ServiceOptions} message ServiceOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ServiceOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults)
                    object.deprecated = false;
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                return object;
            };

            /**
             * Converts this ServiceOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.ServiceOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ServiceOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for ServiceOptions
             * @function getTypeUrl
             * @memberof google.protobuf.ServiceOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            ServiceOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.ServiceOptions";
            };

            return ServiceOptions;
        })();

        protobuf.MethodOptions = (function() {

            /**
             * Properties of a MethodOptions.
             * @memberof google.protobuf
             * @interface IMethodOptions
             * @property {boolean|null} [deprecated] MethodOptions deprecated
             * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
             * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
             * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
             */

            /**
             * Constructs a new MethodOptions.
             * @memberof google.protobuf
             * @classdesc Represents a MethodOptions.
             * @implements IMethodOptions
             * @constructor
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             */
            function MethodOptions(properties) {
                this.uninterpretedOption = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * MethodOptions deprecated.
             * @member {boolean} deprecated
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.deprecated = false;

            /**
             * MethodOptions idempotencyLevel.
             * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.idempotencyLevel = 0;

            /**
             * MethodOptions uninterpretedOption.
             * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype.uninterpretedOption = $util.emptyArray;

            /**
             * MethodOptions .google.api.http.
             * @member {google.api.IHttpRule|null|undefined} .google.api.http
             * @memberof google.protobuf.MethodOptions
             * @instance
             */
            MethodOptions.prototype[".google.api.http"] = null;

            /**
             * Creates a new MethodOptions instance using the specified properties.
             * @function create
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
             * @returns {google.protobuf.MethodOptions} MethodOptions instance
             */
            MethodOptions.create = function create(properties) {
                return new MethodOptions(properties);
            };

            /**
             * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                    writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                    writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                    for (let i = 0; i < message.uninterpretedOption.length; ++i)
                        $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                    $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 33: {
                            message.deprecated = reader.bool();
                            break;
                        }
                    case 34: {
                            message.idempotencyLevel = reader.int32();
                            break;
                        }
                    case 999: {
                            if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                message.uninterpretedOption = [];
                            message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        }
                    case 72295728: {
                            message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.MethodOptions} MethodOptions
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a MethodOptions message.
             * @function verify
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            MethodOptions.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    if (typeof message.deprecated !== "boolean")
                        return "deprecated: boolean expected";
                if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                    switch (message.idempotencyLevel) {
                    default:
                        return "idempotencyLevel: enum value expected";
                    case 0:
                    case 1:
                    case 2:
                        break;
                    }
                if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                    if (!Array.isArray(message.uninterpretedOption))
                        return "uninterpretedOption: array expected";
                    for (let i = 0; i < message.uninterpretedOption.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                        if (error)
                            return "uninterpretedOption." + error;
                    }
                }
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                    let error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                    if (error)
                        return ".google.api.http." + error;
                }
                return null;
            };

            /**
             * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.MethodOptions} MethodOptions
             */
            MethodOptions.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.MethodOptions)
                    return object;
                let message = new $root.google.protobuf.MethodOptions();
                if (object.deprecated != null)
                    message.deprecated = Boolean(object.deprecated);
                switch (object.idempotencyLevel) {
                default:
                    if (typeof object.idempotencyLevel === "number") {
                        message.idempotencyLevel = object.idempotencyLevel;
                        break;
                    }
                    break;
                case "IDEMPOTENCY_UNKNOWN":
                case 0:
                    message.idempotencyLevel = 0;
                    break;
                case "NO_SIDE_EFFECTS":
                case 1:
                    message.idempotencyLevel = 1;
                    break;
                case "IDEMPOTENT":
                case 2:
                    message.idempotencyLevel = 2;
                    break;
                }
                if (object.uninterpretedOption) {
                    if (!Array.isArray(object.uninterpretedOption))
                        throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                    message.uninterpretedOption = [];
                    for (let i = 0; i < object.uninterpretedOption.length; ++i) {
                        if (typeof object.uninterpretedOption[i] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                        message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                    }
                }
                if (object[".google.api.http"] != null) {
                    if (typeof object[".google.api.http"] !== "object")
                        throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                    message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                }
                return message;
            };

            /**
             * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {google.protobuf.MethodOptions} message MethodOptions
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            MethodOptions.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.uninterpretedOption = [];
                if (options.defaults) {
                    object.deprecated = false;
                    object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                    object[".google.api.http"] = null;
                }
                if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                    object.deprecated = message.deprecated;
                if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                    object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] === undefined ? message.idempotencyLevel : $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                if (message.uninterpretedOption && message.uninterpretedOption.length) {
                    object.uninterpretedOption = [];
                    for (let j = 0; j < message.uninterpretedOption.length; ++j)
                        object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                }
                if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                    object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                return object;
            };

            /**
             * Converts this MethodOptions to JSON.
             * @function toJSON
             * @memberof google.protobuf.MethodOptions
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            MethodOptions.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for MethodOptions
             * @function getTypeUrl
             * @memberof google.protobuf.MethodOptions
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            MethodOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.MethodOptions";
            };

            /**
             * IdempotencyLevel enum.
             * @name google.protobuf.MethodOptions.IdempotencyLevel
             * @enum {number}
             * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
             * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
             * @property {number} IDEMPOTENT=2 IDEMPOTENT value
             */
            MethodOptions.IdempotencyLevel = (function() {
                const valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                values[valuesById[2] = "IDEMPOTENT"] = 2;
                return values;
            })();

            return MethodOptions;
        })();

        protobuf.UninterpretedOption = (function() {

            /**
             * Properties of an UninterpretedOption.
             * @memberof google.protobuf
             * @interface IUninterpretedOption
             * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
             * @property {string|null} [identifierValue] UninterpretedOption identifierValue
             * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
             * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
             * @property {number|null} [doubleValue] UninterpretedOption doubleValue
             * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
             * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
             */

            /**
             * Constructs a new UninterpretedOption.
             * @memberof google.protobuf
             * @classdesc Represents an UninterpretedOption.
             * @implements IUninterpretedOption
             * @constructor
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             */
            function UninterpretedOption(properties) {
                this.name = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * UninterpretedOption name.
             * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.name = $util.emptyArray;

            /**
             * UninterpretedOption identifierValue.
             * @member {string} identifierValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.identifierValue = "";

            /**
             * UninterpretedOption positiveIntValue.
             * @member {number|Long} positiveIntValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;

            /**
             * UninterpretedOption negativeIntValue.
             * @member {number|Long} negativeIntValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * UninterpretedOption doubleValue.
             * @member {number} doubleValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.doubleValue = 0;

            /**
             * UninterpretedOption stringValue.
             * @member {Uint8Array} stringValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.stringValue = $util.newBuffer([]);

            /**
             * UninterpretedOption aggregateValue.
             * @member {string} aggregateValue
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             */
            UninterpretedOption.prototype.aggregateValue = "";

            /**
             * Creates a new UninterpretedOption instance using the specified properties.
             * @function create
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
             */
            UninterpretedOption.create = function create(properties) {
                return new UninterpretedOption(properties);
            };

            /**
             * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && message.name.length)
                    for (let i = 0; i < message.name.length; ++i)
                        $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                    writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                    writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                    writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                    writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                return writer;
            };

            /**
             * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 2: {
                            if (!(message.name && message.name.length))
                                message.name = [];
                            message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                            break;
                        }
                    case 3: {
                            message.identifierValue = reader.string();
                            break;
                        }
                    case 4: {
                            message.positiveIntValue = reader.uint64();
                            break;
                        }
                    case 5: {
                            message.negativeIntValue = reader.int64();
                            break;
                        }
                    case 6: {
                            message.doubleValue = reader.double();
                            break;
                        }
                    case 7: {
                            message.stringValue = reader.bytes();
                            break;
                        }
                    case 8: {
                            message.aggregateValue = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies an UninterpretedOption message.
             * @function verify
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            UninterpretedOption.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name")) {
                    if (!Array.isArray(message.name))
                        return "name: array expected";
                    for (let i = 0; i < message.name.length; ++i) {
                        let error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                        if (error)
                            return "name." + error;
                    }
                }
                if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                    if (!$util.isString(message.identifierValue))
                        return "identifierValue: string expected";
                if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                    if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                        return "positiveIntValue: integer|Long expected";
                if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                    if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                        return "negativeIntValue: integer|Long expected";
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                    if (typeof message.doubleValue !== "number")
                        return "doubleValue: number expected";
                if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                    if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                        return "stringValue: buffer expected";
                if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                    if (!$util.isString(message.aggregateValue))
                        return "aggregateValue: string expected";
                return null;
            };

            /**
             * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
             */
            UninterpretedOption.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.UninterpretedOption)
                    return object;
                let message = new $root.google.protobuf.UninterpretedOption();
                if (object.name) {
                    if (!Array.isArray(object.name))
                        throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                    message.name = [];
                    for (let i = 0; i < object.name.length; ++i) {
                        if (typeof object.name[i] !== "object")
                            throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                        message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                    }
                }
                if (object.identifierValue != null)
                    message.identifierValue = String(object.identifierValue);
                if (object.positiveIntValue != null)
                    if ($util.Long)
                        (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                    else if (typeof object.positiveIntValue === "string")
                        message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                    else if (typeof object.positiveIntValue === "number")
                        message.positiveIntValue = object.positiveIntValue;
                    else if (typeof object.positiveIntValue === "object")
                        message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                if (object.negativeIntValue != null)
                    if ($util.Long)
                        (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                    else if (typeof object.negativeIntValue === "string")
                        message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                    else if (typeof object.negativeIntValue === "number")
                        message.negativeIntValue = object.negativeIntValue;
                    else if (typeof object.negativeIntValue === "object")
                        message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                if (object.doubleValue != null)
                    message.doubleValue = Number(object.doubleValue);
                if (object.stringValue != null)
                    if (typeof object.stringValue === "string")
                        $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                    else if (object.stringValue.length >= 0)
                        message.stringValue = object.stringValue;
                if (object.aggregateValue != null)
                    message.aggregateValue = String(object.aggregateValue);
                return message;
            };

            /**
             * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            UninterpretedOption.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.name = [];
                if (options.defaults) {
                    object.identifierValue = "";
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, true);
                        object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.positiveIntValue = options.longs === String ? "0" : 0;
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.negativeIntValue = options.longs === String ? "0" : 0;
                    object.doubleValue = 0;
                    if (options.bytes === String)
                        object.stringValue = "";
                    else {
                        object.stringValue = [];
                        if (options.bytes !== Array)
                            object.stringValue = $util.newBuffer(object.stringValue);
                    }
                    object.aggregateValue = "";
                }
                if (message.name && message.name.length) {
                    object.name = [];
                    for (let j = 0; j < message.name.length; ++j)
                        object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                }
                if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                    object.identifierValue = message.identifierValue;
                if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                    if (typeof message.positiveIntValue === "number")
                        object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                    else
                        object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                    if (typeof message.negativeIntValue === "number")
                        object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                    else
                        object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                    object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                    object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                    object.aggregateValue = message.aggregateValue;
                return object;
            };

            /**
             * Converts this UninterpretedOption to JSON.
             * @function toJSON
             * @memberof google.protobuf.UninterpretedOption
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            UninterpretedOption.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for UninterpretedOption
             * @function getTypeUrl
             * @memberof google.protobuf.UninterpretedOption
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            UninterpretedOption.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.UninterpretedOption";
            };

            UninterpretedOption.NamePart = (function() {

                /**
                 * Properties of a NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @interface INamePart
                 * @property {string} namePart NamePart namePart
                 * @property {boolean} isExtension NamePart isExtension
                 */

                /**
                 * Constructs a new NamePart.
                 * @memberof google.protobuf.UninterpretedOption
                 * @classdesc Represents a NamePart.
                 * @implements INamePart
                 * @constructor
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 */
                function NamePart(properties) {
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * NamePart namePart.
                 * @member {string} namePart
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.namePart = "";

                /**
                 * NamePart isExtension.
                 * @member {boolean} isExtension
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 */
                NamePart.prototype.isExtension = false;

                /**
                 * Creates a new NamePart instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                 */
                NamePart.create = function create(properties) {
                    return new NamePart(properties);
                };

                /**
                 * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                    return writer;
                };

                /**
                 * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.namePart = reader.string();
                                break;
                            }
                        case 2: {
                                message.isExtension = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    if (!message.hasOwnProperty("namePart"))
                        throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                    if (!message.hasOwnProperty("isExtension"))
                        throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                    return message;
                };

                /**
                 * Decodes a NamePart message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                NamePart.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a NamePart message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                NamePart.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (!$util.isString(message.namePart))
                        return "namePart: string expected";
                    if (typeof message.isExtension !== "boolean")
                        return "isExtension: boolean expected";
                    return null;
                };

                /**
                 * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                 */
                NamePart.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                        return object;
                    let message = new $root.google.protobuf.UninterpretedOption.NamePart();
                    if (object.namePart != null)
                        message.namePart = String(object.namePart);
                    if (object.isExtension != null)
                        message.isExtension = Boolean(object.isExtension);
                    return message;
                };

                /**
                 * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                NamePart.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.defaults) {
                        object.namePart = "";
                        object.isExtension = false;
                    }
                    if (message.namePart != null && message.hasOwnProperty("namePart"))
                        object.namePart = message.namePart;
                    if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                        object.isExtension = message.isExtension;
                    return object;
                };

                /**
                 * Converts this NamePart to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                NamePart.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for NamePart
                 * @function getTypeUrl
                 * @memberof google.protobuf.UninterpretedOption.NamePart
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                NamePart.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.UninterpretedOption.NamePart";
                };

                return NamePart;
            })();

            return UninterpretedOption;
        })();

        protobuf.SourceCodeInfo = (function() {

            /**
             * Properties of a SourceCodeInfo.
             * @memberof google.protobuf
             * @interface ISourceCodeInfo
             * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
             */

            /**
             * Constructs a new SourceCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a SourceCodeInfo.
             * @implements ISourceCodeInfo
             * @constructor
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             */
            function SourceCodeInfo(properties) {
                this.location = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * SourceCodeInfo location.
             * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             */
            SourceCodeInfo.prototype.location = $util.emptyArray;

            /**
             * Creates a new SourceCodeInfo instance using the specified properties.
             * @function create
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
             */
            SourceCodeInfo.create = function create(properties) {
                return new SourceCodeInfo(properties);
            };

            /**
             * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.location != null && message.location.length)
                    for (let i = 0; i < message.location.length; ++i)
                        $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.location && message.location.length))
                                message.location = [];
                            message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a SourceCodeInfo message.
             * @function verify
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            SourceCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.location != null && message.hasOwnProperty("location")) {
                    if (!Array.isArray(message.location))
                        return "location: array expected";
                    for (let i = 0; i < message.location.length; ++i) {
                        let error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                        if (error)
                            return "location." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
             */
            SourceCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.SourceCodeInfo)
                    return object;
                let message = new $root.google.protobuf.SourceCodeInfo();
                if (object.location) {
                    if (!Array.isArray(object.location))
                        throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                    message.location = [];
                    for (let i = 0; i < object.location.length; ++i) {
                        if (typeof object.location[i] !== "object")
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                        message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            SourceCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.location = [];
                if (message.location && message.location.length) {
                    object.location = [];
                    for (let j = 0; j < message.location.length; ++j)
                        object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                }
                return object;
            };

            /**
             * Converts this SourceCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.SourceCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            SourceCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for SourceCodeInfo
             * @function getTypeUrl
             * @memberof google.protobuf.SourceCodeInfo
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            SourceCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.SourceCodeInfo";
            };

            SourceCodeInfo.Location = (function() {

                /**
                 * Properties of a Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @interface ILocation
                 * @property {Array.<number>|null} [path] Location path
                 * @property {Array.<number>|null} [span] Location span
                 * @property {string|null} [leadingComments] Location leadingComments
                 * @property {string|null} [trailingComments] Location trailingComments
                 * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                 */

                /**
                 * Constructs a new Location.
                 * @memberof google.protobuf.SourceCodeInfo
                 * @classdesc Represents a Location.
                 * @implements ILocation
                 * @constructor
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 */
                function Location(properties) {
                    this.path = [];
                    this.span = [];
                    this.leadingDetachedComments = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Location path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.path = $util.emptyArray;

                /**
                 * Location span.
                 * @member {Array.<number>} span
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.span = $util.emptyArray;

                /**
                 * Location leadingComments.
                 * @member {string} leadingComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leadingComments = "";

                /**
                 * Location trailingComments.
                 * @member {string} trailingComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.trailingComments = "";

                /**
                 * Location leadingDetachedComments.
                 * @member {Array.<string>} leadingDetachedComments
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 */
                Location.prototype.leadingDetachedComments = $util.emptyArray;

                /**
                 * Creates a new Location instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                 */
                Location.create = function create(properties) {
                    return new Location(properties);
                };

                /**
                 * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (let i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.span != null && message.span.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (let i = 0; i < message.span.length; ++i)
                            writer.int32(message.span[i]);
                        writer.ldelim();
                    }
                    if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                    if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                    if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                        for (let i = 0; i < message.leadingDetachedComments.length; ++i)
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                    return writer;
                };

                /**
                 * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Location.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes a Location message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            }
                        case 2: {
                                if (!(message.span && message.span.length))
                                    message.span = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.span.push(reader.int32());
                                } else
                                    message.span.push(reader.int32());
                                break;
                            }
                        case 3: {
                                message.leadingComments = reader.string();
                                break;
                            }
                        case 4: {
                                message.trailingComments = reader.string();
                                break;
                            }
                        case 6: {
                                if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                    message.leadingDetachedComments = [];
                                message.leadingDetachedComments.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes a Location message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Location.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies a Location message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Location.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.span != null && message.hasOwnProperty("span")) {
                        if (!Array.isArray(message.span))
                            return "span: array expected";
                        for (let i = 0; i < message.span.length; ++i)
                            if (!$util.isInteger(message.span[i]))
                                return "span: integer[] expected";
                    }
                    if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                        if (!$util.isString(message.leadingComments))
                            return "leadingComments: string expected";
                    if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                        if (!$util.isString(message.trailingComments))
                            return "trailingComments: string expected";
                    if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                        if (!Array.isArray(message.leadingDetachedComments))
                            return "leadingDetachedComments: array expected";
                        for (let i = 0; i < message.leadingDetachedComments.length; ++i)
                            if (!$util.isString(message.leadingDetachedComments[i]))
                                return "leadingDetachedComments: string[] expected";
                    }
                    return null;
                };

                /**
                 * Creates a Location message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo.Location} Location
                 */
                Location.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                        return object;
                    let message = new $root.google.protobuf.SourceCodeInfo.Location();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.span) {
                        if (!Array.isArray(object.span))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                        message.span = [];
                        for (let i = 0; i < object.span.length; ++i)
                            message.span[i] = object.span[i] | 0;
                    }
                    if (object.leadingComments != null)
                        message.leadingComments = String(object.leadingComments);
                    if (object.trailingComments != null)
                        message.trailingComments = String(object.trailingComments);
                    if (object.leadingDetachedComments) {
                        if (!Array.isArray(object.leadingDetachedComments))
                            throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                        message.leadingDetachedComments = [];
                        for (let i = 0; i < object.leadingDetachedComments.length; ++i)
                            message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                    }
                    return message;
                };

                /**
                 * Creates a plain object from a Location message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {google.protobuf.SourceCodeInfo.Location} message Location
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Location.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults) {
                        object.path = [];
                        object.span = [];
                        object.leadingDetachedComments = [];
                    }
                    if (options.defaults) {
                        object.leadingComments = "";
                        object.trailingComments = "";
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.span && message.span.length) {
                        object.span = [];
                        for (let j = 0; j < message.span.length; ++j)
                            object.span[j] = message.span[j];
                    }
                    if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                        object.leadingComments = message.leadingComments;
                    if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                        object.trailingComments = message.trailingComments;
                    if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                        object.leadingDetachedComments = [];
                        for (let j = 0; j < message.leadingDetachedComments.length; ++j)
                            object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                    }
                    return object;
                };

                /**
                 * Converts this Location to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Location.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Location
                 * @function getTypeUrl
                 * @memberof google.protobuf.SourceCodeInfo.Location
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.SourceCodeInfo.Location";
                };

                return Location;
            })();

            return SourceCodeInfo;
        })();

        protobuf.GeneratedCodeInfo = (function() {

            /**
             * Properties of a GeneratedCodeInfo.
             * @memberof google.protobuf
             * @interface IGeneratedCodeInfo
             * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
             */

            /**
             * Constructs a new GeneratedCodeInfo.
             * @memberof google.protobuf
             * @classdesc Represents a GeneratedCodeInfo.
             * @implements IGeneratedCodeInfo
             * @constructor
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             */
            function GeneratedCodeInfo(properties) {
                this.annotation = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * GeneratedCodeInfo annotation.
             * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             */
            GeneratedCodeInfo.prototype.annotation = $util.emptyArray;

            /**
             * Creates a new GeneratedCodeInfo instance using the specified properties.
             * @function create
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
             */
            GeneratedCodeInfo.create = function create(properties) {
                return new GeneratedCodeInfo(properties);
            };

            /**
             * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.annotation != null && message.annotation.length)
                    for (let i = 0; i < message.annotation.length; ++i)
                        $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                return writer;
            };

            /**
             * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.annotation && message.annotation.length))
                                message.annotation = [];
                            message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a GeneratedCodeInfo message.
             * @function verify
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            GeneratedCodeInfo.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.annotation != null && message.hasOwnProperty("annotation")) {
                    if (!Array.isArray(message.annotation))
                        return "annotation: array expected";
                    for (let i = 0; i < message.annotation.length; ++i) {
                        let error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                        if (error)
                            return "annotation." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
             */
            GeneratedCodeInfo.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                    return object;
                let message = new $root.google.protobuf.GeneratedCodeInfo();
                if (object.annotation) {
                    if (!Array.isArray(object.annotation))
                        throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                    message.annotation = [];
                    for (let i = 0; i < object.annotation.length; ++i) {
                        if (typeof object.annotation[i] !== "object")
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                        message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            GeneratedCodeInfo.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.annotation = [];
                if (message.annotation && message.annotation.length) {
                    object.annotation = [];
                    for (let j = 0; j < message.annotation.length; ++j)
                        object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                }
                return object;
            };

            /**
             * Converts this GeneratedCodeInfo to JSON.
             * @function toJSON
             * @memberof google.protobuf.GeneratedCodeInfo
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for GeneratedCodeInfo
             * @function getTypeUrl
             * @memberof google.protobuf.GeneratedCodeInfo
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            GeneratedCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo";
            };

            GeneratedCodeInfo.Annotation = (function() {

                /**
                 * Properties of an Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @interface IAnnotation
                 * @property {Array.<number>|null} [path] Annotation path
                 * @property {string|null} [sourceFile] Annotation sourceFile
                 * @property {number|null} [begin] Annotation begin
                 * @property {number|null} [end] Annotation end
                 */

                /**
                 * Constructs a new Annotation.
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @classdesc Represents an Annotation.
                 * @implements IAnnotation
                 * @constructor
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 */
                function Annotation(properties) {
                    this.path = [];
                    if (properties)
                        for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }

                /**
                 * Annotation path.
                 * @member {Array.<number>} path
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.path = $util.emptyArray;

                /**
                 * Annotation sourceFile.
                 * @member {string} sourceFile
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.sourceFile = "";

                /**
                 * Annotation begin.
                 * @member {number} begin
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.begin = 0;

                /**
                 * Annotation end.
                 * @member {number} end
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 */
                Annotation.prototype.end = 0;

                /**
                 * Creates a new Annotation instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                 */
                Annotation.create = function create(properties) {
                    return new Annotation(properties);
                };

                /**
                 * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && message.path.length) {
                        writer.uint32(/* id 1, wireType 2 =*/10).fork();
                        for (let i = 0; i < message.path.length; ++i)
                            writer.int32(message.path[i]);
                        writer.ldelim();
                    }
                    if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                    if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                    if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                    return writer;
                };

                /**
                 * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    while (reader.pos < end) {
                        let tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    let end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            }
                        case 2: {
                                message.sourceFile = reader.string();
                                break;
                            }
                        case 3: {
                                message.begin = reader.int32();
                                break;
                            }
                        case 4: {
                                message.end = reader.int32();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };

                /**
                 * Decodes an Annotation message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Annotation.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };

                /**
                 * Verifies an Annotation message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Annotation.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path")) {
                        if (!Array.isArray(message.path))
                            return "path: array expected";
                        for (let i = 0; i < message.path.length; ++i)
                            if (!$util.isInteger(message.path[i]))
                                return "path: integer[] expected";
                    }
                    if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                        if (!$util.isString(message.sourceFile))
                            return "sourceFile: string expected";
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        if (!$util.isInteger(message.begin))
                            return "begin: integer expected";
                    if (message.end != null && message.hasOwnProperty("end"))
                        if (!$util.isInteger(message.end))
                            return "end: integer expected";
                    return null;
                };

                /**
                 * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                 */
                Annotation.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                        return object;
                    let message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                    if (object.path) {
                        if (!Array.isArray(object.path))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                        message.path = [];
                        for (let i = 0; i < object.path.length; ++i)
                            message.path[i] = object.path[i] | 0;
                    }
                    if (object.sourceFile != null)
                        message.sourceFile = String(object.sourceFile);
                    if (object.begin != null)
                        message.begin = object.begin | 0;
                    if (object.end != null)
                        message.end = object.end | 0;
                    return message;
                };

                /**
                 * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Annotation.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    let object = {};
                    if (options.arrays || options.defaults)
                        object.path = [];
                    if (options.defaults) {
                        object.sourceFile = "";
                        object.begin = 0;
                        object.end = 0;
                    }
                    if (message.path && message.path.length) {
                        object.path = [];
                        for (let j = 0; j < message.path.length; ++j)
                            object.path[j] = message.path[j];
                    }
                    if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                        object.sourceFile = message.sourceFile;
                    if (message.begin != null && message.hasOwnProperty("begin"))
                        object.begin = message.begin;
                    if (message.end != null && message.hasOwnProperty("end"))
                        object.end = message.end;
                    return object;
                };

                /**
                 * Converts this Annotation to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Annotation.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };

                /**
                 * Gets the default type url for Annotation
                 * @function getTypeUrl
                 * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                Annotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo.Annotation";
                };

                return Annotation;
            })();

            return GeneratedCodeInfo;
        })();

        protobuf.Duration = (function() {

            /**
             * Properties of a Duration.
             * @memberof google.protobuf
             * @interface IDuration
             * @property {number|Long|null} [seconds] Duration seconds
             * @property {number|null} [nanos] Duration nanos
             */

            /**
             * Constructs a new Duration.
             * @memberof google.protobuf
             * @classdesc Represents a Duration.
             * @implements IDuration
             * @constructor
             * @param {google.protobuf.IDuration=} [properties] Properties to set
             */
            function Duration(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Duration seconds.
             * @member {number|Long} seconds
             * @memberof google.protobuf.Duration
             * @instance
             */
            Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Duration nanos.
             * @member {number} nanos
             * @memberof google.protobuf.Duration
             * @instance
             */
            Duration.prototype.nanos = 0;

            /**
             * Creates a new Duration instance using the specified properties.
             * @function create
             * @memberof google.protobuf.Duration
             * @static
             * @param {google.protobuf.IDuration=} [properties] Properties to set
             * @returns {google.protobuf.Duration} Duration instance
             */
            Duration.create = function create(properties) {
                return new Duration(properties);
            };

            /**
             * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Duration
             * @static
             * @param {google.protobuf.IDuration} message Duration message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Duration.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                return writer;
            };

            /**
             * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Duration
             * @static
             * @param {google.protobuf.IDuration} message Duration message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Duration.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Duration message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Duration
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Duration} Duration
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Duration.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.seconds = reader.int64();
                            break;
                        }
                    case 2: {
                            message.nanos = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Duration message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Duration
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Duration} Duration
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Duration.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Duration message.
             * @function verify
             * @memberof google.protobuf.Duration
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Duration.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                        return "seconds: integer|Long expected";
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    if (!$util.isInteger(message.nanos))
                        return "nanos: integer expected";
                return null;
            };

            /**
             * Creates a Duration message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Duration
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Duration} Duration
             */
            Duration.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Duration)
                    return object;
                let message = new $root.google.protobuf.Duration();
                if (object.seconds != null)
                    if ($util.Long)
                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                    else if (typeof object.seconds === "string")
                        message.seconds = parseInt(object.seconds, 10);
                    else if (typeof object.seconds === "number")
                        message.seconds = object.seconds;
                    else if (typeof object.seconds === "object")
                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                if (object.nanos != null)
                    message.nanos = object.nanos | 0;
                return message;
            };

            /**
             * Creates a plain object from a Duration message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Duration
             * @static
             * @param {google.protobuf.Duration} message Duration
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Duration.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.seconds = options.longs === String ? "0" : 0;
                    object.nanos = 0;
                }
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (typeof message.seconds === "number")
                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                    else
                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    object.nanos = message.nanos;
                return object;
            };

            /**
             * Converts this Duration to JSON.
             * @function toJSON
             * @memberof google.protobuf.Duration
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Duration.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Duration
             * @function getTypeUrl
             * @memberof google.protobuf.Duration
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Duration.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.Duration";
            };

            return Duration;
        })();

        protobuf.Timestamp = (function() {

            /**
             * Properties of a Timestamp.
             * @memberof google.protobuf
             * @interface ITimestamp
             * @property {number|Long|null} [seconds] Timestamp seconds
             * @property {number|null} [nanos] Timestamp nanos
             */

            /**
             * Constructs a new Timestamp.
             * @memberof google.protobuf
             * @classdesc Represents a Timestamp.
             * @implements ITimestamp
             * @constructor
             * @param {google.protobuf.ITimestamp=} [properties] Properties to set
             */
            function Timestamp(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Timestamp seconds.
             * @member {number|Long} seconds
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

            /**
             * Timestamp nanos.
             * @member {number} nanos
             * @memberof google.protobuf.Timestamp
             * @instance
             */
            Timestamp.prototype.nanos = 0;

            /**
             * Creates a new Timestamp instance using the specified properties.
             * @function create
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp=} [properties] Properties to set
             * @returns {google.protobuf.Timestamp} Timestamp instance
             */
            Timestamp.create = function create(properties) {
                return new Timestamp(properties);
            };

            /**
             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @function encode
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Timestamp.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                return writer;
            };

            /**
             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Timestamp message from the specified reader or buffer.
             * @function decode
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.protobuf.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Timestamp.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.seconds = reader.int64();
                            break;
                        }
                    case 2: {
                            message.nanos = reader.int32();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Timestamp message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.protobuf.Timestamp} Timestamp
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Timestamp.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Timestamp message.
             * @function verify
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Timestamp.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                        return "seconds: integer|Long expected";
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    if (!$util.isInteger(message.nanos))
                        return "nanos: integer expected";
                return null;
            };

            /**
             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.protobuf.Timestamp} Timestamp
             */
            Timestamp.fromObject = function fromObject(object) {
                if (object instanceof $root.google.protobuf.Timestamp)
                    return object;
                let message = new $root.google.protobuf.Timestamp();
                if (object.seconds != null)
                    if ($util.Long)
                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                    else if (typeof object.seconds === "string")
                        message.seconds = parseInt(object.seconds, 10);
                    else if (typeof object.seconds === "number")
                        message.seconds = object.seconds;
                    else if (typeof object.seconds === "object")
                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                if (object.nanos != null)
                    message.nanos = object.nanos | 0;
                return message;
            };

            /**
             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {google.protobuf.Timestamp} message Timestamp
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Timestamp.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    if ($util.Long) {
                        let long = new $util.Long(0, 0, false);
                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                    } else
                        object.seconds = options.longs === String ? "0" : 0;
                    object.nanos = 0;
                }
                if (message.seconds != null && message.hasOwnProperty("seconds"))
                    if (typeof message.seconds === "number")
                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                    else
                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                if (message.nanos != null && message.hasOwnProperty("nanos"))
                    object.nanos = message.nanos;
                return object;
            };

            /**
             * Converts this Timestamp to JSON.
             * @function toJSON
             * @memberof google.protobuf.Timestamp
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Timestamp.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Timestamp
             * @function getTypeUrl
             * @memberof google.protobuf.Timestamp
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Timestamp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.protobuf.Timestamp";
            };

            return Timestamp;
        })();

        return protobuf;
    })();

    google.api = (function() {

        /**
         * Namespace api.
         * @memberof google
         * @namespace
         */
        const api = {};

        api.Http = (function() {

            /**
             * Properties of a Http.
             * @memberof google.api
             * @interface IHttp
             * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
             * @property {boolean|null} [fullyDecodeReservedExpansion] Http fullyDecodeReservedExpansion
             */

            /**
             * Constructs a new Http.
             * @memberof google.api
             * @classdesc Represents a Http.
             * @implements IHttp
             * @constructor
             * @param {google.api.IHttp=} [properties] Properties to set
             */
            function Http(properties) {
                this.rules = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * Http rules.
             * @member {Array.<google.api.IHttpRule>} rules
             * @memberof google.api.Http
             * @instance
             */
            Http.prototype.rules = $util.emptyArray;

            /**
             * Http fullyDecodeReservedExpansion.
             * @member {boolean} fullyDecodeReservedExpansion
             * @memberof google.api.Http
             * @instance
             */
            Http.prototype.fullyDecodeReservedExpansion = false;

            /**
             * Creates a new Http instance using the specified properties.
             * @function create
             * @memberof google.api.Http
             * @static
             * @param {google.api.IHttp=} [properties] Properties to set
             * @returns {google.api.Http} Http instance
             */
            Http.create = function create(properties) {
                return new Http(properties);
            };

            /**
             * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
             * @function encode
             * @memberof google.api.Http
             * @static
             * @param {google.api.IHttp} message Http message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Http.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.rules != null && message.rules.length)
                    for (let i = 0; i < message.rules.length; ++i)
                        $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                if (message.fullyDecodeReservedExpansion != null && Object.hasOwnProperty.call(message, "fullyDecodeReservedExpansion"))
                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fullyDecodeReservedExpansion);
                return writer;
            };

            /**
             * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.Http
             * @static
             * @param {google.api.IHttp} message Http message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            Http.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a Http message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.Http
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.Http} Http
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Http.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            if (!(message.rules && message.rules.length))
                                message.rules = [];
                            message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                            break;
                        }
                    case 2: {
                            message.fullyDecodeReservedExpansion = reader.bool();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a Http message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.Http
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.Http} Http
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            Http.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a Http message.
             * @function verify
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            Http.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.rules != null && message.hasOwnProperty("rules")) {
                    if (!Array.isArray(message.rules))
                        return "rules: array expected";
                    for (let i = 0; i < message.rules.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.rules[i]);
                        if (error)
                            return "rules." + error;
                    }
                }
                if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                    if (typeof message.fullyDecodeReservedExpansion !== "boolean")
                        return "fullyDecodeReservedExpansion: boolean expected";
                return null;
            };

            /**
             * Creates a Http message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.Http
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.Http} Http
             */
            Http.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.Http)
                    return object;
                let message = new $root.google.api.Http();
                if (object.rules) {
                    if (!Array.isArray(object.rules))
                        throw TypeError(".google.api.Http.rules: array expected");
                    message.rules = [];
                    for (let i = 0; i < object.rules.length; ++i) {
                        if (typeof object.rules[i] !== "object")
                            throw TypeError(".google.api.Http.rules: object expected");
                        message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                    }
                }
                if (object.fullyDecodeReservedExpansion != null)
                    message.fullyDecodeReservedExpansion = Boolean(object.fullyDecodeReservedExpansion);
                return message;
            };

            /**
             * Creates a plain object from a Http message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.Http
             * @static
             * @param {google.api.Http} message Http
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            Http.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.rules = [];
                if (options.defaults)
                    object.fullyDecodeReservedExpansion = false;
                if (message.rules && message.rules.length) {
                    object.rules = [];
                    for (let j = 0; j < message.rules.length; ++j)
                        object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                }
                if (message.fullyDecodeReservedExpansion != null && message.hasOwnProperty("fullyDecodeReservedExpansion"))
                    object.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion;
                return object;
            };

            /**
             * Converts this Http to JSON.
             * @function toJSON
             * @memberof google.api.Http
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            Http.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for Http
             * @function getTypeUrl
             * @memberof google.api.Http
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            Http.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.api.Http";
            };

            return Http;
        })();

        api.HttpRule = (function() {

            /**
             * Properties of a HttpRule.
             * @memberof google.api
             * @interface IHttpRule
             * @property {string|null} [selector] HttpRule selector
             * @property {string|null} [get] HttpRule get
             * @property {string|null} [put] HttpRule put
             * @property {string|null} [post] HttpRule post
             * @property {string|null} ["delete"] HttpRule delete
             * @property {string|null} [patch] HttpRule patch
             * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
             * @property {string|null} [body] HttpRule body
             * @property {string|null} [responseBody] HttpRule responseBody
             * @property {Array.<google.api.IHttpRule>|null} [additionalBindings] HttpRule additionalBindings
             */

            /**
             * Constructs a new HttpRule.
             * @memberof google.api
             * @classdesc Represents a HttpRule.
             * @implements IHttpRule
             * @constructor
             * @param {google.api.IHttpRule=} [properties] Properties to set
             */
            function HttpRule(properties) {
                this.additionalBindings = [];
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * HttpRule selector.
             * @member {string} selector
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.selector = "";

            /**
             * HttpRule get.
             * @member {string|null|undefined} get
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.get = null;

            /**
             * HttpRule put.
             * @member {string|null|undefined} put
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.put = null;

            /**
             * HttpRule post.
             * @member {string|null|undefined} post
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.post = null;

            /**
             * HttpRule delete.
             * @member {string|null|undefined} delete
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype["delete"] = null;

            /**
             * HttpRule patch.
             * @member {string|null|undefined} patch
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.patch = null;

            /**
             * HttpRule custom.
             * @member {google.api.ICustomHttpPattern|null|undefined} custom
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.custom = null;

            /**
             * HttpRule body.
             * @member {string} body
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.body = "";

            /**
             * HttpRule responseBody.
             * @member {string} responseBody
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.responseBody = "";

            /**
             * HttpRule additionalBindings.
             * @member {Array.<google.api.IHttpRule>} additionalBindings
             * @memberof google.api.HttpRule
             * @instance
             */
            HttpRule.prototype.additionalBindings = $util.emptyArray;

            // OneOf field names bound to virtual getters and setters
            let $oneOfFields;

            /**
             * HttpRule pattern.
             * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
             * @memberof google.api.HttpRule
             * @instance
             */
            Object.defineProperty(HttpRule.prototype, "pattern", {
                get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                set: $util.oneOfSetter($oneOfFields)
            });

            /**
             * Creates a new HttpRule instance using the specified properties.
             * @function create
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.IHttpRule=} [properties] Properties to set
             * @returns {google.api.HttpRule} HttpRule instance
             */
            HttpRule.create = function create(properties) {
                return new HttpRule(properties);
            };

            /**
             * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @function encode
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HttpRule.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                    writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                    $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                if (message.additionalBindings != null && message.additionalBindings.length)
                    for (let i = 0; i < message.additionalBindings.length; ++i)
                        $root.google.api.HttpRule.encode(message.additionalBindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                if (message.responseBody != null && Object.hasOwnProperty.call(message, "responseBody"))
                    writer.uint32(/* id 12, wireType 2 =*/98).string(message.responseBody);
                return writer;
            };

            /**
             * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a HttpRule message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.HttpRule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.HttpRule} HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HttpRule.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.selector = reader.string();
                            break;
                        }
                    case 2: {
                            message.get = reader.string();
                            break;
                        }
                    case 3: {
                            message.put = reader.string();
                            break;
                        }
                    case 4: {
                            message.post = reader.string();
                            break;
                        }
                    case 5: {
                            message["delete"] = reader.string();
                            break;
                        }
                    case 6: {
                            message.patch = reader.string();
                            break;
                        }
                    case 8: {
                            message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                            break;
                        }
                    case 7: {
                            message.body = reader.string();
                            break;
                        }
                    case 12: {
                            message.responseBody = reader.string();
                            break;
                        }
                    case 11: {
                            if (!(message.additionalBindings && message.additionalBindings.length))
                                message.additionalBindings = [];
                            message.additionalBindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a HttpRule message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.HttpRule
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.HttpRule} HttpRule
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            HttpRule.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a HttpRule message.
             * @function verify
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            HttpRule.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                let properties = {};
                if (message.selector != null && message.hasOwnProperty("selector"))
                    if (!$util.isString(message.selector))
                        return "selector: string expected";
                if (message.get != null && message.hasOwnProperty("get")) {
                    properties.pattern = 1;
                    if (!$util.isString(message.get))
                        return "get: string expected";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.put))
                        return "put: string expected";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.post))
                        return "post: string expected";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message["delete"]))
                        return "delete: string expected";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    if (!$util.isString(message.patch))
                        return "patch: string expected";
                }
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    if (properties.pattern === 1)
                        return "pattern: multiple values";
                    properties.pattern = 1;
                    {
                        let error = $root.google.api.CustomHttpPattern.verify(message.custom);
                        if (error)
                            return "custom." + error;
                    }
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    if (!$util.isString(message.body))
                        return "body: string expected";
                if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                    if (!$util.isString(message.responseBody))
                        return "responseBody: string expected";
                if (message.additionalBindings != null && message.hasOwnProperty("additionalBindings")) {
                    if (!Array.isArray(message.additionalBindings))
                        return "additionalBindings: array expected";
                    for (let i = 0; i < message.additionalBindings.length; ++i) {
                        let error = $root.google.api.HttpRule.verify(message.additionalBindings[i]);
                        if (error)
                            return "additionalBindings." + error;
                    }
                }
                return null;
            };

            /**
             * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.HttpRule
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.HttpRule} HttpRule
             */
            HttpRule.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.HttpRule)
                    return object;
                let message = new $root.google.api.HttpRule();
                if (object.selector != null)
                    message.selector = String(object.selector);
                if (object.get != null)
                    message.get = String(object.get);
                if (object.put != null)
                    message.put = String(object.put);
                if (object.post != null)
                    message.post = String(object.post);
                if (object["delete"] != null)
                    message["delete"] = String(object["delete"]);
                if (object.patch != null)
                    message.patch = String(object.patch);
                if (object.custom != null) {
                    if (typeof object.custom !== "object")
                        throw TypeError(".google.api.HttpRule.custom: object expected");
                    message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                }
                if (object.body != null)
                    message.body = String(object.body);
                if (object.responseBody != null)
                    message.responseBody = String(object.responseBody);
                if (object.additionalBindings) {
                    if (!Array.isArray(object.additionalBindings))
                        throw TypeError(".google.api.HttpRule.additionalBindings: array expected");
                    message.additionalBindings = [];
                    for (let i = 0; i < object.additionalBindings.length; ++i) {
                        if (typeof object.additionalBindings[i] !== "object")
                            throw TypeError(".google.api.HttpRule.additionalBindings: object expected");
                        message.additionalBindings[i] = $root.google.api.HttpRule.fromObject(object.additionalBindings[i]);
                    }
                }
                return message;
            };

            /**
             * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.HttpRule
             * @static
             * @param {google.api.HttpRule} message HttpRule
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            HttpRule.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.arrays || options.defaults)
                    object.additionalBindings = [];
                if (options.defaults) {
                    object.selector = "";
                    object.body = "";
                    object.responseBody = "";
                }
                if (message.selector != null && message.hasOwnProperty("selector"))
                    object.selector = message.selector;
                if (message.get != null && message.hasOwnProperty("get")) {
                    object.get = message.get;
                    if (options.oneofs)
                        object.pattern = "get";
                }
                if (message.put != null && message.hasOwnProperty("put")) {
                    object.put = message.put;
                    if (options.oneofs)
                        object.pattern = "put";
                }
                if (message.post != null && message.hasOwnProperty("post")) {
                    object.post = message.post;
                    if (options.oneofs)
                        object.pattern = "post";
                }
                if (message["delete"] != null && message.hasOwnProperty("delete")) {
                    object["delete"] = message["delete"];
                    if (options.oneofs)
                        object.pattern = "delete";
                }
                if (message.patch != null && message.hasOwnProperty("patch")) {
                    object.patch = message.patch;
                    if (options.oneofs)
                        object.pattern = "patch";
                }
                if (message.body != null && message.hasOwnProperty("body"))
                    object.body = message.body;
                if (message.custom != null && message.hasOwnProperty("custom")) {
                    object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                    if (options.oneofs)
                        object.pattern = "custom";
                }
                if (message.additionalBindings && message.additionalBindings.length) {
                    object.additionalBindings = [];
                    for (let j = 0; j < message.additionalBindings.length; ++j)
                        object.additionalBindings[j] = $root.google.api.HttpRule.toObject(message.additionalBindings[j], options);
                }
                if (message.responseBody != null && message.hasOwnProperty("responseBody"))
                    object.responseBody = message.responseBody;
                return object;
            };

            /**
             * Converts this HttpRule to JSON.
             * @function toJSON
             * @memberof google.api.HttpRule
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            HttpRule.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for HttpRule
             * @function getTypeUrl
             * @memberof google.api.HttpRule
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            HttpRule.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.api.HttpRule";
            };

            return HttpRule;
        })();

        api.CustomHttpPattern = (function() {

            /**
             * Properties of a CustomHttpPattern.
             * @memberof google.api
             * @interface ICustomHttpPattern
             * @property {string|null} [kind] CustomHttpPattern kind
             * @property {string|null} [path] CustomHttpPattern path
             */

            /**
             * Constructs a new CustomHttpPattern.
             * @memberof google.api
             * @classdesc Represents a CustomHttpPattern.
             * @implements ICustomHttpPattern
             * @constructor
             * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
             */
            function CustomHttpPattern(properties) {
                if (properties)
                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }

            /**
             * CustomHttpPattern kind.
             * @member {string} kind
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.kind = "";

            /**
             * CustomHttpPattern path.
             * @member {string} path
             * @memberof google.api.CustomHttpPattern
             * @instance
             */
            CustomHttpPattern.prototype.path = "";

            /**
             * Creates a new CustomHttpPattern instance using the specified properties.
             * @function create
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern instance
             */
            CustomHttpPattern.create = function create(properties) {
                return new CustomHttpPattern(properties);
            };

            /**
             * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @function encode
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CustomHttpPattern.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                return writer;
            };

            /**
             * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
             * @function encodeDelimited
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer.
             * @function decode
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CustomHttpPattern.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                while (reader.pos < end) {
                    let tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1: {
                            message.kind = reader.string();
                            break;
                        }
                    case 2: {
                            message.path = reader.string();
                            break;
                        }
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };

            /**
             * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };

            /**
             * Verifies a CustomHttpPattern message.
             * @function verify
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            CustomHttpPattern.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.kind != null && message.hasOwnProperty("kind"))
                    if (!$util.isString(message.kind))
                        return "kind: string expected";
                if (message.path != null && message.hasOwnProperty("path"))
                    if (!$util.isString(message.path))
                        return "path: string expected";
                return null;
            };

            /**
             * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {google.api.CustomHttpPattern} CustomHttpPattern
             */
            CustomHttpPattern.fromObject = function fromObject(object) {
                if (object instanceof $root.google.api.CustomHttpPattern)
                    return object;
                let message = new $root.google.api.CustomHttpPattern();
                if (object.kind != null)
                    message.kind = String(object.kind);
                if (object.path != null)
                    message.path = String(object.path);
                return message;
            };

            /**
             * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
             * @function toObject
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {google.api.CustomHttpPattern} message CustomHttpPattern
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            CustomHttpPattern.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                let object = {};
                if (options.defaults) {
                    object.kind = "";
                    object.path = "";
                }
                if (message.kind != null && message.hasOwnProperty("kind"))
                    object.kind = message.kind;
                if (message.path != null && message.hasOwnProperty("path"))
                    object.path = message.path;
                return object;
            };

            /**
             * Converts this CustomHttpPattern to JSON.
             * @function toJSON
             * @memberof google.api.CustomHttpPattern
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            CustomHttpPattern.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };

            /**
             * Gets the default type url for CustomHttpPattern
             * @function getTypeUrl
             * @memberof google.api.CustomHttpPattern
             * @static
             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
             * @returns {string} The default type url
             */
            CustomHttpPattern.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                if (typeUrlPrefix === undefined) {
                    typeUrlPrefix = "type.googleapis.com";
                }
                return typeUrlPrefix + "/google.api.CustomHttpPattern";
            };

            return CustomHttpPattern;
        })();

        return api;
    })();

    return google;
})();

export { $root as default };
